<!DOCTYPE HTML><html><head><title>All in</title><style id="wiz_custom_css">html, body {
    font-size: 15px;
}

body {
    font-family: Helvetica, "Hiragino Sans GB", "微软雅黑", "Microsoft YaHei UI", SimSun, SimHei, arial, sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 20px 15px;
    padding: 1.33rem 1rem;
}

h1, h2, h3, h4, h5, h6 {
    margin: 20px 0 10px;
    margin: 1.33rem 0 0.667rem;
    padding: 0;
    font-weight: bold;
}

h1 {
    font-size: 21px;
    font-size: 1.4rem;
}

h2 {
    font-size: 20px;
    font-size: 1.33rem;
}

h3 {
    font-size: 18px;
    font-size: 1.2rem;
}

h4 {
    font-size: 17px;
    font-size: 1.13rem;
}

h5 {
    font-size: 15px;
    font-size: 1rem;
}

h6 {
    font-size: 15px;
    font-size: 1rem;
    color: #777777;
    margin: 1rem 0;
}

div, p, ul, ol, dl, li {
    margin: 0;
}

blockquote, table, pre, code {
    margin: 8px 0;
}

ul, ol {
    padding-left: 32px;
    padding-left: 2.13rem;
}

blockquote {
    padding: 0 12px;
    padding: 0 0.8rem;
}

blockquote > :first-child {
    margin-top: 0;
}

blockquote > :last-child {
    margin-bottom: 0;
}

img {
    border: 0;
    max-width: 100%;
    height: auto !important;
    margin: 2px 0;
}

table {
    border-collapse: collapse;
    border: 1px solid #bbbbbb;
}

td, th {
    padding: 4px 8px;
    border-collapse: collapse;
    border: 1px solid #bbbbbb;
    height: 28px;
    word-break: break-all;
    box-sizing: border-box;
}

@media only screen and (-webkit-max-device-width: 1024px), only screen and (-o-max-device-width: 1024px), only screen and (max-device-width: 1024px), only screen and (-webkit-min-device-pixel-ratio: 3), only screen and (-o-min-device-pixel-ratio: 3), only screen and (min-device-pixel-ratio: 3) {
    html, body {
        font-size: 17px;
    }

    body {
        line-height: 1.7;
        padding: 0.75rem 0.9375rem;
        color: #353c47;
    }

    h1 {
        font-size: 2.125rem;
    }

    h2 {
        font-size: 1.875rem;
    }

    h3 {
        font-size: 1.625rem;
    }

    h4 {
        font-size: 1.375rem;
    }

    h5 {
        font-size: 1.125rem;
    }

    h6 {
        color: inherit;
    }

    ul, ol {
        padding-left: 2.5rem;
    }

    blockquote {
        padding: 0 0.9375rem;
    }
}

html, body {
    font-family:Helvetica Neue;
    font-size:15px;
    background-color:#FFFFFF;
}
</style><link type="text/css" rel="stylesheet" id="wiz_code_highlight_link" href="All in_files/wiz_code_highlight.css"></head><body spellcheck="false" ><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><span style="font-size: 110pt;">All in</span></div><!--[if gte mso 9]><xml>
 <o:OfficeDocumentSettings>
  <o:AllowPNG/>
  <o:PixelsPerInch>96</o:PixelsPerInch>
 </o:OfficeDocumentSettings>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Normal</w:View>
  <w:Zoom>0</w:Zoom>
  <w:TrackMoves/>
  <w:TrackFormatting/>
  <w:PunctuationKerning/>
  <w:DrawingGridVerticalSpacing>10 磅</w:DrawingGridVerticalSpacing>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:DoNotPromoteQF/>
  <w:LidThemeOther>EN-US</w:LidThemeOther>
  <w:LidThemeAsian>ZH-CN</w:LidThemeAsian>
  <w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript>
  <w:Compatibility>
   <w:SpaceForUL/>
   <w:BalanceSingleByteDoubleByteWidth/>
   <w:DoNotLeaveBackslashAlone/>
   <w:ULTrailSpace/>
   <w:DoNotExpandShiftReturn/>
   <w:AdjustLineHeightInTable/>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
   <w:SplitPgBreakAndParaMark/>
   <w:EnableOpenTypeKerning/>
   <w:DontFlipMirrorIndents/>
   <w:OverrideTableStyleHps/>
   <w:UseFELayout/>
  </w:Compatibility>
  <m:mathPr>
   <m:mathFont m:val="Cambria Math"/>
   <m:brkBin m:val="before"/>
   <m:brkBinSub m:val="&#45;-"/>
   <m:smallFrac m:val="off"/>
   <m:dispDef/>
   <m:lMargin m:val="0"/>
   <m:rMargin m:val="0"/>
   <m:defJc m:val="centerGroup"/>
   <m:wrapIndent m:val="1440"/>
   <m:intLim m:val="subSup"/>
   <m:naryLim m:val="undOvr"/>
  </m:mathPr></w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" DefUnhideWhenUsed="false"
  DefSemiHidden="false" DefQFormat="false" DefPriority="99"
  LatentStyleCount="382">
  <w:LsdException Locked="false" Priority="0" QFormat="true" Name="Normal"/>
  <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 1"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 2"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 3"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 4"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 5"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 6"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 7"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 8"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 9"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 5"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 6"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 7"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 8"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 9"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 1"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 2"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 3"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 4"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 5"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 6"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 7"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 8"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 9"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Normal Indent"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="footnote text"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="annotation text"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="header"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="footer"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index heading"/>
  <w:LsdException Locked="false" Priority="35" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="caption"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="table of figures"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="envelope address"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="envelope return"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="footnote reference"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="annotation reference"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="line number"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="page number"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="endnote reference"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="endnote text"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="table of authorities"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="macro"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="toa heading"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Bullet"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Number"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List 5"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Bullet 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Bullet 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Bullet 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Bullet 5"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Number 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Number 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Number 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Number 5"/>
  <w:LsdException Locked="false" Priority="10" QFormat="true" Name="Title"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Closing"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Signature"/>
  <w:LsdException Locked="false" Priority="1" SemiHidden="true"
   UnhideWhenUsed="true" Name="Default Paragraph Font"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text Indent"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Continue"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Continue 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Continue 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Continue 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Continue 5"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Message Header"/>
  <w:LsdException Locked="false" Priority="11" QFormat="true" Name="Subtitle"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Salutation"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Date"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text First Indent"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text First Indent 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Note Heading"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text Indent 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text Indent 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Block Text"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Hyperlink"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="FollowedHyperlink"/>
  <w:LsdException Locked="false" Priority="22" QFormat="true" Name="Strong"/>
  <w:LsdException Locked="false" Priority="20" QFormat="true" Name="Emphasis"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Document Map"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Plain Text"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="E-mail Signature"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Top of Form"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Bottom of Form"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Normal (Web)"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Acronym"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Address"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Cite"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Code"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Definition"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Keyboard"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Preformatted"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Sample"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Typewriter"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Variable"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Normal Table"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="annotation subject"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="No List"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Outline List 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Outline List 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Outline List 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Simple 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Simple 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Simple 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Classic 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Classic 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Classic 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Classic 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Colorful 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Colorful 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Colorful 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Columns 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Columns 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Columns 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Columns 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Columns 5"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 5"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 6"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 7"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 8"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 5"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 6"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 7"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 8"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table 3D effects 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table 3D effects 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table 3D effects 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Contemporary"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Elegant"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Professional"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Subtle 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Subtle 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Web 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Web 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Web 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Balloon Text"/>
  <w:LsdException Locked="false" Priority="39" Name="Table Grid"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Theme"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Note Level 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Note Level 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Note Level 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Note Level 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Note Level 5"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Note Level 6"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Note Level 7"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Note Level 8"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Note Level 9"/>
  <w:LsdException Locked="false" SemiHidden="true" Name="Placeholder Text"/>
  <w:LsdException Locked="false" Priority="1" QFormat="true" Name="No Spacing"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 1"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 1"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 1"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 1"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 1"/>
  <w:LsdException Locked="false" SemiHidden="true" Name="Revision"/>
  <w:LsdException Locked="false" Priority="34" QFormat="true"
   Name="List Paragraph"/>
  <w:LsdException Locked="false" Priority="29" QFormat="true" Name="Quote"/>
  <w:LsdException Locked="false" Priority="30" QFormat="true"
   Name="Intense Quote"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 1"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 1"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 1"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 1"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 1"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 1"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 2"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 2"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 2"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 2"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 2"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 2"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 2"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 2"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 3"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 3"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 3"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 3"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 3"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 3"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 3"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 3"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 4"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 4"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 4"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 4"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 4"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 4"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 4"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 4"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 5"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 5"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 5"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 5"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 5"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 5"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 5"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 5"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 6"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 6"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 6"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 6"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 6"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 6"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 6"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 6"/>
  <w:LsdException Locked="false" Priority="19" QFormat="true"
   Name="Subtle Emphasis"/>
  <w:LsdException Locked="false" Priority="21" QFormat="true"
   Name="Intense Emphasis"/>
  <w:LsdException Locked="false" Priority="31" QFormat="true"
   Name="Subtle Reference"/>
  <w:LsdException Locked="false" Priority="32" QFormat="true"
   Name="Intense Reference"/>
  <w:LsdException Locked="false" Priority="33" QFormat="true" Name="Book Title"/>
  <w:LsdException Locked="false" Priority="37" SemiHidden="true"
   UnhideWhenUsed="true" Name="Bibliography"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="TOC Heading"/>
  <w:LsdException Locked="false" Priority="41" Name="Plain Table 1"/>
  <w:LsdException Locked="false" Priority="42" Name="Plain Table 2"/>
  <w:LsdException Locked="false" Priority="43" Name="Plain Table 3"/>
  <w:LsdException Locked="false" Priority="44" Name="Plain Table 4"/>
  <w:LsdException Locked="false" Priority="45" Name="Plain Table 5"/>
  <w:LsdException Locked="false" Priority="40" Name="Grid Table Light"/>
  <w:LsdException Locked="false" Priority="46" Name="Grid Table 1 Light"/>
  <w:LsdException Locked="false" Priority="47" Name="Grid Table 2"/>
  <w:LsdException Locked="false" Priority="48" Name="Grid Table 3"/>
  <w:LsdException Locked="false" Priority="49" Name="Grid Table 4"/>
  <w:LsdException Locked="false" Priority="50" Name="Grid Table 5 Dark"/>
  <w:LsdException Locked="false" Priority="51" Name="Grid Table 6 Colorful"/>
  <w:LsdException Locked="false" Priority="52" Name="Grid Table 7 Colorful"/>
  <w:LsdException Locked="false" Priority="46"
   Name="Grid Table 1 Light Accent 1"/>
  <w:LsdException Locked="false" Priority="47" Name="Grid Table 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="48" Name="Grid Table 3 Accent 1"/>
  <w:LsdException Locked="false" Priority="49" Name="Grid Table 4 Accent 1"/>
  <w:LsdException Locked="false" Priority="50" Name="Grid Table 5 Dark Accent 1"/>
  <w:LsdException Locked="false" Priority="51"
   Name="Grid Table 6 Colorful Accent 1"/>
  <w:LsdException Locked="false" Priority="52"
   Name="Grid Table 7 Colorful Accent 1"/>
  <w:LsdException Locked="false" Priority="46"
   Name="Grid Table 1 Light Accent 2"/>
  <w:LsdException Locked="false" Priority="47" Name="Grid Table 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="48" Name="Grid Table 3 Accent 2"/>
  <w:LsdException Locked="false" Priority="49" Name="Grid Table 4 Accent 2"/>
  <w:LsdException Locked="false" Priority="50" Name="Grid Table 5 Dark Accent 2"/>
  <w:LsdException Locked="false" Priority="51"
   Name="Grid Table 6 Colorful Accent 2"/>
  <w:LsdException Locked="false" Priority="52"
   Name="Grid Table 7 Colorful Accent 2"/>
  <w:LsdException Locked="false" Priority="46"
   Name="Grid Table 1 Light Accent 3"/>
  <w:LsdException Locked="false" Priority="47" Name="Grid Table 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="48" Name="Grid Table 3 Accent 3"/>
  <w:LsdException Locked="false" Priority="49" Name="Grid Table 4 Accent 3"/>
  <w:LsdException Locked="false" Priority="50" Name="Grid Table 5 Dark Accent 3"/>
  <w:LsdException Locked="false" Priority="51"
   Name="Grid Table 6 Colorful Accent 3"/>
  <w:LsdException Locked="false" Priority="52"
   Name="Grid Table 7 Colorful Accent 3"/>
  <w:LsdException Locked="false" Priority="46"
   Name="Grid Table 1 Light Accent 4"/>
  <w:LsdException Locked="false" Priority="47" Name="Grid Table 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="48" Name="Grid Table 3 Accent 4"/>
  <w:LsdException Locked="false" Priority="49" Name="Grid Table 4 Accent 4"/>
  <w:LsdException Locked="false" Priority="50" Name="Grid Table 5 Dark Accent 4"/>
  <w:LsdException Locked="false" Priority="51"
   Name="Grid Table 6 Colorful Accent 4"/>
  <w:LsdException Locked="false" Priority="52"
   Name="Grid Table 7 Colorful Accent 4"/>
  <w:LsdException Locked="false" Priority="46"
   Name="Grid Table 1 Light Accent 5"/>
  <w:LsdException Locked="false" Priority="47" Name="Grid Table 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="48" Name="Grid Table 3 Accent 5"/>
  <w:LsdException Locked="false" Priority="49" Name="Grid Table 4 Accent 5"/>
  <w:LsdException Locked="false" Priority="50" Name="Grid Table 5 Dark Accent 5"/>
  <w:LsdException Locked="false" Priority="51"
   Name="Grid Table 6 Colorful Accent 5"/>
  <w:LsdException Locked="false" Priority="52"
   Name="Grid Table 7 Colorful Accent 5"/>
  <w:LsdException Locked="false" Priority="46"
   Name="Grid Table 1 Light Accent 6"/>
  <w:LsdException Locked="false" Priority="47" Name="Grid Table 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="48" Name="Grid Table 3 Accent 6"/>
  <w:LsdException Locked="false" Priority="49" Name="Grid Table 4 Accent 6"/>
  <w:LsdException Locked="false" Priority="50" Name="Grid Table 5 Dark Accent 6"/>
  <w:LsdException Locked="false" Priority="51"
   Name="Grid Table 6 Colorful Accent 6"/>
  <w:LsdException Locked="false" Priority="52"
   Name="Grid Table 7 Colorful Accent 6"/>
  <w:LsdException Locked="false" Priority="46" Name="List Table 1 Light"/>
  <w:LsdException Locked="false" Priority="47" Name="List Table 2"/>
  <w:LsdException Locked="false" Priority="48" Name="List Table 3"/>
  <w:LsdException Locked="false" Priority="49" Name="List Table 4"/>
  <w:LsdException Locked="false" Priority="50" Name="List Table 5 Dark"/>
  <w:LsdException Locked="false" Priority="51" Name="List Table 6 Colorful"/>
  <w:LsdException Locked="false" Priority="52" Name="List Table 7 Colorful"/>
  <w:LsdException Locked="false" Priority="46"
   Name="List Table 1 Light Accent 1"/>
  <w:LsdException Locked="false" Priority="47" Name="List Table 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="48" Name="List Table 3 Accent 1"/>
  <w:LsdException Locked="false" Priority="49" Name="List Table 4 Accent 1"/>
  <w:LsdException Locked="false" Priority="50" Name="List Table 5 Dark Accent 1"/>
  <w:LsdException Locked="false" Priority="51"
   Name="List Table 6 Colorful Accent 1"/>
  <w:LsdException Locked="false" Priority="52"
   Name="List Table 7 Colorful Accent 1"/>
  <w:LsdException Locked="false" Priority="46"
   Name="List Table 1 Light Accent 2"/>
  <w:LsdException Locked="false" Priority="47" Name="List Table 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="48" Name="List Table 3 Accent 2"/>
  <w:LsdException Locked="false" Priority="49" Name="List Table 4 Accent 2"/>
  <w:LsdException Locked="false" Priority="50" Name="List Table 5 Dark Accent 2"/>
  <w:LsdException Locked="false" Priority="51"
   Name="List Table 6 Colorful Accent 2"/>
  <w:LsdException Locked="false" Priority="52"
   Name="List Table 7 Colorful Accent 2"/>
  <w:LsdException Locked="false" Priority="46"
   Name="List Table 1 Light Accent 3"/>
  <w:LsdException Locked="false" Priority="47" Name="List Table 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="48" Name="List Table 3 Accent 3"/>
  <w:LsdException Locked="false" Priority="49" Name="List Table 4 Accent 3"/>
  <w:LsdException Locked="false" Priority="50" Name="List Table 5 Dark Accent 3"/>
  <w:LsdException Locked="false" Priority="51"
   Name="List Table 6 Colorful Accent 3"/>
  <w:LsdException Locked="false" Priority="52"
   Name="List Table 7 Colorful Accent 3"/>
  <w:LsdException Locked="false" Priority="46"
   Name="List Table 1 Light Accent 4"/>
  <w:LsdException Locked="false" Priority="47" Name="List Table 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="48" Name="List Table 3 Accent 4"/>
  <w:LsdException Locked="false" Priority="49" Name="List Table 4 Accent 4"/>
  <w:LsdException Locked="false" Priority="50" Name="List Table 5 Dark Accent 4"/>
  <w:LsdException Locked="false" Priority="51"
   Name="List Table 6 Colorful Accent 4"/>
  <w:LsdException Locked="false" Priority="52"
   Name="List Table 7 Colorful Accent 4"/>
  <w:LsdException Locked="false" Priority="46"
   Name="List Table 1 Light Accent 5"/>
  <w:LsdException Locked="false" Priority="47" Name="List Table 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="48" Name="List Table 3 Accent 5"/>
  <w:LsdException Locked="false" Priority="49" Name="List Table 4 Accent 5"/>
  <w:LsdException Locked="false" Priority="50" Name="List Table 5 Dark Accent 5"/>
  <w:LsdException Locked="false" Priority="51"
   Name="List Table 6 Colorful Accent 5"/>
  <w:LsdException Locked="false" Priority="52"
   Name="List Table 7 Colorful Accent 5"/>
  <w:LsdException Locked="false" Priority="46"
   Name="List Table 1 Light Accent 6"/>
  <w:LsdException Locked="false" Priority="47" Name="List Table 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="48" Name="List Table 3 Accent 6"/>
  <w:LsdException Locked="false" Priority="49" Name="List Table 4 Accent 6"/>
  <w:LsdException Locked="false" Priority="50" Name="List Table 5 Dark Accent 6"/>
  <w:LsdException Locked="false" Priority="51"
   Name="List Table 6 Colorful Accent 6"/>
  <w:LsdException Locked="false" Priority="52"
   Name="List Table 7 Colorful Accent 6"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Mention"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Smart Hyperlink"/>
 </w:LatentStyles>
</xml><![endif]--><style>
<!--
 
@font-face
  {font-family:"Cambria Math";
  panose-1:2 4 5 3 5 4 6 3 2 4;
  mso-font-charset:1;
  mso-generic-font-family:roman;
  mso-font-format:other;
  mso-font-pitch:variable;
  mso-font-signature:0 0 0 0 0 0;}
@font-face
  {font-family:DengXian;
  panose-1:2 1 6 0 3 1 1 1 1 1;
  mso-font-charset:134;
  mso-generic-font-family:auto;
  mso-font-pitch:variable;
  mso-font-signature:-1610612033 953122042 22 0 262159 0;}
@font-face
  {font-family:"\@DengXian";
  mso-font-charset:134;
  mso-generic-font-family:auto;
  mso-font-pitch:variable;
  mso-font-signature:-1610612033 953122042 22 0 262159 0;}
@font-face
  {font-family:"Helvetica Neue";
  panose-1:2 0 5 3 0 0 0 2 0 4;
  mso-font-charset:0;
  mso-generic-font-family:auto;
  mso-font-pitch:variable;
  mso-font-signature:-452984065 1342208475 16 0 1 0;}
 
p.MsoNormal, li.MsoNormal, div.MsoNormal
  {mso-style-unhide:no;
  mso-style-qformat:yes;
  mso-style-parent:"";
  margin:0cm;
  margin-bottom:.0001pt;
  text-align:justify;
  text-justify:inter-ideograph;
  mso-pagination:none;
  font-size:12.0pt;
  font-family:DengXian;
  mso-ascii-font-family:DengXian;
  mso-ascii-theme-font:minor-latin;
  mso-fareast-font-family:DengXian;
  mso-fareast-theme-font:minor-fareast;
  mso-hansi-font-family:DengXian;
  mso-hansi-theme-font:minor-latin;
  mso-bidi-font-family:"Times New Roman";
  mso-bidi-theme-font:minor-bidi;
  mso-font-kerning:1.0pt;}
.MsoChpDefault
  {mso-style-type:export-only;
  mso-default-props:yes;
  font-family:DengXian;
  mso-bidi-font-family:"Times New Roman";
  mso-bidi-theme-font:minor-bidi;}
 
@page
  {mso-page-border-surround-header:no;
  mso-page-border-surround-footer:no;}
@page WordSection1
  {size:595.0pt 842.0pt;
  margin:72.0pt 90.0pt 72.0pt 90.0pt;
  mso-header-margin:42.55pt;
  mso-footer-margin:49.6pt;
  mso-paper-source:0;
  layout-grid:21.15pt;}
div.WordSection1
  {page:WordSection1;}
-->
</style><!--[if gte mso 10]>
<style>
 /* Style Definitions */
table.MsoNormalTable
  {mso-style-name:普通表格;
  mso-tstyle-rowband-size:0;
  mso-tstyle-colband-size:0;
  mso-style-noshow:yes;
  mso-style-priority:99;
  mso-style-parent:"";
  mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
  mso-para-margin:0cm;
  mso-para-margin-bottom:.0001pt;
  mso-pagination:widow-orphan;
  font-size:12.0pt;
  font-family:DengXian;
  mso-ascii-font-family:DengXian;
  mso-ascii-theme-font:minor-latin;
  mso-fareast-font-family:DengXian;
  mso-fareast-theme-font:minor-fareast;
  mso-hansi-font-family:DengXian;
  mso-hansi-theme-font:minor-latin;
  mso-font-kerning:1.0pt;}
</style>
<![endif]--><!--StartFragment--><!--EndFragment--><div><span lang="EN-GB"><br></span></div><div><span lang="EN-GB"><br></span></div><div><br></div><div><span lang="EN-GB"><br></span></div><div><span lang="EN-GB"><br></span></div><div><span lang="EN-GB"><br></span></div><div><span lang="EN-GB"><br></span></div><div><br></div><div><span lang="EN-GB"><br></span></div><h1><span style="font-size: 36px; background-color: rgb(255, 255, 255);"><font color="#9d45b8"><span data-wiz-span="data-wiz-span" style="font-size: 3.2rem;">一 &nbsp;In Java</span></font></span></h1><div style="mso-element:para-border-div;border:none;border-top:solid #2A2A2A 3.0pt;
mso-border-top-themecolor:text2;padding:18.0pt 0cm 0cm 0cm"><h2><span lang="EN-GB">Java</span><span style="font-family:黑体;mso-ascii-font-family:
Tahoma;mso-ascii-theme-font:major-latin;mso-fareast-font-family:黑体;mso-fareast-theme-font:
major-fareast;mso-hansi-font-family:Tahoma;mso-hansi-theme-font:major-latin">设计模式</span></h2></div><div><h3><span data-wiz-span="data-wiz-span" style="color: rgb(56, 142, 142);">1. 简单工厂模式</span></h3><div>简单工厂模式是类的创建模式，又叫做静态工厂方法（Static Factory Method）模式。简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。</div></div><div><div><img border="0" src="All in_files/45817407.png"></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">TestLogin</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="lit">@Test</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> test</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="typ">Login</span><span class="pln"> login </span><span class="pun">=</span><span class="pln"> </span><span class="typ">LoginSFM</span><span class="pun">.</span><span class="pln">factory</span><span class="pun">(</span><span class="typ">LoginSFM</span><span class="pun">.</span><span class="pln">TYPE</span><span class="pun">.</span><span class="pln">PASSWORD</span><span class="pun">);</span></code></li><li class="L4"><code class="language-c"><span class="pln">    assertTrue</span><span class="pun">(</span><span class="pln">login</span><span class="pun">.</span><span class="pln">getClass</span><span class="pun">().</span><span class="pln">equals</span><span class="pun">(</span><span class="typ">PasswordLogin</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">));</span></code></li><li class="L5"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L6"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></div><div><div><h3><span data-wiz-span="data-wiz-span" style="color: rgb(56, 142, 142);">2. 工厂方法模式</span></h3><div><div>工厂方法模式是类的创建模式，又叫做虚拟构造子(Virtual Constructor)模式或者多态性工厂（Polymorphic Factory）模式。</div><div>工厂方法模式的用意是定义一个创建产品对象的工厂接口，将实际创建工作推迟到子类中。</div></div></div><div><div><img border="0" class="" src="All in_files/45855098.png"></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">TestExport</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="lit">@Test</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> test</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="typ">String</span><span class="pln"> data </span><span class="pun">=</span><span class="pln"> </span><span class="str">""</span><span class="pun">;</span></code></li><li class="L4"><code class="language-c"><span class="pln">        </span><span class="typ">ExportFactory</span><span class="pln"> exportFactory </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ExportHtmlFactory</span><span class="pun">();</span></code></li><li class="L5"><code class="language-c"><span class="pln">        </span><span class="typ">ExportFile</span><span class="pln"> ef </span><span class="pun">=</span><span class="pln"> exportFactory</span><span class="pun">.</span><span class="pln">factory</span><span class="pun">(</span><span class="typ">Classify</span><span class="pun">.</span><span class="typ">Financial</span><span class="pun">);</span></code></li><li class="L6"><code class="language-c"><span class="pln">        ef</span><span class="pun">.</span><span class="kwd">export</span><span class="pun">(</span><span class="pln">data</span><span class="pun">);</span></code></li><li class="L7"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L8"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></div><h3><span data-wiz-span="data-wiz-span" style="color: rgb(56, 142, 142);">3. 抽象工厂模式</span></h3><div>&nbsp;抽象工厂模式与工厂方法模式的最大区别就在于，工厂方法模式针对的是一个产品等级结构；而抽象工厂模式则需要面对多个产品等级结构。</div><div><div><img border="0" src="All in_files/46544740.png"></div></div><div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ComputerEngineer</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="com">/**</span></code></li><li class="L2"><code class="language-c"><span class="com">  * 定义组装机需要的CPU</span></code></li><li class="L3"><code class="language-c"><span class="com">  */</span></code></li><li class="L4"><code class="language-c"><span class="pln">  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Cpu</span><span class="pln"> cpu </span><span class="pun">=</span><span class="pln"> null</span><span class="pun">;</span></code></li><li class="L5"><code class="language-c"><span class="pln"> </span><span class="com">/**</span></code></li><li class="L6"><code class="language-c"><span class="com">  * 定义组装机需要的主板</span></code></li><li class="L7"><code class="language-c"><span class="com">   */</span></code></li><li class="L8"><code class="language-c"><span class="pln">  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Mainboard</span><span class="pln"> mainboard </span><span class="pun">=</span><span class="pln"> null</span><span class="pun">;</span></code></li><li class="L9"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> makeComputer</span><span class="pun">(</span><span class="typ">AbstractFactory</span><span class="pln"> af</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-c"><span class="pln">   </span><span class="com">/**</span></code></li><li class="L1"><code class="language-c"><span class="com">    * 组装机器的基本步骤</span></code></li><li class="L2"><code class="language-c"><span class="com">    */</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="com">// 1:首先准备好装机所需要的配件</span></code></li><li class="L4"><code class="language-c"><span class="pln">    prepareHardwares</span><span class="pun">(</span><span class="pln">af</span><span class="pun">);</span></code></li><li class="L5"><code class="language-c"><span class="pln">   </span><span class="com">// 2:组装机器</span></code></li><li class="L6"><code class="language-c"><span class="pln">   </span><span class="com">// 3:测试机器</span></code></li><li class="L7"><code class="language-c"><span class="pln">   </span><span class="com">// 4：交付客户</span></code></li><li class="L8"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L9"><code class="language-c"><span class="pln"> </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> prepareHardwares</span><span class="pun">(</span><span class="typ">AbstractFactory</span><span class="pln"> af</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="com">// 这里要去准备CPU和主板的具体实现，为了示例简单，这里只准备这两个</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="com">// 可是，装机工程师并不知道如何去创建，怎么办呢？</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="com">// 直接找相应的工厂获取</span></code></li><li class="L3"><code class="language-c"><span class="pln">   </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">cpu </span><span class="pun">=</span><span class="pln"> af</span><span class="pun">.</span><span class="pln">createCpu</span><span class="pun">();</span></code></li><li class="L4"><code class="language-c"><span class="pln">   </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">mainboard </span><span class="pun">=</span><span class="pln"> af</span><span class="pun">.</span><span class="pln">createMainboard</span><span class="pun">();</span></code></li><li class="L5"><code class="language-c"><span class="pln">   </span><span class="com">// 测试配件是否好用</span></code></li><li class="L6"><code class="language-c"><span class="pln">   </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">cpu</span><span class="pun">.</span><span class="pln">calculate</span><span class="pun">();</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">mainboard</span><span class="pun">.</span><span class="pln">installCPU</span><span class="pun">();</span></code></li><li class="L8"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L9"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Client</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="lit">@Test</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> test</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="com">// 创建装机工程师对象</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="typ">ComputerEngineer</span><span class="pln"> cf </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ComputerEngineer</span><span class="pun">();</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="com">// 客户选择并创建需要使用的产品对象</span></code></li><li class="L6"><code class="language-c"><span class="pln">   </span><span class="typ">AbstractFactory</span><span class="pln"> af </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">IntelFactory</span><span class="pun">();</span></code></li><li class="L7"><code class="language-c"><span class="pln">   </span><span class="com">// 告诉装机工程师自己选择的产品，让装机工程师组装电脑</span></code></li><li class="L8"><code class="language-c"><span class="pln">    cf</span><span class="pun">.</span><span class="pln">makeComputer</span><span class="pun">(</span><span class="pln">af</span><span class="pun">);</span></code></li><li class="L9"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L0"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></div></div><div><h3><span data-wiz-span="data-wiz-span" style="color: rgb(56, 142, 142);">4. 单例模式</span></h3><div>&nbsp;单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。这个类称为单例类。</div></div><div><div><div>单例模式的特点：</div><div><ul style="margin-bottom: 0px;"><li><span style="font-size: 10.5pt; line-height: 1.5;">单例类只能有一个实例。</span><br></li><li><span style="font-size: 10.5pt; line-height: 1.5;">单例类必须自己创建自己的唯一实例。</span><br></li><li><span style="font-size: 10.5pt; line-height: 1.5;">单例类必须给所有其他对象提供这一实例。</span><br></li></ul></div></div><div>不合理的两种写法：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Singleton</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Singleton</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="com">//确保单例不会在系统中的其他代码内被实例化</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Singleton is create"</span><span class="pun">);</span><span class="com">//创建单例的过程可能会比较慢</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">Singleton</span><span class="pln"> instance </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Singleton</span><span class="pun">();</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">Singleton</span><span class="pln"> getInstance</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-c"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> instance</span><span class="pun">;</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L8"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><div>这种单例的实现方式非常简单，而且十分可靠。它唯一不足仅是无法对instance实例做延迟加载。加入单例的创建过程很慢，由于instance成员变量是static定义的，因此在JVM加载单例类时，单例对象就会被建立。</div><div>为了达到延迟加载，就需要引入延迟加载机制。</div></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">LazySingleton</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">LazySingleton</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"LazySingleton is create"</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">LazySingleton</span><span class="pln"> instance </span><span class="pun">=</span><span class="pln"> null</span><span class="pun">;</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> synchronized </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">LazySingleton</span><span class="pln"> getInstance</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-c"><span class="pln">        </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">null </span><span class="pun">==</span><span class="pln"> instance</span><span class="pun">)</span></code></li><li class="L7"><code class="language-c"><span class="pln">            instance </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">LazySingleton</span><span class="pun">();</span></code></li><li class="L8"><code class="language-c"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> instance</span><span class="pun">;</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L0"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div>getInstance方法使用synchronized达到了同步，保证同时只有一个线程访问该方法，虽然实现了延迟加载的功能，但和第一种方法相比，它引入了同步关键字，因此在多线程环境中，它的时耗要远远大于第一种单例模式。因为第一种在运行前类加载时就已经创建了对象。<br></div></div><div><br></div><div><b></b>两种可行单例：</div></div><div>1.常用方法<br></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Singleton</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Singleton</span><span class="pun">(){} //确保实例不会在系统中的其他代码内被实例化</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="com">/**</span></code></li><li class="L4"><code class="language-c"><span class="com">     *    类级的内部类，也就是静态的成员式内部类，该内部类的实例与外部类的实例</span></code></li><li class="L5"><code class="language-c"><span class="com">     *    没有绑定关系，而且只有被调用到时才会装载，从而实现了延迟加载。</span></code></li><li class="L6"><code class="language-c"><span class="com">     */</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SingletonHolder</span><span class="pun">{</span></code></li><li class="L8"><code class="language-c"><span class="pln">        </span><span class="com">/**</span></code></li><li class="L9"><code class="language-c"><span class="com">         * 静态初始化器，由JVM来保证线程安全</span></code></li><li class="L0"><code class="language-c"><span class="com">         */</span></code></li><li class="L1"><code class="language-c"><span class="pln">        </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">Singleton</span><span class="pln"> instance </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Singleton</span><span class="pun">();</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">Singleton</span><span class="pln"> getInstance</span><span class="pun">(){</span></code></li><li class="L5"><code class="language-c"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">SingletonHolder</span><span class="pun">.</span><span class="pln">instance</span><span class="pun">;</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L7"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><div>当getInstance方法第一次被调用的时候，它第一次读取SingletonHolder.instance，导致SingletonHolder类得到初始化；而这个类在装载并被初始化的时候，会初始化它的静态域，从而创建Singleton的实例，由于是静态的域，因此只会在虚拟机装载类的时候初始化一次，并由虚拟机来保证它的线程安全性。</div><div><span style="font-size: 10.5pt; line-height: 1.5;">这个模式的优势在于，getInstance方法并没有被同步，并且只是执行一个域的访问，因此延迟初始化并没有增加任何访问成本。但若使用反射强制实例化私有方法，那就诶办法，所以建议不要再使用反射。</span></div></div></div><div><span style="font-size: 10.5pt; line-height: 1.5;">2.单例和枚举<br></span></div><div><span style="font-size: 10.5pt; line-height: 1.5;"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">enum</span><span class="pln"> </span><span class="typ">Singleton</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="com">/**</span></code></li><li class="L2"><code class="language-c"><span class="com">     * 定义一个枚举的元素，它就代表了Singleton的一个实例。</span></code></li><li class="L3"><code class="language-c"><span class="com">     */</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span></code></li><li class="L5"><code class="language-c"><span class="pln">    uniqueInstance</span><span class="pun">;</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="com">/**</span></code></li><li class="L8"><code class="language-c"><span class="com">     * 单例可以有自己的操作</span></code></li><li class="L9"><code class="language-c"><span class="com">     */</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> singletonOperation</span><span class="pun">(){</span></code></li><li class="L1"><code class="language-c"><span class="pln">        </span><span class="com">//功能处理</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L3"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></span></div><div><h3><span data-wiz-span="data-wiz-span" style="color: rgb(56, 142, 142);">5. 建造模式</span></h3><div>建造模式可以将一个产品的内部表象（internal representation）与产品的生产过程分割开来，从而可以使一个建造过程生成具有不同的内部表象的产品对象。&nbsp;</div></div><div><div><img border="0" class="" src="All in_files/47183323.png"></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Client</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="lit">@Test</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> test</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="typ">Builder</span><span class="pln"> builder </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ConcreteBuilder</span><span class="pun">();</span></code></li><li class="L4"><code class="language-c"><span class="pln">   </span><span class="typ">Director</span><span class="pln"> director </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Director</span><span class="pun">(</span><span class="pln">builder</span><span class="pun">);</span></code></li><li class="L5"><code class="language-c"><span class="pln">   director</span><span class="pun">.</span><span class="pln">construct</span><span class="pun">();</span></code></li><li class="L6"><code class="language-c"><span class="pln">   </span><span class="typ">Product</span><span class="pln"> product </span><span class="pun">=</span><span class="pln"> builder</span><span class="pun">.</span><span class="pln">retrieveResult</span><span class="pun">();</span></code></li><li class="L7"><code class="language-c"><span class="pln">   </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">product</span><span class="pun">.</span><span class="pln">getPart1</span><span class="pun">());</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">product</span><span class="pun">.</span><span class="pln">getPart2</span><span class="pun">());</span></code></li><li class="L9"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L0"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><div><img border="0" src="All in_files/47312126.png"></div></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Director</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="typ">Builder</span><span class="pln"> builder</span><span class="pun">;</span></code></li><li class="L2"><code class="language-c"><span class="pln">  </span><span class="com">/**</span></code></li><li class="L3"><code class="language-c"><span class="com">  * 构造子</span></code></li><li class="L4"><code class="language-c"><span class="com">  */</span></code></li><li class="L5"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Director</span><span class="pun">(</span><span class="typ">Builder</span><span class="pln"> builder</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">builder </span><span class="pun">=</span><span class="pln"> builder</span><span class="pun">;</span></code></li><li class="L7"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L8"><code class="language-c"><span class="pln"> </span><span class="com">/**</span></code></li><li class="L9"><code class="language-c"><span class="com">  * 产品构造方法，负责调用各零件的建造方法</span></code></li><li class="L0"><code class="language-c"><span class="com">  */</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> construct</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> toAddress</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> fromAddress</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">builder</span><span class="pun">.</span><span class="pln">buildTo</span><span class="pun">(</span><span class="pln">toAddress</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pln">   </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">builder</span><span class="pun">.</span><span class="pln">buildFrom</span><span class="pun">(</span><span class="pln">fromAddress</span><span class="pun">);</span></code></li><li class="L4"><code class="language-c"><span class="pln">   </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">builder</span><span class="pun">.</span><span class="pln">buildSubject</span><span class="pun">();</span></code></li><li class="L5"><code class="language-c"><span class="pln">   </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">builder</span><span class="pun">.</span><span class="pln">buildBody</span><span class="pun">();</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">builder</span><span class="pun">.</span><span class="pln">buildSendDate</span><span class="pun">();</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">builder</span><span class="pun">.</span><span class="pln">sendMessage</span><span class="pun">();</span></code></li><li class="L8"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L9"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Client</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="lit">@Test</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> test</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="typ">Builder</span><span class="pln"> builder </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">WelcomeBuilder</span><span class="pun">();</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="typ">Director</span><span class="pln"> director </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Director</span><span class="pun">(</span><span class="pln">builder</span><span class="pun">);</span></code></li><li class="L5"><code class="language-c"><span class="pln">   director</span><span class="pun">.</span><span class="pln">construct</span><span class="pun">(</span><span class="str">"toAddress@126.com"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"fromAddress@126.com"</span><span class="pun">);</span></code></li><li class="L6"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L7"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div>另一种使用场景：</div></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Client</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="lit">@Test</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> test</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">     </span><span class="com">//创建构建器对象</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="typ">InsuranceContract</span><span class="pun">.</span><span class="typ">ConcreteBuilder</span><span class="pln"> builder </span><span class="pun">=</span></code></li><li class="L5"><code class="language-c"><span class="pln">             </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">InsuranceContract</span><span class="pun">.</span><span class="typ">ConcreteBuilder</span><span class="pun">(</span><span class="str">"9527"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">123L</span><span class="pun">,</span><span class="pln"> </span><span class="lit">456L</span><span class="pun">);</span></code></li><li class="L6"><code class="language-c"><span class="pln">         </span><span class="com">//设置需要的数据，然后构建保险合同对象</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="typ">InsuranceContract</span><span class="pln"> contract </span><span class="pun">=</span><span class="pln"> </span></code></li><li class="L8"><code class="language-c"><span class="pln">              builder</span><span class="pun">.</span><span class="pln">setPersonName</span><span class="pun">(</span><span class="str">"小明"</span><span class="pun">).</span><span class="pln">setOtherData</span><span class="pun">(</span><span class="str">"test"</span><span class="pun">).</span><span class="pln">build</span><span class="pun">();</span></code></li><li class="L9"><code class="language-c"><span class="pln">         </span><span class="com">//操作保险合同对象的方法</span></code></li><li class="L0"><code class="language-c"><span class="pln">   contract</span><span class="pun">.</span><span class="pln">someOperation</span><span class="pun">();</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L2"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></div><div><h3><span data-wiz-span="data-wiz-span" style="color: rgb(56, 142, 142);">6. 原型模式</span></h3><div>通过给出一个原型对象来指明所有创建的对象的类型，然后用复制这个原型对象的办法创建出更多同类型的对象。这就是选型模式的用意。</div></div><div>原型模式要求对象实现一个可以“克隆”自身的接口，这样就可以通过复制一个实例对象本身来创建一个新的实例。<br></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> interface </span><span class="typ">Prototype</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Prototype</span><span class="pln"> clone</span><span class="pun">();</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getName</span><span class="pun">();</span></code></li><li class="L3"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setName</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> name</span><span class="pun">);</span></code></li><li class="L4"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><div><img border="0" src="All in_files/47739652.png"></div></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">PrototypeManager</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="com">/**</span></code></li><li class="L2"><code class="language-c"><span class="com">  * 用来记录原型的编号和原型实例的对应关系</span></code></li><li class="L3"><code class="language-c"><span class="com">  */</span></code></li><li class="L4"><code class="language-c"><span class="pln">  </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Prototype</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">map</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashMap</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Prototype</span><span class="pun">&gt;();</span></code></li><li class="L5"><code class="language-c"><span class="pln"> </span><span class="com">/**</span></code></li><li class="L6"><code class="language-c"><span class="com">  * 私有化构造方法，避免外部创建实例</span></code></li><li class="L7"><code class="language-c"><span class="com">   */</span></code></li><li class="L8"><code class="language-c"><span class="pln">  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">PrototypeManager</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L0"><code class="language-c"><span class="pln"> </span><span class="com">/**</span></code></li><li class="L1"><code class="language-c"><span class="com">  * 向原型管理器里面添加或是修改某个原型注册</span></code></li><li class="L2"><code class="language-c"><span class="com">   * </span></code></li><li class="L3"><code class="language-c"><span class="com">   * @param prototypeId</span></code></li><li class="L4"><code class="language-c"><span class="com">   *            原型编号</span></code></li><li class="L5"><code class="language-c"><span class="com">  * @param prototype</span></code></li><li class="L6"><code class="language-c"><span class="com">   *            原型实例</span></code></li><li class="L7"><code class="language-c"><span class="com">  */</span></code></li><li class="L8"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> synchronized </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setPrototype</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> prototypeId</span><span class="pun">,</span></code></li><li class="L9"><code class="language-c"><span class="pln">     </span><span class="typ">Prototype</span><span class="pln"> prototype</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="typ">map</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="pln">prototypeId</span><span class="pun">,</span><span class="pln"> prototype</span><span class="pun">);</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="com">/**</span></code></li><li class="L3"><code class="language-c"><span class="com">  * 从原型管理器里面删除某个原型注册</span></code></li><li class="L4"><code class="language-c"><span class="com">   * </span></code></li><li class="L5"><code class="language-c"><span class="com">   * @param prototypeId</span></code></li><li class="L6"><code class="language-c"><span class="com">   *            原型编号</span></code></li><li class="L7"><code class="language-c"><span class="com">  */</span></code></li><li class="L8"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> synchronized </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> removePrototype</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> prototypeId</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="typ">map</span><span class="pun">.</span><span class="pln">remove</span><span class="pun">(</span><span class="pln">prototypeId</span><span class="pun">);</span></code></li><li class="L0"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="com">/**</span></code></li><li class="L2"><code class="language-c"><span class="com">  * 获取某个原型编号对应的原型实例</span></code></li><li class="L3"><code class="language-c"><span class="com">  * </span></code></li><li class="L4"><code class="language-c"><span class="com">   * @param prototypeId</span></code></li><li class="L5"><code class="language-c"><span class="com">   *            原型编号</span></code></li><li class="L6"><code class="language-c"><span class="com">  * @return 原型编号对应的原型实例</span></code></li><li class="L7"><code class="language-c"><span class="com">  * @throws Exception</span></code></li><li class="L8"><code class="language-c"><span class="com">  *             如果原型编号对应的实例不存在，则抛出异常</span></code></li><li class="L9"><code class="language-c"><span class="com">   */</span></code></li><li class="L0"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> synchronized </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">Prototype</span><span class="pln"> getPrototype</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> prototypeId</span><span class="pun">)</span></code></li><li class="L1"><code class="language-c"><span class="pln">      throws </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="typ">Prototype</span><span class="pln"> prototype </span><span class="pun">=</span><span class="pln"> </span><span class="typ">map</span><span class="pun">.</span><span class="pln">get</span><span class="pun">(</span><span class="pln">prototypeId</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">prototype </span><span class="pun">==</span><span class="pln"> null</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-c"><span class="pln">      </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Exception</span><span class="pun">(</span><span class="str">"您希望获取的原型还没有注册或已被销毁"</span><span class="pun">);</span></code></li><li class="L5"><code class="language-c"><span class="pln">   </span><span class="pun">}</span></code></li><li class="L6"><code class="language-c"><span class="pln">   </span><span class="kwd">return</span><span class="pln"> prototype</span><span class="pun">;</span></code></li><li class="L7"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L8"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Client</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="lit">@Test</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> test</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-c"><span class="pln">     </span><span class="typ">Prototype</span><span class="pln"> p1 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ConcretePrototype1</span><span class="pun">();</span></code></li><li class="L5"><code class="language-c"><span class="pln">     </span><span class="typ">PrototypeManager</span><span class="pun">.</span><span class="pln">setPrototype</span><span class="pun">(</span><span class="str">"p1"</span><span class="pun">,</span><span class="pln"> p1</span><span class="pun">);</span></code></li><li class="L6"><code class="language-c"><span class="pln">     </span><span class="com">// 获取原型来创建对象</span></code></li><li class="L7"><code class="language-c"><span class="pln">      </span><span class="typ">Prototype</span><span class="pln"> p3 </span><span class="pun">=</span><span class="pln"> </span><span class="typ">PrototypeManager</span><span class="pun">.</span><span class="pln">getPrototype</span><span class="pun">(</span><span class="str">"p1"</span><span class="pun">).</span><span class="pln">clone</span><span class="pun">();</span></code></li><li class="L8"><code class="language-c"><span class="pln">      p3</span><span class="pun">.</span><span class="pln">setName</span><span class="pun">(</span><span class="str">"张三"</span><span class="pun">);</span></code></li><li class="L9"><code class="language-c"><span class="pln">     </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"第一个实例："</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> p3</span><span class="pun">);</span></code></li><li class="L0"><code class="language-c"><span class="pln">      </span><span class="com">// 有人动态的切换了实现</span></code></li><li class="L1"><code class="language-c"><span class="pln">     </span><span class="typ">Prototype</span><span class="pln"> p2 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ConcretePrototype2</span><span class="pun">();</span></code></li><li class="L2"><code class="language-c"><span class="pln">     </span><span class="typ">PrototypeManager</span><span class="pun">.</span><span class="pln">setPrototype</span><span class="pun">(</span><span class="str">"p1"</span><span class="pun">,</span><span class="pln"> p2</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pln">     </span><span class="com">// 重新获取原型来创建对象</span></code></li><li class="L4"><code class="language-c"><span class="pln">      </span><span class="typ">Prototype</span><span class="pln"> p4 </span><span class="pun">=</span><span class="pln"> </span><span class="typ">PrototypeManager</span><span class="pun">.</span><span class="pln">getPrototype</span><span class="pun">(</span><span class="str">"p1"</span><span class="pun">).</span><span class="pln">clone</span><span class="pun">();</span></code></li><li class="L5"><code class="language-c"><span class="pln">      p4</span><span class="pun">.</span><span class="pln">setName</span><span class="pun">(</span><span class="str">"李四"</span><span class="pun">);</span></code></li><li class="L6"><code class="language-c"><span class="pln">     </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"第二个实例："</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> p4</span><span class="pun">);</span></code></li><li class="L7"><code class="language-c"><span class="pln">      </span><span class="com">// 有人注销了这个原型</span></code></li><li class="L8"><code class="language-c"><span class="pln">      </span><span class="typ">PrototypeManager</span><span class="pun">.</span><span class="pln">removePrototype</span><span class="pun">(</span><span class="str">"p1"</span><span class="pun">);</span></code></li><li class="L9"><code class="language-c"><span class="pln">      </span><span class="com">// 再次获取原型来创建对象</span></code></li><li class="L0"><code class="language-c"><span class="pln">      </span><span class="typ">Prototype</span><span class="pln"> p5 </span><span class="pun">=</span><span class="pln"> </span><span class="typ">PrototypeManager</span><span class="pun">.</span><span class="pln">getPrototype</span><span class="pun">(</span><span class="str">"p1"</span><span class="pun">).</span><span class="pln">clone</span><span class="pun">();</span></code></li><li class="L1"><code class="language-c"><span class="pln">      p5</span><span class="pun">.</span><span class="pln">setName</span><span class="pun">(</span><span class="str">"王五"</span><span class="pun">);</span></code></li><li class="L2"><code class="language-c"><span class="pln">     </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"第三个实例："</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> p5</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Exception</span><span class="pln"> e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-c"><span class="pln">      e</span><span class="pun">.</span><span class="pln">printStackTrace</span><span class="pun">();</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L6"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L7"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></div></div><div><h3><span data-wiz-span="data-wiz-span" style="color: rgb(56, 142, 142);">7. 适配器模式</span></h3><div>适配器模式把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。</div><div>&nbsp;<div><img border="0" src="All in_files/51052196.png"></div></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Client</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="lit">@Test</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> test</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="typ">Target</span><span class="pln"> target </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Adapter</span><span class="pun">();</span></code></li><li class="L4"><code class="language-c"><span class="pln">   target</span><span class="pun">.</span><span class="pln">sampleOperation1</span><span class="pun">();</span></code></li><li class="L5"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L6"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><div><font color="#ff0000">在任何时候，如果不准备实现一个接口的所有方法时，就可以使用“缺省适配模式”制造一个抽象类，给出所有方法的平庸的具体实现。这样，从这个抽象类再继承下去的子类就不必实现所有的方法了。</font><br></div></div></div><div><h3><span data-wiz-span="data-wiz-span" style="color: rgb(56, 142, 142);">8. 合成模式</span></h3><div></div></div><div><div>合成模式把部分和整体的关系用树结构表示出来。合成模式使得客户端把一个个单独的成分对象和由它们复合而成的合成对象同等看待。</div><div>一个文件系统是一个树结构，树上长有节点。树的节点有两种，一种是树枝节点，即目录，有内部树结构，在图中涂有颜色；另一种是文件，即树叶节点，没有内部树结构。</div><div><div><img border="0" src="All in_files/51521980.png"></div></div><div>上面树枝和枝干节点都有自己的信息printStruct()，对于树干，可以添加树枝或树干addChild。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Client</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="lit">@Test</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> test</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="typ">Composite</span><span class="pln"> root </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Composite</span><span class="pun">(</span><span class="str">"服装"</span><span class="pun">);</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="typ">Composite</span><span class="pln"> c1 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Composite</span><span class="pun">(</span><span class="str">"男装"</span><span class="pun">);</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="typ">Composite</span><span class="pln"> c2 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Composite</span><span class="pun">(</span><span class="str">"女装"</span><span class="pun">);</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="typ">Leaf</span><span class="pln"> leaf1 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Leaf</span><span class="pun">(</span><span class="str">"衬衫"</span><span class="pun">);</span></code></li><li class="L7"><code class="language-c"><span class="pln">   </span><span class="typ">Leaf</span><span class="pln"> leaf2 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Leaf</span><span class="pun">(</span><span class="str">"夹克"</span><span class="pun">);</span></code></li><li class="L8"><code class="language-c"><span class="pln">   </span><span class="typ">Leaf</span><span class="pln"> leaf3 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Leaf</span><span class="pun">(</span><span class="str">"裙子"</span><span class="pun">);</span></code></li><li class="L9"><code class="language-c"><span class="pln">   </span><span class="typ">Leaf</span><span class="pln"> leaf4 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Leaf</span><span class="pun">(</span><span class="str">"套装"</span><span class="pun">);</span></code></li><li class="L0"><code class="language-c"><span class="pln">   root</span><span class="pun">.</span><span class="pln">addChild</span><span class="pun">(</span><span class="pln">c1</span><span class="pun">);</span></code></li><li class="L1"><code class="language-c"><span class="pln">    root</span><span class="pun">.</span><span class="pln">addChild</span><span class="pun">(</span><span class="pln">c2</span><span class="pun">);</span></code></li><li class="L2"><code class="language-c"><span class="pln">    c1</span><span class="pun">.</span><span class="pln">addChild</span><span class="pun">(</span><span class="pln">leaf1</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pln">   c1</span><span class="pun">.</span><span class="pln">addChild</span><span class="pun">(</span><span class="pln">leaf2</span><span class="pun">);</span></code></li><li class="L4"><code class="language-c"><span class="pln">   c2</span><span class="pun">.</span><span class="pln">addChild</span><span class="pun">(</span><span class="pln">leaf3</span><span class="pun">);</span></code></li><li class="L5"><code class="language-c"><span class="pln">   c2</span><span class="pun">.</span><span class="pln">addChild</span><span class="pun">(</span><span class="pln">leaf4</span><span class="pun">);</span></code></li><li class="L6"><code class="language-c"><span class="pln">   root</span><span class="pun">.</span><span class="pln">printStruct</span><span class="pun">(</span><span class="str">""</span><span class="pun">);</span></code></li><li class="L7"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L8"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></div><h3><span data-wiz-span="data-wiz-span" style="color: rgb(56, 142, 142);">9. 装饰模式</span></h3><div>装饰模式以对客户透明的方式动态地给一个对象附加上更多的责任。装饰者模式的一个典型案例就是对输出结果进行中增强。比如，现在需要将某一结果通过HTML进行发布，那么首先就需要将内容转化为一个HTML文本。同时，由于内容需要在网络上通过HTTP流传，故，还需要为其增加HTTP头。<br></div></div><div><div><img border="0" src="All in_files/51955663.png"></div></div><div><div><img border="0" src="All in_files/52085189.png"></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Monkey</span><span class="pln"> implements </span><span class="typ">TheGreatestSage</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> move</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="com">// 代码</span></code></li><li class="L3"><code class="language-c"><span class="pln">   </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Monkey Move"</span><span class="pun">);</span></code></li><li class="L4"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L5"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Change</span><span class="pln"> implements </span><span class="typ">TheGreatestSage</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">TheGreatestSage</span><span class="pln"> sage</span><span class="pun">;</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Change</span><span class="pun">(</span><span class="typ">TheGreatestSage</span><span class="pln"> sage</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">   </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">sage </span><span class="pun">=</span><span class="pln"> sage</span><span class="pun">;</span></code></li><li class="L4"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L5"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> move</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="com">// 代码</span></code></li><li class="L7"><code class="language-c"><span class="pln">   sage</span><span class="pun">.</span><span class="pln">move</span><span class="pun">();</span></code></li><li class="L8"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L9"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Bird</span><span class="pln"> extends </span><span class="typ">Change</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Bird</span><span class="pun">(</span><span class="typ">TheGreatestSage</span><span class="pln"> sage</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-c"><span class="pln">   super</span><span class="pun">(</span><span class="pln">sage</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L4"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> move</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="com">// 代码</span></code></li><li class="L6"><code class="language-c"><span class="pln">   </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Bird Move"</span><span class="pun">);</span></code></li><li class="L7"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L8"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Fish</span><span class="pln"> extends </span><span class="typ">Change</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Fish</span><span class="pun">(</span><span class="typ">TheGreatestSage</span><span class="pln"> sage</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-c"><span class="pln">   super</span><span class="pun">(</span><span class="pln">sage</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L4"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> move</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="com">// 代码</span></code></li><li class="L6"><code class="language-c"><span class="pln">   </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Fish Move"</span><span class="pun">);</span></code></li><li class="L7"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L8"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Client</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="lit">@Test</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> test</span><span class="pun">(){</span></code></li><li class="L3"><code class="language-c"><span class="pln">   </span><span class="typ">TheGreatestSage</span><span class="pln"> sage </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Monkey</span><span class="pun">();</span></code></li><li class="L4"><code class="language-c"><span class="pln">        </span><span class="com">// 第一种写法</span></code></li><li class="L5"><code class="language-c"><span class="pln">        </span><span class="typ">TheGreatestSage</span><span class="pln"> bird </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Bird</span><span class="pun">(</span><span class="pln">sage</span><span class="pun">);</span></code></li><li class="L6"><code class="language-c"><span class="pln">        </span><span class="typ">TheGreatestSage</span><span class="pln"> fish </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Fish</span><span class="pun">(</span><span class="pln">bird</span><span class="pun">);</span></code></li><li class="L7"><code class="language-c"><span class="pln">        </span><span class="com">// 第二种写法</span></code></li><li class="L8"><code class="language-c"><span class="pln">        </span><span class="com">//TheGreatestSage fish = new Fish(new Bird(sage));</span></code></li><li class="L9"><code class="language-c"><span class="pln">        fish</span><span class="pun">.</span><span class="pln">move</span><span class="pun">();</span></code></li><li class="L0"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L1"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></div></div></div></div></div><div><h3><span data-wiz-span="data-wiz-span" style="color: rgb(56, 142, 142);">10. 代理模式</span></h3><div>&nbsp;代理模式是使用代理对象完成用户请求，屏蔽用户对真实对象的访问。</div><div>使用代理模式的意图很多，比如因为安全原因，需要屏蔽客户端直接访问真实对象；或者在远程调用中，需要使用代理类处理远程方法调用的技术细节（如RMI、Dubbo）。Spring AOP用的很多。</div></div><div><div><img border="0" src="All in_files/52354355.png"></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="com">/**</span></code></li><li class="L1"><code class="language-c"><span class="com"> * 目标对象角色</span></code></li><li class="L2"><code class="language-c"><span class="com"> * @author Lynzabo</span></code></li><li class="L3"><code class="language-c"><span class="com"> *</span></code></li><li class="L4"><code class="language-c"><span class="com"> */</span></code></li><li class="L5"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">DBQuery</span><span class="pln"> extends </span><span class="typ">IDBQuery</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> operation</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-c"><span class="pln">        </span><span class="com">//一些操作</span></code></li><li class="L8"><code class="language-c"><span class="pln">        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"一些操作"</span><span class="pun">);</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L0"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="com">/**</span></code></li><li class="L1"><code class="language-c"><span class="com"> * 代理对象角色</span></code></li><li class="L2"><code class="language-c"><span class="com"> * </span></code></li><li class="L3"><code class="language-c"><span class="com"> * @author Lynzabo</span></code></li><li class="L4"><code class="language-c"><span class="com"> *</span></code></li><li class="L5"><code class="language-c"><span class="com"> */</span></code></li><li class="L6"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">DBQueryProxy</span><span class="pln"> extends </span><span class="typ">IDBQuery</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-c"><span class="pln"> </span><span class="typ">DBQuery</span><span class="pln"> realObject </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">DBQuery</span><span class="pun">();</span></code></li><li class="L8"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> operation</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-c"><span class="pln">   </span><span class="com">// 调用目标对象之前可以做相关操作</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"before"</span><span class="pun">);</span></code></li><li class="L1"><code class="language-c"><span class="pln">    realObject</span><span class="pun">.</span><span class="pln">operation</span><span class="pun">();</span></code></li><li class="L2"><code class="language-c"><span class="pln">   </span><span class="com">// 调用目标对象之后可以做相关操作</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"after"</span><span class="pun">);</span></code></li><li class="L4"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L5"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Client</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="lit">@Test</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> test</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="typ">IDBQuery</span><span class="pln"> obj </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">DBQueryProxy</span><span class="pun">();</span></code></li><li class="L4"><code class="language-c"><span class="pln">   obj</span><span class="pun">.</span><span class="pln">operation</span><span class="pun">();</span></code></li><li class="L5"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L6"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div>Java动态代理</div></div></div></div><div>动态代理是指在运行时，动态生成代理类。即，<font color="#ff0000">代理类的字节码将在运行时生成并载入当前的ClassLoader。</font><br></div><div>生成动态代理类的方法很多，如，JDK自带的动态代理、CGLIB、Javassist或者ASM库。</div><div><ul><li>JDK的动态代理使用简单，它内置在JDK中，因此不需要引入第三方Jar包，但相对功能比较弱，<span style="font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.92px; background-color: rgb(255, 255, 153);">只能对实现了接口的类生成代理，而不能针对类 </span>。</li><li>CGLIB和Javassist（提供代理工厂和使用动态代码创建，代理工厂和CGLIB差不多，使用动态代码是可以在代理类代码中写类的java代码，比如指定给类写一个方法然后让生效）都是高级的字节码生成库，总体性能比JDK自带的动态代理好，而且功能十分强大，<span style="margin: 0px; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.92px; background-color: rgb(255, 255, 153);">是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法 。</span><span style="margin: 0px; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.92px; background-color: rgb(255, 255, 153);">因为是继承，所以该类或方法最好不要声明成final ，final可以阻止继承和多态</span>。</li><li>ASM是低级的字节码生成工具，使用ASM已经近乎于在使用Java bytecode编程，对开发人员要求最高。当前，也是性能最好的一种动态代理生成工具。CGLIB以ASM为基础，&nbsp;对ASM的功能进行了扩展和封装，提供了更友好的API。</li></ul><br>但ASM的使用实在过于繁琐，而且性能也没有数量级的提升，与CGLIB等高级字节码生成工具相比，ASM程序的可维护性也较差，如果不是在对性能有苛刻要求的场合，笔者还是推荐CGLIB或者Javassist。就不要看Javassist了。<br></div><div>JDK：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="typ">Object</span><span class="pln"> newProxy</span><span class="pun">(</span><span class="typ">Object</span><span class="pln"> targetObject</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="com">// 将目标对象传入进行代理 </span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">targetObject </span><span class="pun">=</span><span class="pln"> targetObject</span><span class="pun">;</span><span class="pln">  </span><span class="str">&lt;br&gt;</span><span class="pln">    </span><span class="com">//注意这个方法的参数，后面是类实现的接口</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Proxy</span><span class="pun">.</span><span class="pln">newProxyInstance</span><span class="pun">(</span><span class="pln">targetObject</span><span class="pun">.</span><span class="pln">getClass</span><span class="pun">().</span><span class="pln">getClassLoader</span><span class="pun">(),</span><span class="pln"> </span></code></li><li class="L3"><code class="language-c"><span class="pln">            targetObject</span><span class="pun">.</span><span class="pln">getClass</span><span class="pun">().</span><span class="pln">getInterfaces</span><span class="pun">(),</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">);</span><span class="com">// 返回代理对象 </span></code></li><li class="L4"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><span style="font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.92px;">在生成代理类时，</span><strong style="margin: 0px; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.92px;"><span style="margin: 0px; padding: 0px; font-size: 16px; background-color: rgb(255, 255, 153);">传递的是实现类所实现的接口 targetObject.getClass().getInterfaces()，所以JDK只能对于接口进行做代理</span></strong><span style="font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.92px;">。</span><br></div><div>CGLIB：</div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="typ">Object</span><span class="pln"> createProxyObject</span><span class="pun">(</span><span class="typ">Object</span><span class="pln"> obj</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">targetObject </span><span class="pun">=</span><span class="pln"> obj</span><span class="pun">;</span><span class="pln"> </span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="typ">Enhancer</span><span class="pln"> enhancer </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Enhancer</span><span class="pun">();</span><span class="pln"> </span></code></li><li class="L3"><code class="language-c"><span class="pln">    enhancer</span><span class="pun">.</span><span class="pln">setSuperclass</span><span class="pun">(</span><span class="pln">obj</span><span class="pun">.</span><span class="pln">getClass</span><span class="pun">());</span><span class="pln"> </span></code></li><li class="L4"><code class="language-c"><span class="pln">    enhancer</span><span class="pun">.</span><span class="pln">setCallback</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">);</span><span class="pln"> </span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="typ">Object</span><span class="pln"> proxyObj </span><span class="pun">=</span><span class="pln"> enhancer</span><span class="pun">.</span><span class="pln">create</span><span class="pun">();</span><span class="pln"> </span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> proxyObj</span><span class="pun">;</span><span class="com">// 返回代理对象，返回的对象其实就是一个封装了“实现类”的代理类，是实现类的实例。 </span></code></li><li class="L7"><code class="language-c"><span class="pun">}</span><span class="pln"> </span></code></li></ol></pre></div><div><div>AOP（Aspect-OrientedProgramming，面向切面编程），AOP包括切面（aspect）、通知（advice）、连接点（joinpoint），实现方式就是通过对目标对象的代理在连接点前后加入通知，完成统一的切面操作。</div><div>实现AOP的技术，主要分为两大类：</div><div>一是采用动态代理技术，利用截取消息的方式，对该消息进行装饰，以取代原有对象行为的执行；</div><div>二是采用静态织入的方式，引入特定的语法创建“方面”，从而使得编译器可以在编译期间织入有关“方面”的代码。</div><div><font color="#00b0f0">Spring提供了两种方式来生成代理对象: JDKProxy和Cglib，具体使用哪种方式生成由AopProxyFactory根据AdvisedSupport对象的配置来决定。</font></div><div><font color="#00b0f0">默认的策略是如果目标类是接口，则使用JDK动态代理技术，如果目标对象没有实现接口，则默认会采用CGLIB代理。</font></div><div><font color="#00b0f0">如果目标对象实现了接口，可以强制使用CGLIB实现代理（添加CGLIB库，并在spring配置中加入&lt;aop:aspectj-autoproxy proxy-target-class="true"/&gt;）。</font></div></div></div><div><br></div><div>在mybatis中，使用了很多动态代理，非常的普遍，使用最多的是jdk proxy，然后就是懒加载用到的cglib（默认）和javassist。Hibernete也类似。</div><div><div>&nbsp; &nbsp;&nbsp;启动懒加载，mybatis初始化返回类型的时候，会返回一个cglib代理对象，cglib对象会过滤get，set ,is,"equals", "clone", "hashCode", "toString"触发方法，当调用这些方法时候，才去查询数据库。</div><div>不启动懒加载，不会返回代理对象，返回原生对象，然后会在一开始的时候就加载关联对象和sql中指定的所有属性。</div><div>首先，懒加载会用到这两个配置<br></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">查询时，关闭关联对象即时加载以提高性能</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pun">&lt;</span><span class="pln">setting name</span><span class="pun">=</span><span class="str">"lazyLoadingEnabled"</span><span class="pln"> value</span><span class="pun">=</span><span class="str">"true"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">设置关联对象加载的形态，此处为按需加载字段(加载字段由</span><span class="pln">SQL</span><span class="pun">指</span><span class="pln"> </span><span class="pun">定)，不会加载关联表的所有字段，以提高性能</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pun">&lt;</span><span class="pln">setting name</span><span class="pun">=</span><span class="str">"aggressiveLazyLoading"</span><span class="pln"> value</span><span class="pun">=</span><span class="str">"false"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li></ol></pre></div><div>这两个配置，第一个毫无疑问，就是启动懒加载的；第二个呢，是mybatis执行完sql语句，组装返回的对象的时候，按sql指定的字段来加载，详细点说，就是如果没有调用指定的字段或者对象的get，set ,is,"equals", "clone", "hashCode", "toString"方法，该属性或者关联对象就不会在返回的对象结果中。下面是Hibernetes的，mybatis类似。</div></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="com">//从数据库载入ID为1的用户</span></code></li><li class="L1"><code class="language-c"><span class="typ">User</span><span class="pln"> u </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">User</span><span class="pun">)</span><span class="typ">HiberneteSessionFactory</span><span class="pun">.</span><span class="pln">getSession</span><span class="pun">().</span><span class="pln">load</span><span class="pun">(</span><span class="typ">User</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">,</span><span class="lit">1</span><span class="pun">);</span></code></li><li class="L2"><code class="language-c"><span class="com">//打印类名称</span></code></li><li class="L3"><code class="language-c"><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Class Name:"</span><span class="pun">+</span><span class="pln">u</span><span class="pun">.</span><span class="pln">getClass</span><span class="pun">().</span><span class="pln">getName</span><span class="pun">());</span><span class="pln"> </span><span class="com">// Class Name:$javatuning.ch2.proxy.hibernate.User$$EnhancerByCGLIB$$96d498be</span></code></li><li class="L4"><code class="language-c"><span class="com">//打印父类名称</span></code></li><li class="L5"><code class="language-c"><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Super Class Name:"</span><span class="pun">+</span><span class="pln">u</span><span class="pun">.</span><span class="pln">getClass</span><span class="pun">().</span><span class="pln">getSuperclass</span><span class="pun">().</span><span class="pln">getName</span><span class="pun">());</span><span class="com">//Super Class Name:javatuning.ch2.proxy.hibernate.User</span></code></li><li class="L6"><code class="language-c"><span class="com">//实现的所有接口</span></code></li><li class="L7"><code class="language-c"><span class="typ">Class</span><span class="pun">[]</span><span class="pln"> ins </span><span class="pun">=</span><span class="pln"> u</span><span class="pun">.</span><span class="pln">getClass</span><span class="pun">().</span><span class="pln">getInterfaces</span><span class="pun">();</span></code></li><li class="L8"><code class="language-c"><span class="kwd">for</span><span class="pun">(</span><span class="typ">Class</span><span class="pln"> cls</span><span class="pun">:</span><span class="pln">ins</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-c"><span class="pln">  </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"interface:"</span><span class="pun">+</span><span class="pln">cls</span><span class="pun">.</span><span class="pln">getName</span><span class="pun">());</span><span class="com">//org.hibernetes.proxy.HibernateProxy</span></code></li><li class="L0"><code class="language-c"><span class="pun">}</span></code></li><li class="L1"><code class="language-c"><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">u</span><span class="pun">.</span><span class="pln">getName</span><span class="pun">());</span><span class="com">//Hibernete:select user0_.id as id0_0_,user0_.name as name0_0_,user0_.age as age0_0_ from test.user user0_ where user0_.id=?</span></code></li></ol></pre></div><div>由这段输出来看，在getName()被调用之前，Hibernetes从未输出过一条SQL语句。这表示，User对象呗加载时，根本没有访问数据库，而在getName()方法被调用时，才真正完成了数据库操作。</div></div><div><br></div><div>TODO &nbsp;看JVM时候，详细看.java文件到jvm的过程，在运行期间产生字节码。利用字节码增强，动态生成.class文件。</div><div><br></div><div><h3><span data-wiz-span="data-wiz-span" style="color: rgb(56, 142, 142);">11. 享元模式</span></h3><div>&nbsp;享元模式是对象的结构模式。享元模式以共享的方式高效地支持大量的细粒度对象。</div></div><div><div><img border="0" src="All in_files/52682656.png"></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">FlyweightFactory</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">Character</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Flyweight</span><span class="pun">&gt;</span><span class="pln"> files </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashMap</span><span class="pun">&lt;</span><span class="typ">Character</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Flyweight</span><span class="pun">&gt;();</span></code></li><li class="L2"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Flyweight</span><span class="pln"> factory</span><span class="pun">(</span><span class="typ">Character</span><span class="pln"> state</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="com">// 先从缓存中查找对象</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="typ">Flyweight</span><span class="pln"> fly </span><span class="pun">=</span><span class="pln"> files</span><span class="pun">.</span><span class="pln">get</span><span class="pun">(</span><span class="pln">state</span><span class="pun">);</span></code></li><li class="L5"><code class="language-c"><span class="pln">   </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">fly </span><span class="pun">==</span><span class="pln"> null</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-c"><span class="pln">      </span><span class="com">// 如果对象不存在则创建一个新的Flyweight对象</span></code></li><li class="L7"><code class="language-c"><span class="pln">      fly </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ConcreteFlyweight</span><span class="pun">(</span><span class="pln">state</span><span class="pun">);</span></code></li><li class="L8"><code class="language-c"><span class="pln">      </span><span class="com">// 把这个新的Flyweight对象添加到缓存中</span></code></li><li class="L9"><code class="language-c"><span class="pln">     files</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="pln">state</span><span class="pun">,</span><span class="pln"> fly</span><span class="pun">);</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L1"><code class="language-c"><span class="pln">   </span><span class="kwd">return</span><span class="pln"> fly</span><span class="pun">;</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L3"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Client</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="lit">@Test</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> test</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="typ">FlyweightFactory</span><span class="pln"> factory </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">FlyweightFactory</span><span class="pun">();</span></code></li><li class="L4"><code class="language-c"><span class="pln">   </span><span class="typ">Flyweight</span><span class="pln"> fly </span><span class="pun">=</span><span class="pln"> factory</span><span class="pun">.</span><span class="pln">factory</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Character</span><span class="pun">(</span><span class="str">'a'</span><span class="pun">));</span></code></li><li class="L5"><code class="language-c"><span class="pln">    fly</span><span class="pun">.</span><span class="pln">operation</span><span class="pun">(</span><span class="str">"First Call"</span><span class="pun">);</span></code></li><li class="L6"><code class="language-c"><span class="pln">    fly </span><span class="pun">=</span><span class="pln"> factory</span><span class="pun">.</span><span class="pln">factory</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Character</span><span class="pun">(</span><span class="str">'b'</span><span class="pun">));</span></code></li><li class="L7"><code class="language-c"><span class="pln">    fly</span><span class="pun">.</span><span class="pln">operation</span><span class="pun">(</span><span class="str">"Second Call"</span><span class="pun">);</span></code></li><li class="L8"><code class="language-c"><span class="pln">   fly </span><span class="pun">=</span><span class="pln"> factory</span><span class="pun">.</span><span class="pln">factory</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Character</span><span class="pun">(</span><span class="str">'a'</span><span class="pun">));</span></code></li><li class="L9"><code class="language-c"><span class="pln">    fly</span><span class="pun">.</span><span class="pln">operation</span><span class="pun">(</span><span class="str">"Third Call"</span><span class="pun">);</span></code></li><li class="L0"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L1"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></div></div><div><h3><span data-wiz-span="data-wiz-span" style="color: rgb(56, 142, 142);">12. 策略模式</span></h3><div>&nbsp;策略模式属于对象的行为模式。其用意是针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。</div></div><div><div><img border="0" src="All in_files/53469889.png"></div></div><div><br></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">PrimaryMemberStrategy</span><span class="pln"> implements </span><span class="typ">MemberStrategy</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> calcPrice</span><span class="pun">(</span><span class="kwd">double</span><span class="pln"> booksPrice</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-c"><span class="pln">   </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"对于初级会员的没有折扣"</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pln">   </span><span class="kwd">return</span><span class="pln"> booksPrice</span><span class="pun">;</span></code></li><li class="L4"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L5"><code class="language-c"><span class="pun">}</span></code></li><li class="L6"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">IntermediateMemberStrategy</span><span class="pln"> implements </span><span class="typ">MemberStrategy</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> calcPrice</span><span class="pun">(</span><span class="kwd">double</span><span class="pln"> booksPrice</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-c"><span class="pln">   </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"对于中级会员的折扣为10%"</span><span class="pun">);</span></code></li><li class="L9"><code class="language-c"><span class="pln">   </span><span class="kwd">return</span><span class="pln"> booksPrice </span><span class="pun">*</span><span class="pln"> </span><span class="lit">0.9</span><span class="pun">;</span></code></li><li class="L0"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L1"><code class="language-c"><span class="pun">}</span></code></li><li class="L2"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AdvancedMemberStrategy</span><span class="pln"> implements </span><span class="typ">MemberStrategy</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> calcPrice</span><span class="pun">(</span><span class="kwd">double</span><span class="pln"> booksPrice</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-c"><span class="pln">   </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"对于高级会员的折扣为20%"</span><span class="pun">);</span></code></li><li class="L5"><code class="language-c"><span class="pln">   </span><span class="kwd">return</span><span class="pln"> booksPrice </span><span class="pun">*</span><span class="pln"> </span><span class="lit">0.8</span><span class="pun">;</span></code></li><li class="L6"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L7"><code class="language-c"><span class="pun">}</span></code></li><li class="L8"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Price</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-c"><span class="pln">  </span><span class="com">// 持有一个具体的策略对象</span></code></li><li class="L0"><code class="language-c"><span class="pln">  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">MemberStrategy</span><span class="pln"> strategy</span><span class="pun">;</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="com">/**</span></code></li><li class="L3"><code class="language-c"><span class="com">  * 构造函数，传入一个具体的策略对象</span></code></li><li class="L4"><code class="language-c"><span class="com">   * </span></code></li><li class="L5"><code class="language-c"><span class="com">   * @param strategy</span></code></li><li class="L6"><code class="language-c"><span class="com">  *            具体的策略对象</span></code></li><li class="L7"><code class="language-c"><span class="com">   */</span></code></li><li class="L8"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Price</span><span class="pun">(</span><span class="typ">MemberStrategy</span><span class="pln"> strategy</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-c"><span class="pln">   </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">strategy </span><span class="pun">=</span><span class="pln"> strategy</span><span class="pun">;</span></code></li><li class="L0"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="com">/**</span></code></li><li class="L2"><code class="language-c"><span class="com">  * 计算图书的价格</span></code></li><li class="L3"><code class="language-c"><span class="com">  * </span></code></li><li class="L4"><code class="language-c"><span class="com">   * @param booksPrice</span></code></li><li class="L5"><code class="language-c"><span class="com">  *            图书的原价</span></code></li><li class="L6"><code class="language-c"><span class="com">   * @return 计算出打折后的价格</span></code></li><li class="L7"><code class="language-c"><span class="com">  */</span></code></li><li class="L8"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> quote</span><span class="pun">(</span><span class="kwd">double</span><span class="pln"> booksPrice</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-c"><span class="pln">   </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">strategy</span><span class="pun">.</span><span class="pln">calcPrice</span><span class="pun">(</span><span class="pln">booksPrice</span><span class="pun">);</span></code></li><li class="L0"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L1"><code class="language-c"><span class="pun">}</span></code></li><li class="L2"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Client</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln"> </span><span class="lit">@Test</span></code></li><li class="L4"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> test</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="com">// 选择并创建需要使用的策略对象</span></code></li><li class="L6"><code class="language-c"><span class="pln">   </span><span class="typ">MemberStrategy</span><span class="pln"> strategy </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">AdvancedMemberStrategy</span><span class="pun">();</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="com">// 创建环境</span></code></li><li class="L8"><code class="language-c"><span class="pln">   </span><span class="typ">Price</span><span class="pln"> price </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Price</span><span class="pun">(</span><span class="pln">strategy</span><span class="pun">);</span></code></li><li class="L9"><code class="language-c"><span class="pln">   </span><span class="com">// 计算价格</span></code></li><li class="L0"><code class="language-c"><span class="pln">   </span><span class="kwd">double</span><span class="pln"> quote </span><span class="pun">=</span><span class="pln"> price</span><span class="pun">.</span><span class="pln">quote</span><span class="pun">(</span><span class="lit">300</span><span class="pun">);</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"图书的最终价格为："</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> quote</span><span class="pun">);</span></code></li><li class="L2"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L3"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></div><div><h3><span data-wiz-span="data-wiz-span" style="color: rgb(56, 142, 142);">13. 模板方法模式</span></h3><div>模板方法模式是类的行为模式。可以声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。</div></div><div><div><img border="0" src="All in_files/53756119.png"></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> abstract </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Account</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="com">/**</span></code></li><li class="L2"><code class="language-c"><span class="com">  * 模板方法，计算利息数额</span></code></li><li class="L3"><code class="language-c"><span class="com">  * </span></code></li><li class="L4"><code class="language-c"><span class="com">   * @return 返回利息数额</span></code></li><li class="L5"><code class="language-c"><span class="com">   */</span></code></li><li class="L6"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> final </span><span class="kwd">double</span><span class="pln"> calculateInterest</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-c"><span class="pln">   </span><span class="kwd">double</span><span class="pln"> interestRate </span><span class="pun">=</span><span class="pln"> doCalculateInterestRate</span><span class="pun">();</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="typ">String</span><span class="pln"> accountType </span><span class="pun">=</span><span class="pln"> doCalculateAccountType</span><span class="pun">();</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="kwd">double</span><span class="pln"> amount </span><span class="pun">=</span><span class="pln"> calculateAmount</span><span class="pun">(</span><span class="pln">accountType</span><span class="pun">);</span></code></li><li class="L0"><code class="language-c"><span class="pln">   </span><span class="kwd">return</span><span class="pln"> amount </span><span class="pun">*</span><span class="pln"> interestRate</span><span class="pun">;</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="com">/**</span></code></li><li class="L3"><code class="language-c"><span class="com">  * 基本方法留给子类实现</span></code></li><li class="L4"><code class="language-c"><span class="com">   */</span></code></li><li class="L5"><code class="language-c"><span class="pln">  </span><span class="kwd">protected</span><span class="pln"> abstract </span><span class="typ">String</span><span class="pln"> doCalculateAccountType</span><span class="pun">();</span></code></li><li class="L6"><code class="language-c"><span class="pln"> </span><span class="com">/**</span></code></li><li class="L7"><code class="language-c"><span class="com">  * 基本方法留给子类实现</span></code></li><li class="L8"><code class="language-c"><span class="com">   */</span></code></li><li class="L9"><code class="language-c"><span class="pln">  </span><span class="kwd">protected</span><span class="pln"> abstract </span><span class="kwd">double</span><span class="pln"> doCalculateInterestRate</span><span class="pun">();</span></code></li><li class="L0"><code class="language-c"><span class="pln">  </span><span class="com">/**</span></code></li><li class="L1"><code class="language-c"><span class="com">  * 基本方法，已经实现</span></code></li><li class="L2"><code class="language-c"><span class="com">  */</span></code></li><li class="L3"><code class="language-c"><span class="pln">  </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> calculateAmount</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> accountType</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-c"><span class="pln">   </span><span class="com">/**</span></code></li><li class="L5"><code class="language-c"><span class="com">    * 省略相关的业务逻辑</span></code></li><li class="L6"><code class="language-c"><span class="com">    */</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="lit">7243.00</span><span class="pun">;</span></code></li><li class="L8"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L9"><code class="language-c"><span class="pun">}</span></code></li><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">MoneyMarketAccount</span><span class="pln"> extends </span><span class="typ">Account</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="lit">@Override</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="kwd">protected</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> doCalculateAccountType</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">   </span><span class="kwd">return</span><span class="pln"> </span><span class="str">"Money Market"</span><span class="pun">;</span></code></li><li class="L4"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L5"><code class="language-c"><span class="pln"> </span><span class="lit">@Override</span></code></li><li class="L6"><code class="language-c"><span class="pln"> </span><span class="kwd">protected</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> doCalculateInterestRate</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="lit">0.045</span><span class="pun">;</span></code></li><li class="L8"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L9"><code class="language-c"><span class="pun">}</span></code></li><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">CDAccount</span><span class="pln"> extends </span><span class="typ">Account</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="lit">@Override</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="kwd">protected</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> doCalculateAccountType</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">   </span><span class="kwd">return</span><span class="pln"> </span><span class="str">"Certificate of Deposite"</span><span class="pun">;</span></code></li><li class="L4"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L5"><code class="language-c"><span class="pln"> </span><span class="lit">@Override</span></code></li><li class="L6"><code class="language-c"><span class="pln"> </span><span class="kwd">protected</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> doCalculateInterestRate</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="lit">0.06</span><span class="pun">;</span></code></li><li class="L8"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L9"><code class="language-c"><span class="pun">}</span></code></li><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Client</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="lit">@Test</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> test</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="typ">Account</span><span class="pln"> account </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">MoneyMarketAccount</span><span class="pun">();</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"货币市场账号的利息数额为："</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> account</span><span class="pun">.</span><span class="pln">calculateInterest</span><span class="pun">());</span></code></li><li class="L5"><code class="language-c"><span class="pln">    account </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">CDAccount</span><span class="pun">();</span></code></li><li class="L6"><code class="language-c"><span class="pln">   </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"定期账号的利息数额为："</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> account</span><span class="pun">.</span><span class="pln">calculateInterest</span><span class="pun">());</span></code></li><li class="L7"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L8"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div>HttpServlet中的doGet/doPost就用了模板方法模式</div></div><div><h3><span data-wiz-span="data-wiz-span" style="color: rgb(56, 142, 142);">14. 观察者模式</span></h3><div>&nbsp;观察者模式是对象的行为模式，又叫发布-订阅(Publish/Subscribe)模式。</div></div><div><div><img border="0" src="All in_files/54323460.png"></div></div><div><div><b>推模型和拉模型</b></div><div>　　在观察者模式中，又分为推模型和拉模型两种方式。</div><div><ul style="margin-bottom: 0px;"><li><span style="font-size: 10.5pt; line-height: 1.5;">推模型</span><br></li></ul></div><div><span style="font-family: 微软雅黑; font-size: 10.5pt; line-height: 1.5;">&nbsp; &nbsp;&nbsp;</span><span style="font-family: 微软雅黑; font-size: 10.5pt; line-height: 1.5;">&nbsp; &nbsp;&nbsp;</span><span style="font-size: 10.5pt; line-height: 1.5;">主题对象向观察者推送主题的详细信息，不管观察者是否需要，推送的信息通常是主题对象的全部或部分数据。</span></div><div><ul style="margin-bottom: 0px;"><li><span style="font-size: 10.5pt; line-height: 1.5;">拉模型</span><br></li></ul></div><div><span style="font-family: 微软雅黑; font-size: 10.5pt; line-height: 1.5;">&nbsp; &nbsp;&nbsp;</span><span style="font-family: 微软雅黑; font-size: 10.5pt; line-height: 1.5;">&nbsp; &nbsp;&nbsp;</span><span style="font-size: 10.5pt; line-height: 1.5;">主题对象在通知观察者的时候，只传递少量信息。如果观察者需要更具体的信息，由观察者主动到主题对象中获取。一般这种模型的实现中，会把主题对象自身通过update()方法传递给观察者，这样在观察者需要获取数据的时候，就可以通过这个引用来获取了。</span></div></div><div>推模型</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> abstract </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Subject</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="com">/**</span></code></li><li class="L2"><code class="language-c"><span class="com">  * 用来保存注册的观察者对象</span></code></li><li class="L3"><code class="language-c"><span class="com">   */</span></code></li><li class="L4"><code class="language-c"><span class="pln">  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Observer</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">list</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ArrayList</span><span class="pun">&lt;</span><span class="typ">Observer</span><span class="pun">&gt;();</span></code></li><li class="L5"><code class="language-c"><span class="pln">  </span><span class="com">/**</span></code></li><li class="L6"><code class="language-c"><span class="com">  * 注册观察者对象</span></code></li><li class="L7"><code class="language-c"><span class="com">  * </span></code></li><li class="L8"><code class="language-c"><span class="com">   * @param observer</span></code></li><li class="L9"><code class="language-c"><span class="com">  *            观察者对象</span></code></li><li class="L0"><code class="language-c"><span class="com">   */</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> attach</span><span class="pun">(</span><span class="typ">Observer</span><span class="pln"> observer</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="typ">list</span><span class="pun">.</span><span class="pln">add</span><span class="pun">(</span><span class="pln">observer</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Attached an observer"</span><span class="pun">);</span></code></li><li class="L4"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L5"><code class="language-c"><span class="pln"> </span><span class="com">/**</span></code></li><li class="L6"><code class="language-c"><span class="com">  * 删除观察者对象</span></code></li><li class="L7"><code class="language-c"><span class="com">  * </span></code></li><li class="L8"><code class="language-c"><span class="com">   * @param observer</span></code></li><li class="L9"><code class="language-c"><span class="com">  *            观察者对象</span></code></li><li class="L0"><code class="language-c"><span class="com">   */</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> detach</span><span class="pun">(</span><span class="typ">Observer</span><span class="pln"> observer</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="typ">list</span><span class="pun">.</span><span class="pln">remove</span><span class="pun">(</span><span class="pln">observer</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L4"><code class="language-c"><span class="pln"> </span><span class="com">/**</span></code></li><li class="L5"><code class="language-c"><span class="com">  * 通知所有注册的观察者对象</span></code></li><li class="L6"><code class="language-c"><span class="com">   */</span></code></li><li class="L7"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> nodifyObservers</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> newState</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-c"><span class="pln">   </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Observer</span><span class="pln"> observer </span><span class="pun">:</span><span class="pln"> </span><span class="typ">list</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-c"><span class="pln">      observer</span><span class="pun">.</span><span class="pln">update</span><span class="pun">(</span><span class="pln">newState</span><span class="pun">);</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L2"><code class="language-c"><span class="pun">}</span></code></li><li class="L3"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ConcreteSubject</span><span class="pln"> extends </span><span class="typ">Subject</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-c"><span class="pln">  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> state</span><span class="pun">;</span></code></li><li class="L5"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getState</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> state</span><span class="pun">;</span></code></li><li class="L7"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L8"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> change</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> newState</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-c"><span class="pln">    state </span><span class="pun">=</span><span class="pln"> newState</span><span class="pun">;</span></code></li><li class="L0"><code class="language-c"><span class="pln">   </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"主题状态为："</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> state</span><span class="pun">);</span></code></li><li class="L1"><code class="language-c"><span class="pln">   </span><span class="com">// 状态发生改变，通知各个观察者</span></code></li><li class="L2"><code class="language-c"><span class="pln">   </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">nodifyObservers</span><span class="pun">(</span><span class="pln">state</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L4"><code class="language-c"><span class="pun">}</span></code></li><li class="L5"><code class="language-c"><span class="kwd">public</span><span class="pln"> interface </span><span class="typ">Observer</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-c"><span class="pln"> </span><span class="com">/**</span></code></li><li class="L7"><code class="language-c"><span class="com">  * 更新接口</span></code></li><li class="L8"><code class="language-c"><span class="com">   * </span></code></li><li class="L9"><code class="language-c"><span class="com">   * @param state</span></code></li><li class="L0"><code class="language-c"><span class="com">   *            更新的状态</span></code></li><li class="L1"><code class="language-c"><span class="com">   */</span></code></li><li class="L2"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> update</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> state</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pun">}</span></code></li><li class="L4"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ConcreteObserver</span><span class="pln"> implements </span><span class="typ">Observer</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-c"><span class="pln">  </span><span class="com">// 观察者的状态</span></code></li><li class="L6"><code class="language-c"><span class="pln"> </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> observerState</span><span class="pun">;</span></code></li><li class="L7"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> update</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> state</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-c"><span class="pln">   </span><span class="com">/**</span></code></li><li class="L9"><code class="language-c"><span class="com">    * 更新观察者的状态，使其与目标的状态保持一致</span></code></li><li class="L0"><code class="language-c"><span class="com">    */</span></code></li><li class="L1"><code class="language-c"><span class="pln">    observerState </span><span class="pun">=</span><span class="pln"> state</span><span class="pun">;</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"状态为："</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> observerState</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L4"><code class="language-c"><span class="pun">}</span></code></li><li class="L5"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Client</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-c"><span class="pln"> </span><span class="lit">@Test</span></code></li><li class="L7"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> test</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="com">// 创建主题对象</span></code></li><li class="L9"><code class="language-c"><span class="pln">   </span><span class="typ">ConcreteSubject</span><span class="pln"> subject </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ConcreteSubject</span><span class="pun">();</span></code></li><li class="L0"><code class="language-c"><span class="pln">   </span><span class="com">// 创建观察者对象</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="typ">Observer</span><span class="pln"> observer </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ConcreteObserver</span><span class="pun">();</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="com">// 将观察者对象登记到主题对象上</span></code></li><li class="L3"><code class="language-c"><span class="pln">   subject</span><span class="pun">.</span><span class="pln">attach</span><span class="pun">(</span><span class="pln">observer</span><span class="pun">);</span></code></li><li class="L4"><code class="language-c"><span class="pln">   </span><span class="com">// 改变主题对象的状态</span></code></li><li class="L5"><code class="language-c"><span class="pln">    subject</span><span class="pun">.</span><span class="pln">change</span><span class="pun">(</span><span class="str">"new state"</span><span class="pun">);</span></code></li><li class="L6"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L7"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div>拉模型</div></div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> interface </span><span class="typ">Observer</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="com">/**</span></code></li><li class="L2"><code class="language-c"><span class="com">  * 更新接口</span></code></li><li class="L3"><code class="language-c"><span class="com">   * </span></code></li><li class="L4"><code class="language-c"><span class="com">   * @param subject</span></code></li><li class="L5"><code class="language-c"><span class="com">   *            传入主题对象，方面获取相应的主题对象的状态</span></code></li><li class="L6"><code class="language-c"><span class="com">   */</span></code></li><li class="L7"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> update</span><span class="pun">(</span><span class="typ">Subject</span><span class="pln"> subject</span><span class="pun">);</span></code></li><li class="L8"><code class="language-c"><span class="pun">}</span></code></li><li class="L9"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ConcreteObserver</span><span class="pln"> implements </span><span class="typ">Observer</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-c"><span class="pln"> </span><span class="com">// 观察者的状态</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> observerState</span><span class="pun">;</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> update</span><span class="pun">(</span><span class="typ">Subject</span><span class="pln"> subject</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="com">/**</span></code></li><li class="L4"><code class="language-c"><span class="com">    * 更新观察者的状态，使其与目标的状态保持一致</span></code></li><li class="L5"><code class="language-c"><span class="com">    */</span></code></li><li class="L6"><code class="language-c"><span class="pln">    observerState </span><span class="pun">=</span><span class="pln"> </span><span class="pun">((</span><span class="typ">ConcreteSubject</span><span class="pun">)</span><span class="pln"> subject</span><span class="pun">).</span><span class="pln">getState</span><span class="pun">();</span></code></li><li class="L7"><code class="language-c"><span class="pln">   </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"观察者状态为："</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> observerState</span><span class="pun">);</span></code></li><li class="L8"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L9"><code class="language-c"><span class="pun">}</span></code></li><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> abstract </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Subject</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="com">/**</span></code></li><li class="L2"><code class="language-c"><span class="com">  * 用来保存注册的观察者对象</span></code></li><li class="L3"><code class="language-c"><span class="com">   */</span></code></li><li class="L4"><code class="language-c"><span class="pln">  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Observer</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">list</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ArrayList</span><span class="pun">&lt;</span><span class="typ">Observer</span><span class="pun">&gt;();</span></code></li><li class="L5"><code class="language-c"><span class="pln">  </span><span class="com">/**</span></code></li><li class="L6"><code class="language-c"><span class="com">  * 注册观察者对象</span></code></li><li class="L7"><code class="language-c"><span class="com">  * </span></code></li><li class="L8"><code class="language-c"><span class="com">   * @param observer</span></code></li><li class="L9"><code class="language-c"><span class="com">  *            观察者对象</span></code></li><li class="L0"><code class="language-c"><span class="com">   */</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> attach</span><span class="pun">(</span><span class="typ">Observer</span><span class="pln"> observer</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="typ">list</span><span class="pun">.</span><span class="pln">add</span><span class="pun">(</span><span class="pln">observer</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Attached an observer"</span><span class="pun">);</span></code></li><li class="L4"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L5"><code class="language-c"><span class="pln"> </span><span class="com">/**</span></code></li><li class="L6"><code class="language-c"><span class="com">  * 删除观察者对象</span></code></li><li class="L7"><code class="language-c"><span class="com">  * </span></code></li><li class="L8"><code class="language-c"><span class="com">   * @param observer</span></code></li><li class="L9"><code class="language-c"><span class="com">  *            观察者对象</span></code></li><li class="L0"><code class="language-c"><span class="com">   */</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> detach</span><span class="pun">(</span><span class="typ">Observer</span><span class="pln"> observer</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="typ">list</span><span class="pun">.</span><span class="pln">remove</span><span class="pun">(</span><span class="pln">observer</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L4"><code class="language-c"><span class="pln"> </span><span class="com">/**</span></code></li><li class="L5"><code class="language-c"><span class="com">  * 通知所有注册的观察者对象</span></code></li><li class="L6"><code class="language-c"><span class="com">   */</span></code></li><li class="L7"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> nodifyObservers</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-c"><span class="pln">   </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Observer</span><span class="pln"> observer </span><span class="pun">:</span><span class="pln"> </span><span class="typ">list</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-c"><span class="pln">      observer</span><span class="pun">.</span><span class="pln">update</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">);</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L2"><code class="language-c"><span class="pun">}</span></code></li><li class="L3"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ConcreteSubject</span><span class="pln"> extends </span><span class="typ">Subject</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-c"><span class="pln">  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> state</span><span class="pun">;</span></code></li><li class="L5"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getState</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> state</span><span class="pun">;</span></code></li><li class="L7"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L8"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> change</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> newState</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-c"><span class="pln">    state </span><span class="pun">=</span><span class="pln"> newState</span><span class="pun">;</span></code></li><li class="L0"><code class="language-c"><span class="pln">   </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"主题状态为："</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> state</span><span class="pun">);</span></code></li><li class="L1"><code class="language-c"><span class="pln">   </span><span class="com">// 状态发生改变，通知各个观察者</span></code></li><li class="L2"><code class="language-c"><span class="pln">   </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">nodifyObservers</span><span class="pun">();</span></code></li><li class="L3"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L4"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div>java本身对observe提供了支持，提供java.util.Observable类。</div></div><div><h3><span data-wiz-span="data-wiz-span" style="color: rgb(56, 142, 142);"><br class="Apple-interchange-newline">15. 门面模式</span></h3><div>&nbsp; &nbsp;&nbsp;对下面显示都隐藏，只对外暴露几个核心接口。如我做过的工作流引擎，只对外暴露start()、pause()等方法，而将底下的实现都屏蔽了。Facade。</div></div><div>&nbsp; &nbsp;&nbsp;Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。<br></div><div><br></div><div><br></div><div><br></div><div><div style="border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>Java BIO与NIO、AIO</h2></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN"><h3 style="font-family: &quot;Helvetica Neue&quot;;">IO请求完整过程</h3><div><div><div style="line-height: 32px;"><div style="line-height: 32px;">一、当用户线程发起一个IO请求操作（本文以读请求操作为例），一个完整的IO读请求操作包括两个阶段：</div><div style="line-height: 32px;">1）请求内核查看数据是否就绪；</div><div style="line-height: 32px;">2）进行数据拷贝（内核将数据拷贝到用户线程）。</div></div><h3 style="line-height: 32px;">IO基本概念</h3><div style="line-height: 32px;"><ul><li>同步和异步：在于多个任务和事件发生时，一个事件的发生或执行是否会导致整个流程的暂时等待。</li><li>阻塞和非阻塞：当发出请求一个操作时，如果条件不满足，是会一直等待还是返回一个标志信息。</li><li>阻塞IO和非阻塞IO：区别就在于第一个阶段，如果数据没有就绪，在查看数据是否就绪的过程中是一直等待，还是直接返回一个标志信息。Iava传统IO就是阻塞IO。</li><li>同步IO和异步IO：同步IO和异步IO模型是针对用户线程和内核的交互来说的。同步IO，用户发出IO请求以后，如果数据没有就绪，需要通过用户线程或者内核不断地去轮询数据是否就绪，当数据就绪时，再将数据从内核拷贝到用户线程；异步IO，用户发出IO请求以后，就去干他自己的事，IO操作的两个阶段都是由内核自动完成，然后发送通知告知用户线程IO操作已经完成。也就是说在异步IO中，不会对用户线程产生任何阻塞。</li><li>高性能IO设计模式：Reactor和Proactor。</li></ul></div><div style="line-height: 32px;"><div style="line-height: 32px;"><div style="line-height: 32px;">在Reactor模式中，会先对每个client注册感兴趣的事件，然后有一个线程专门去轮询每个client是否有事件发生，当有事件发生时，便顺序处理每个事件，当所有事件处理完之后，便再转去继续轮询。上面多路复用IO就是采用Reactor模式。</div><div style="line-height: 32px;">在Proactor模式中，当检测到有事件发生时，会新起一个异步操作，然后交由内核线程去处理，当内核线程完成IO操作之后，发送一个通知告知操作已完成。异步IO模型采用的就是Proactor模式。</div></div><h3 style="line-height: 32px;">Linux 网络 I/O 模型简介</h3></div><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 32px;">Linux 的内核将所有外部设备都看做一个文件来操作（一切皆文件），对一个文件的读写操作会调用内核提供的系统命令，返回一个file descriptor（fd，文件描述符）。而对一个socket的读写也会有响应的描述符，称为socket fd（socket文件描述符），描述符就是一个数字，指向内核中的一个结构体（文件路径，数据区等一些属性）。</div></div><h3 style="font-family: &quot;Helvetica Neue&quot;;">几种常见的I/O模型及其区别</h3><div style="font-family: &quot;Helvetica Neue&quot;;">1. 阻塞IO</div><div style="font-family: &quot;Helvetica Neue&quot;;">应用程序请求内核获取数据，一直阻塞（阻塞过程中包含等待数据，将数据从内核空间拷贝到用户空间），直到内核返回数据。</div><div style="font-family: &quot;Helvetica Neue&quot;;">2.非阻塞IO</div><div style="font-family: &quot;Helvetica Neue&quot;;">内核提供返回数据接口，若无数据，返回空，否则返回数据。</div><div style="font-family: &quot;Helvetica Neue&quot;;">应用程序轮询请求内核获取数据接口，直到内核有数据，然后阻塞将数据从内核中拷贝出来。</div><div style="font-family: &quot;Helvetica Neue&quot;;">3.多路复用IO</div><div style="font-family: &quot;Helvetica Neue&quot;;">可以同时处理多个套接字。Java NIO是多路复用IO。</div><div>在多路复用IO模型中，会有一个线程<font color="#ff0000">不断去轮询多个socket的状态，只有当socket真正有读写事件时，才真正调用实际的IO读写操作</font>。<br></div><div style="font-family: &quot;Helvetica Neue&quot;;"><font color="#ff0000">select先阻塞，有活动套接字才返回</font>。与blocking I/O相比，select会有两次系统调用（有活动套接字和将数据从内核空间拷贝到用户空间），但是select能处理多个套接字。</div><div>在Java NIO中，是通过selector.select()去查询每个通道是否有到达事件，如果没有事件，则一直阻塞在那里，因此这种方式会导致用户线程的阻塞。<br></div><div style="font-family: &quot;Helvetica Neue&quot;;">4.信号驱动IO</div><div style="font-family: &quot;Helvetica Neue&quot;;"><font color="#ff0000">免去了select的阻塞与轮询，当有活跃套接字时，由注册的handler(回调函数)处理，也需要阻塞从内核空间拷贝数据到用户空间。</font>&nbsp;</div><div style="font-family: &quot;Helvetica Neue&quot;;">5.异步IO</div><div style="font-family: &quot;Helvetica Neue&quot;;">纵观上面其它四种模型，至少都会在从内核空间拷贝数据到用户空间时阻塞。而该模型是当拷贝数据完成后才通知应用程序，可见是纯异步的。好像只有windows的完成端口是这个模型，效率也很出色。</div><div style="font-family: &quot;Helvetica Neue&quot;;"><br></div><div style="font-family: &quot;Helvetica Neue&quot;;">很少有Unix系统支持，Windows的IOCP则是此模型。</div><div style="font-family: &quot;Helvetica Neue&quot;;"><br></div><div style="font-family: &quot;Helvetica Neue&quot;;">可以看出，越往后，阻塞越少，理论上效率也是最优。</div><div style="font-family: &quot;Helvetica Neue&quot;;"><br></div><div style="font-family: &quot;Helvetica Neue&quot;;">select和iocp分别对应第3种与第5种模型，epoll与kqueue其实也于select属于同一种模型，只是可以看作有了第4种模型的某些特性，如callback机制。</div><div style="font-family: &quot;Helvetica Neue&quot;;"><br></div><div style="font-family: &quot;Helvetica Neue&quot;;"><font color="#ff0000">前面四种IO模型实际上都属于同步IO，只有最后一种是真正的异步IO，无论是多路复用IO还是信号驱动模型，IO操作的第2个阶段都会引起用户线程阻塞，也就是内核进行数据拷贝的过程都会让用户线程阻塞。</font><br></div><div style="font-family: &quot;Helvetica Neue&quot;;"><br></div><h3 style="font-family: &quot;Helvetica Neue&quot;;">多路复用</h3><div style="font-family: &quot;Helvetica Neue&quot;;"><div>1. 为什么要使用多路复用？</div><div>阻塞I/O模式下，一个线程只能处理一个流的I/O事件，内核对于I/O事件的处理是阻塞或者唤醒。如果想要同时处理多个流，要么多进程(fork)，要么多线程(pthread_create)，很不幸这两种方法效率都不高。传统做法是，如果我们想要同时处理多个流的I/O事件，可以不停的把所有流从头到尾问一遍，一直循环问，但这样的做法显然不好，因为如果所有的流都没有数据，那么只会白白浪费CPU。这就是<font color="#ff0000">非阻塞忙轮询的I/O</font>方式，在非阻塞模式下，想同时处理多个流，则可以把I/O事件交给select、epoll等来处理，使用它们可以同时观察多个流的I/O事件，，例如使用select，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有I/O事件时，就从阻塞态中醒来，这时我们的程序再轮询一遍所有的流，读出数据，这时就不是忙轮询所有流。如果没有I/O事件产生，我们的程序就会阻塞在select处。但是依然有个问题，我们从select那里仅仅知道了，有I/O事件发生了，但却并不知道是那几个流（可能有一个，多个，甚至全部），我们只能<font color="#ff0000">无差别轮询</font>所有流，找出能读出数据，或者写入数据的流，对他们进行操作。这时来介绍epoll，epoll可以理解为event poll，不同于忙轮询和无差别轮询，epoll会把哪个流发生了怎样的I/O事件通知我们，此时我们对这些流的操作都是有意义的，epoll_wait函数等待直到注册的事件发生。</div><div><br></div><div>2. epoll、select实现方式</div><div>&nbsp; &nbsp;&nbsp;epoll的原理就是把要监控读写的文件交给内核（epoll_add)，添加/删除你关心的事件（epoll_ctl），比如读事件，然后等（epoll_wait），此时，如果没有哪个文件有你关心的事件，则休眠，直到有事件，被唤醒然后返回那些事件</div><div>&nbsp; &nbsp;&nbsp;epoll也是轮询，只不过是对产生了io事件的socket进行轮询，然后直接调用callback，而不需要像select或poll那样对所有的socket都进行轮询，不管哪个socket是活跃的。这会浪费很多CPU时间。同时也减少对文件句柄的拷贝。</div><div>epoll底层实现：</div><div>我们在调用epoll_create时，内核除了帮我们在epoll文件系统里建了个file结点，在内核cache里建了个红黑树用于存储以后epoll_ctl传来的socket外，还会再建立一个list链表，用于存储准备就绪的事件.当epoll_wait调用时，仅仅观察这个list链表里有没有数据即可。有数据就返回，没有数据就sleep，等到timeout时间到后即使链表没数据也返回。所以，epoll_wait非常高效。当我们执行epoll_ctl时，除了把socket放到epoll文件系统里file对象对应的红黑树上之外，还会给内核中断处理程序注册一个回调函数，告诉内核，如果这个句柄的中断到了，就把它放到准备就绪list链表里。所以，当一个socket上有数据到了，内核在把网卡上的数据copy到内核中后就来把socket插入到准备就绪链表里了。</div><div>select底层实现：</div><div>select将所有文件描述符传递给内核中，内核处理读、写缓冲区，内核在检测到文件句柄可读/可写时就产生中断通知监控者select，select被内核触发之后，就返回可读可写的文件句柄的总数；内核会修改这些文件句柄，所以再次监控时，又需要重新复制一遍原始的文件描述符信息给内核。如此每次都要进行文件句柄拷贝。</div><div><br></div><div><div>3. select/poll/epoll对比</div><div>select模型</div><div>1. 最大并发数限制，因为一个进程所打开的FD（文件描述符）是有限制的，由FD_SETSIZE设置，默认值是1024/2048，因此Select模型的最大并发数就被相应限制了。</div><div>2. 效率问题，select每次调用都会线性扫描全部的FD集合，这样效率就会呈现线性下降。</div><div>3. 内核/用户空间 内存拷贝问题，如何让内核把FD消息通知给用户空间呢？在这个问题上select采取了内存拷贝方法。</div><div>poll模型</div><div>基本上效率和select是相同的，select缺点的2和3它都没有改掉。</div><div>Epoll的模型</div><div>select缺点就是epoll有点。</div><div>1. Epoll没有最大并发连接的限制，上限是最大可以打开文件的数目，这个数字一般远大于2048, 一般来说这个数目和系统内存关系很大。</div><div>2. 效率提升，Epoll最大的优点就在于它只管你“活跃”的连接，而跟连接总数无关，因此在实际的网络环境中，Epoll的效率就会远远高于select和poll。</div><div>3. 内存拷贝，Epoll在这点上使用了“共享内存”，这个内存拷贝也省略了。</div></div><div><br></div><div>epoll, kqueue是Reacor模式，IOCP是Proactor模式。</div><div>java nio包是select模型。</div></div><h3 style="font-family: &quot;Helvetica Neue&quot;;">Java BIO、NIO、AIO支持</h3><div><div>异步IO是需要操作系统的底层支持，在Java 7中，提供了异步IO。</div><div><div>1. 同步阻塞BIO编程</div><div>1）传统的BIO模式</div><div>采用BIO通信模型的服务端，每当有一个新的客户端请求接入时，服务端必须创建一个新的线程来处理这条链路。即典型的一请求一应答通宵模型。该模型最大的问题就是缺乏弹性伸缩能力，当客户端并发访问量增加后，服务端的线程个数和客户端并发访问数呈1:1的正比关系。</div><div>2）伪异步I/O编程</div><div>为了改进这种一连接一线程的模型，我们可以使用线程池来管理这些线程，实现1个或多个线程处理N个客户端的模型，通常被称为“伪异步I/O模型“。实现很简单，我们只需要将新建线程的地方，交给线程池管理即可，实现了N:M的伪异步I/O模型。但是，正因为限制了线程数量，如果发生大量并发请求，超过最大数量的线程就只能等待，直到线程池中的有空闲的线程可以被复用。而对Socket的输入流就行读取时，会一直阻塞，在读取数据较慢时（比如数据量大、网络传输慢等），大量并发的情况下，其他接入的消息，只能一直等待，这就是最大的弊端。</div><div>2. 同步非阻塞NIO 编程<br></div><div>NIO我们一般认为是New I/O，因为它是相对于老的I/O类库新增的，即使现在AIO的出现，它看来已经是“旧”的了，最合适的称呼叫非阻塞I/O。NIO提供了与传统BIO模型中的Socket和ServerSocket相对应的SocketChannel和ServerSocketChannel两种不同的套接字通道实现，他们都有阻塞和非阻塞两种模式，阻塞模型和传统的差不多。一个Selector可以同时轮询多个Channel，因为JDK使用了epoll()代替传统的select实现，所以没有最大连接句柄1024/2048的限制。</div><div>3. 异步非阻塞AIO编程</div><div>NIO 2.0引入了新的异步通道的概念，并提供了异步文件通道和异步套接字通道的实现。异步的套接字通道是真正的异步非阻塞I/O，他不需要过多的Selector对注册的通道进行轮询即可实现异步读写，从而简化了NIO的编程模型。</div></div></div><div><br></div><div><div style="line-height: 24.2667px;">BIO、NIO、AIO适用场景分析:&nbsp;</div><div style="line-height: 24.2667px;"><ul><li>BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。&nbsp;</li><li>NIO方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。&nbsp;</li><li>AIO方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。&nbsp;</li><li><br></li></ul></div></div><h3>Java NIO 详细内容</h3><div><div>Java NIO提供了与标准IO不同的IO工作方式：&nbsp;</div><div><ul><li>Channels and Buffers（通道和缓冲区）：标准的IO基于字节流进行操作的，而NIO是基于通道（Channel）和缓冲区（Buffer）进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。流的读写通常是单向的。通道可以异步地读写。</li><li>Selectors（选择器）：选择器用于监听多个通道的事件（比如：连接打开，数据到达）。因此，单个的线程可以监听多个数据通道。</li></ul><br></div><div>Java NIO和IO的主要区别：<br></div><div><ul><li>面向流与面向缓冲&nbsp;</li><li>阻塞与非阻塞IO 当一个线程调用read() 或 write()时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。</li><li>选择器（Selectors）<span class="Apple-tab-span" style="white-space: pre;">  </span>Java NIO的选择器允许一个单独的线程来监视多个输入通道。</li></ul></div><div><br></div><div>Java NIO中最重要的通道的实现：&nbsp;</div><div><ul><li>FileChannel：从文件中读写数据。<span class="Apple-tab-span" style="white-space: pre;">  </span>阻塞模式</li><li>DatagramChannel：能通过UDP读写网络中的数据。</li><li>SocketChannel：能通过TCP读写网络中的数据。</li><li>ServerSocketChannel：可以监听新进来的TCP连接，像Web服务器那样。对每一个新进来的连接都会创建一个SocketChannel。</li></ul></div><div><br></div><div>Java NIO 有以下Buffer类型：&nbsp;</div><div><ul><li>ByteBuffer</li><li>CharBuffer</li><li>DoubleBuffer</li><li>...</li></ul></div><div>这些Buffer类型代表了不同的数据类型。</div><div><br></div><div>Selector（选择器）是Java NIO中一个单独的线程能够检测一到多个NIO通道。与Selector一起使用时，Channel必须处于非阻塞模式下。这意味着不能将FileChannel与Selector一起使用。套接字通道都可以。&nbsp;</div><div><ol><li>将channel注册到selector上，传递参数中指明对哪些事件感兴趣。事件就四种：Connect连接就绪、Accept服务接收新连接就绪、Read读就绪、Write写就绪。</li><li>将所有channel注册完后就可以调用select的select()方法，这个方法返回你所感兴趣的事件已经准备就绪的那些channel的总数，死循环调用selector.select()方法，自上次调用select()到这次有多少channel就绪。</li><li>当有至少一个通道准备就绪，就可以再调selector.selectedKeys()获取所有准备就绪的channel的就绪事件。</li></ol></div><div><br></div><div>FileChannel无法设置为非阻塞模式，它总是运行在阻塞模式下。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="typ">RandomAccessFile</span><span class="pln"> aFile </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">RandomAccessFile</span><span class="pun">(</span><span class="str">"data/nio-data.txt"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"rw"</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L1"><code class="language-c"><span class="typ">FileChannel</span><span class="pln"> inChannel </span><span class="pun">=</span><span class="pln"> aFile</span><span class="pun">.</span><span class="pln">getChannel</span><span class="pun">();</span><span class="pln">  </span></code></li><li class="L2"><code class="language-c"><span class="typ">ByteBuffer</span><span class="pln"> buf </span><span class="pun">=</span><span class="pln"> </span><span class="typ">ByteBuffer</span><span class="pun">.</span><span class="pln">allocate</span><span class="pun">(</span><span class="lit">48</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L3"><code class="language-c"><span class="typ">int</span><span class="pln"> bytesRead </span><span class="pun">=</span><span class="pln"> inChannel</span><span class="pun">.</span><span class="pln">read</span><span class="pun">(</span><span class="pln">buf</span><span class="pun">);</span><span class="pln"> </span></code></li></ol></pre></div><div><br></div></div></div></div></span></w:sdt></span></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN"><div><div><br></div><div style="font-family: &quot;Helvetica Neue&quot;;"><div style="border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>Java静态块、静态方法、非静态方法、构造方法执行次序</h2></div></div><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;"><font face="黑体"><div style="line-height: 24.2667px;"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ExA</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="kwd">static</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"父类--静态代码块"</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">ExA</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-c"><span class="pln">        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"父类--构造函数"</span><span class="pun">);</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L8"><code class="language-c"><span class="pln">        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"父类--非静态代码块"</span><span class="pun">);</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> test</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"父类--方法"</span><span class="pun">);</span><span class="pln"> </span><span class="com">//被子类的相同方法覆盖</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L3"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ExB</span><span class="pln"> extends </span><span class="typ">ExA</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="kwd">static</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"子类--静态代码块"</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">ExB</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-c"><span class="pln">        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"子类--构造函数"</span><span class="pun">);</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L8"><code class="language-c"><span class="pln">        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"子类--非静态代码块"</span><span class="pun">);</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> test</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"子类--方法"</span><span class="pun">);</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-c"><span class="pln">        </span><span class="com">//new ExB();</span></code></li><li class="L5"><code class="language-c"><span class="pln">        </span><span class="com">//ExB.test();</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L7"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div></div><div><font color="#175779"><b>情况一：</b></font>main方法内都注释掉，执行结果：</div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">父类--静态代码块</span></code></li><li class="L1"><code class="language-c"><span class="pun">子类--静态代码块</span></code></li></ol></pre></div><div><span style="font-family: &quot;Helvetica Neue&quot;;"><font color="#ff0000">当启动Application，JVM会先加载所有类的静态变量、静态方法、静态代码块，执行静态代码块。</font></span><br></div><div><font color="#175779"><b>情况二：</b></font>只打开new ExB()注释，执行结果：</div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">父类--静态代码块</span></code></li><li class="L1"><code class="language-c"><span class="pun">子类--静态代码块</span></code></li><li class="L2"><code class="language-c"><span class="pun">父类--非静态代码块</span></code></li><li class="L3"><code class="language-c"><span class="pun">父类--构造函数</span></code></li><li class="L4"><code class="language-c"><span class="pun">子类--非静态代码块</span></code></li><li class="L5"><code class="language-c"><span class="pun">子类--构造函数</span></code></li><li class="L6"><code class="language-c"><span class="pun">子类--方法</span></code></li></ol></pre></div><div><div style="font-family: &quot;Helvetica Neue&quot;;"><font color="#ff0000">当实例化对象时，先执行该类的非静态代码块，然后执行构造方法。</font></div></div></div><div><b><font color="#175779">情况三：</font></b>只打开ExB.test()注释，执行结果：<br></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">父类--静态代码块</span></code></li><li class="L1"><code class="language-c"><span class="pun">子类--静态代码块</span></code></li><li class="L2"><code class="language-c"><span class="pun">子类--静态方法</span></code></li></ol></pre></div><div><span style="font-family: &quot;Helvetica Neue&quot;;"><font color="#ff0000">当执行静态方法时，由于不需要实例化对象，所以不会执行非静态代码块，构造方法。</font></span><br></div></div><div><span style="font-family: &quot;Helvetica Neue&quot;;"><br></span></div></div></font></div></div></span></w:sdt></span></div></div><div><div><span lang="EN-GB"><div><br></div><div><div style="border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>JVM<br></h2></div><h3 style="line-height: 24.2667px;"><font face="黑体">1. 概述</font></h3></div><div style="line-height: 24.2667px;"><font face="黑体"><div style="line-height: 24.2667px;">最有可能成为系统瓶颈的计算资源如下：</div><div style="line-height: 24.2667px;"><ul><li>磁盘I/O：磁盘I/O读写的速度要比内存慢很多，程序在运行过程中，如果需要等待磁盘I/O完成。</li><li>网络操作：对网络数据进行读写的情况与磁盘I/O类似。</li><li>CPU：对计算资源要求较高的应用，由于其长时间、不间断地大量占用CPU资源，那么对CPU的争夺将导致性能问题。</li><li>异常：对Java应用来说，异常的捕获和处理是非常消耗资源的。</li><li>数据库：大部分应用程序都离不开数据库，而应用程序可能需要等待数据库操作完成或者返回请求的结果集。</li><li>锁竞争：对高并发程序来说，激烈的锁竞争将会明显增加线程上下文切换的开销。</li><li>内存：一般来说，只要应用程序设计合理，内存在读写速度上不太可能成为性能瓶颈。除非内存大小不足。</li></ul></div></font></div><div></div><h3>2. 性能调优的层次</h3><div>设计调优、代码调优、JVM调优、数据库调优、操作系统调优。</div><h4>2.1 设计调优</h4><h5>1 StringBuffer与StringBuilder</h5><div>由于String对象是不可变对象，因此，在需要对字符串进行修改操作时（如字符串连接、替换），String对象总是会生成新的对象，所以，其性能相对较差。为此，JDK专门提供了用于创建和修改字符串的工具，这就是StringBuffer和StringBuilder类。<br></div><div>一旦String对象实例生成，就不可能再被改变。如String result = "String"+"end"+"String"+"append";首先，由"String"和”end"两个字符串生成"Stringend"对象，然后依次生成"StringendString"和"StringendStringappend"对象。<br></div><div>对于上面的静态字符串的连接操作，Java在编译时会进行彻底的优化，将多个连接操作的字符串在编译时合并成一个单独的长字符串。反而使用StringBuilder性能却没有静态字符串连加性能好。</div><div><br></div><div>String加法操作虽然会被优化，但编译器没有那么聪明，所以对于String操作，尽量少用。</div><div>StringBuffer和StringBuilder区别：</div><div>StringBuffer对几乎所有的方法做了同步，而StringBuilder几乎没有，在无需考虑线程安全的情况下可以使用性能相对较好的StringBuilder，但若系统有线程安全要求，只能选择StringBuffer。<br></div><div>StringBuffer和StringBuilder使用二者时注意：</div><div>无论是StringBuffer还是StringBuilder，初始化时可以设置一个容量参数，默认是16个字节。数组大小为16。在追加字符串时，如果需要容量超过实际char数组长度，数组会扩容，扩容步骤：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="typ">int</span><span class="pln"> newCapacity </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">value</span><span class="pun">.</span><span class="pln">length </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">2</span><span class="pun">;</span><span class="pln">          </span><span class="com">//容量翻倍</span></code></li><li class="L1"><code class="language-c"><span class="pln">value </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Arrays</span><span class="pun">.</span><span class="pln">copyOf</span><span class="pun">(</span><span class="pln">value</span><span class="pun">,</span><span class="pln">newCapacity</span><span class="pun">);</span><span class="pln">    </span><span class="com">//将原数组内容重新复制到重新创建的newCapacity大小的新数组中</span></code></li></ol></pre></div><div>所以，如果能够预选评估StringBuilder或StringBuffer的大小，将能够有效地节省这些操作，从而提高系统的性能。</div></div><div><br></div><h5>2 Collecation</h5><h6>list接口</h6><div>list接口的实现有3种：ArrayList、Vector和LinkedList。</div><div>ArrayList和Vector使用了数组实现，几乎使用了相同的算法，它们的唯一区别是对多线程的支持。ArrayList没有对任何一个方法做线程同步，因此不是线程安全的。Vector中绝大部分方法都做了线程同步，是一种线程安全的实现。<br></div><div>LinkedList使用了循环双向链表数据结构。LinkedList链表由一系列表项连接而成。一个表项总是包含3个部分：元素内容、前驱表项和后驱表项。</div><div><br></div><div>只有当ArrayList的容量大小超过当前数组大小时，才需要扩容。扩容大小=原始容量*1.5倍。新创建一个扩容大小的数组，将旧数组所有元素重新拷贝到新的数组中。因此，合理的数组大小有助于减少数组扩容的次数，从而提高系统性能。</div><div><br></div><div>默认情况下，ArrayList数组的初始值大小为10，每次扩容新数组大小设置成原大小的1.5倍。</div><div><br></div><div>基于数组的，在任意位置插入或删除元素性能相对低下，在数组的任意位置插入元素，必须导致在该位置后的所有元素需要重新排列，元素靠前更性能底下。</div><div><br></div><div>基于ForEach循环(for(String str:list))、迭代器循环(for(Iterator iterator=list.iterator();iterator.hasNext()))，三者性能差不多，编译器编译代码时会将ForEach循环作为地带操作。但基于for循环(for(int i=0;i&lt;list.size();i++))通过随机访问遍历列表时候，LinkedList性能很差，因为对LinkedList进行随机访问时，总会进行一次列表的遍历操作。</div><div><br></div><div>在读多写少的高并发环境中，使用CopyOnWriteArrayList可以提高系统的性能。但是，在读少写多的场合，CopyOnWriteArrayList性能不如Vector。<br></div><h6>map接口</h6><div>map接口的实现有：Hashtable、HashMap、LinkedHashMap和TreeMap。</div><div><div><br></div></div><div>1. HashMap/Hashtable<br></div><div><br></div><div><div>Hashtable与HashMap区别：</div><div><ol style="margin-bottom: 0px;"><li><span style="line-height: 1.6;">HashMap几乎可以等价于Hashtable，Hashtable大部分方法做了同步，HashMap没有，因此，HashMap不是线程安全的。</span>Java 5提供了ConcurrentHashMap，它是HashTable的替代，比HashTable的扩展性更好。<br></li><li><span style="line-height: 1.6;">Hashtable不允许key或者value使用null值，而HashMap可以。</span></li><li><span style="line-height: 1.6;">在内部算法上，他们对key的hash算法和hash值到内存索引的映射算法不同。</span></li></ol></div></div><div><br></div><div>数据存储形式都一样，如下：</div><div><br></div><div>HashMap底层数据结构是数组，将value放到指定数组索引下有个算法：1. key.hashCode()获得数值，2.使用hash(数值)取得一个hash值，3. 将hash值与数组长度length做&amp;操作获取到数组索引，通过数组下标取得对应的值。</div><div>但数组索引肯定会冲突啊，即肯定会出现hash值相同情况，需要存放到HashMap中的两个元素1和2，通过hash计算后，发现对应在内存中的同一个地址。此时，HashMap又会如何处理以保证数据可以完整存放并正常工作呢？</div><div><br></div><div>HashMap底层实现使用数组，数组元素又使用Entry类的对象构成的链表。HashMap内部维护着一个Entry数组，每一个Entry表项包括key、value、hash值和next几项。其中next指向的是另外一个Entry。HashMap的put()方法，当put()操作有冲突时，新的Entry依然会被安放在对应的索引下标内，为保证旧值都不丢失，新的Entry的next指向旧值。所以HashMap实际上是一个链表的数组。</div><div><br></div><div>优化HashMap的性能：</div><div>如果key.hashCode()或者hash(数值)方法实现的足够好，尽量减少冲突的产生，HashMap的操作几乎等价于对数组的随机访问操作。单弱较差，在大量冲突发生的情况下，HashMap就退化为几个链表，对Hashmap的操作等价于遍历链表，性能很差。</div><div><br></div><div>影响HashMap性能的还有它的容量参数。HashMap也是数组结构。HashMap构造函数提供了两个参数：初始容量和负载因子，初始容量即数组的大小，默认为16，扩容时，也一样，大小*2，负载因子又叫填充比，是介于0—1之间的浮点数，他决定了HashMap在扩容前其内部数组的填充度。默认为0.75。所以默认的HashMap扩容前的容量为16*0.75=12个。负载因子可以设置成&gt;1的数，但若&gt;1，必然会产生大量冲突，无疑是往10个口袋中放15个物品。所以当HashMap的实际大小超过threshold=初始容量*负载因子时，HashMap便会进行扩容。</div><div><br></div><div>2. LinkedHashMap</div><div>HashMap性能表现不错，但有个缺点是它的无序性，被存入到HashMap的元素，在遍历HashMap时，其输出是无序的。如果希望元素保存输入时的顺序，则需要使用LinkedHashMap替代。</div><div>LinkedHashMap继承自HashMap，它具备HashMap的高性能，同时，LinkedHashMap又在内部增加了一个链表，用以存放元素的顺序。因此，LinkedHashMap可以简单地理解为一个维护了元素次序表的HashMap。</div><div>LinkedHashMap可以提供：元素插入时的顺序和最近访问的顺序两种。构造方法包括3个参数：初始化容量、负载因子和排序类型，当排序类型为true时，按元素最近访问时间排序；为false时，按照插入顺序排序。默认为false。<br></div><div>LinkedHashMap通过继承HashMap.Entry类，实现了LinkedHashMap.Entry，为HashMap.Entry增加了before和after属性用以记录某一表项的前驱和后继Entry，每个Entry2表项的after指向其后继元素Entryn，而Entryn表项的before指向其前去元素Entry2，从而构成了循环链表。</div><div><br></div><div>3. TreeMap</div><div>TreeMap和HashMap完全不同，内部实现是基于红黑树，红黑树是一种平衡查找树，TreeMap又实现了SortedMap接口，他可以对元素进行排序，put进去的，默认出来就是按Key排序，若按value排序，可使用Comparable或Comparator两种方式，专门为排序而生，所以要对集合做排序，建议使用TreeMap。</div><div><br></div><div>5. ConcurrentHashMap</div><div><div>ConcurrentHashMap具体是怎么实现线程安全的呢，肯定不可能是每个方法加synchronized，那样就变成了HashTable。ConcurrentHashMap代码中引入了一个“分段锁”的概念，具体可以理解为把一个大的Map拆分成N个小的HashTable，将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问，能够实现真正的并发访问。构造方法比HashMap多了一个N参数，根据segmentFor(hash(key.hashCode()))的值来决定把key放到哪个HashTable中。</div><div>在ConcurrentHashMap中，就是把Map分成了N个Segment，put和get的时候，都是现根据key.hashCode()算出放到哪个Segment中。</div></div><h6>set接口</h6><div>Set集合中的元素是不能重复的。主要有：HashSet、LinkedHashSet和TreeSet。所有对Set的实现，都只是对应的Map的一种封装而已。以HashSet为例，其内部维护一个HashMap对象，所有对Set的实现，都委托HashMap对象完成。</div><h6>RandomAccess接口</h6><div>RandomAccess接口只是一个标志接口，本身没有提供任何方法，此接口的主要目标是标识那些可支持快速随机访问的List实现。任何一个基于数组的List实现都实现了RandomAccess接口，而基于链表的实现则都没有。if(list instanceof RandomAccess){for循环}else{ForEach循环/迭代循环}。</div><div><br></div><h5>3 改善性能的技巧</h5><div><ol><li>慎用异常</li><li>局部变量的访问速度远远高于类的成员变量。调用方法时传递的参数以及调用中创建的局部变量都保存在栈中，速度较快。其他变量，如静态变量、实例变量等都在堆中创建，速度较慢。</li><li><div><div>用位运算来代替乘法、除法以及取模</div></div></li><li><div>对于数组复制，建议使用System.arraycopy()函数，native函数性能要优于普通的函数。</div></li></ol></div><h5>4 多线程</h5><h6>线程的生命周期</h6><div><div><img border="0" src="All in_files/66104525.png"></div></div><div>1. 新生状态</div><div><div>创建一个线程，未调用start()方法，该线程对象就处于新生状态。处于新生状态的线程有自己的内存空间，通过调用start方法进入就绪状态（runnable）。</div><div>注意：不能对已经启动的线程再次调用start()方法，否则会抛异常。</div><div>2. 就绪状态</div></div><div><div>处于就绪状态的线程已经具备了运行条件，但还没有分配到CPU，处于线程就绪队列，等待系统为其分配CPU。</div></div><div>3. 运行状态</div><div><div>处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。处于就绪状态的线程，如果获得了cpu的调度，就会从就绪状态变为运行状态。如果该线程失去了cpu资源，就会又从运行状态变为就绪状态。也可以对在运行状态的线程调用yield()方法，它就会让出cpu资源，再次变为就绪状态。</div></div><div><div>4. 阻塞状态</div><div>处于运行状态的线程在某些情况下，如执行了sleep（睡眠）方法，或等待I/O设备等资源，将让出CPU并暂时停止自己的运行，进入阻塞状态。&nbsp;</div><div>在阻塞状态的线程不能进入就绪队列。只有当引起阻塞的原因消除时，如睡眠时间已到，或等待的I/O设备空闲下来，线程便转入就绪状态，重新到就绪队列中排队等待，被系统选中后从原来停止的位置开始继续运行。</div><div>5、死亡状态</div><div>当线程的run()方法执行完，或者被强制性地终止，就认为它死去。线程一旦死亡，就不能复生。 如果在一个死去的线程上调用start()方法，会抛异常。</div></div><h6>同步关键字synchronized、wait、notify方法使用</h6><div><div>当程序运行到非静态的synchronized同步方法上时，自动获得与正在执行代码类的当前实例（this实例）有关的锁。</div><div>一个对象只有一个锁。所以，如果一个线程获得该锁，就没有其他线程可以获得锁，直到第一个线程释放（或返回）锁。这也意味着任何其他线程都不能进入该对象上的synchronized方法或代码块，直到该锁被释放。</div></div><div><br></div><div><div>要同步静态方法，需要一个用于整个类对象的锁，这个对象就是这个类（XXX.class)。</div><div>例如：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> synchronized </span><span class="typ">int</span><span class="pln"> setName</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> name</span><span class="pun">){</span></code></li><li class="L1"><code class="language-c"><span class="pln">      </span><span class="typ">Xxx</span><span class="pun">.</span><span class="pln">name </span><span class="pun">=</span><span class="pln"> name</span><span class="pun">;</span></code></li><li class="L2"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div></div><div>等价于<br></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> setName</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> name</span><span class="pun">){</span></code></li><li class="L1"><code class="language-c"><span class="pln">      synchronized</span><span class="pun">(</span><span class="typ">Xxx</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">){</span></code></li><li class="L2"><code class="language-c"><span class="pln">            </span><span class="typ">Xxx</span><span class="pun">.</span><span class="pln">name </span><span class="pun">=</span><span class="pln"> name</span><span class="pun">;</span></code></li><li class="L3"><code class="language-c"><span class="pln">      </span><span class="pun">}</span></code></li><li class="L4"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></div></div><div>子线程循环10次，接着主线程循环100次，接着又回到<span style="font-size: 10.5pt; line-height: 1.5;">子线程循环10次，接着主线程循环100次程序：</span><br></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">package com</span><span class="pun">.</span><span class="pln">itcase</span><span class="pun">.</span><span class="pln">thread</span><span class="pun">;</span></code></li><li class="L1"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">TraditionalThreadSynchronizedTest2</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-c"><span class="pln">  </span><span class="com">/**</span></code></li><li class="L3"><code class="language-c"><span class="com">  * 让output1和output2互斥</span></code></li><li class="L4"><code class="language-c"><span class="com">   * </span></code></li><li class="L5"><code class="language-c"><span class="com">   * @param args</span></code></li><li class="L6"><code class="language-c"><span class="com">  */</span></code></li><li class="L7"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">TraditionalThreadSynchronizedTest2</span><span class="pun">().</span><span class="pln">init</span><span class="pun">();</span></code></li><li class="L9"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L0"><code class="language-c"><span class="pln"> </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> init</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">   final </span><span class="typ">Business</span><span class="pln"> business </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Business</span><span class="pun">();</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Thread</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">     </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> run</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-c"><span class="pln">       </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="lit">50</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-c"><span class="pln">         business</span><span class="pun">.</span><span class="pln">sub</span><span class="pun">(</span><span class="pln">i</span><span class="pun">);</span></code></li><li class="L6"><code class="language-c"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L7"><code class="language-c"><span class="pln">     </span><span class="pun">};</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">}.</span><span class="pln">start</span><span class="pun">();</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="lit">50</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-c"><span class="pln">     business</span><span class="pun">.</span><span class="pln">main</span><span class="pun">(</span><span class="pln">i</span><span class="pun">);</span></code></li><li class="L1"><code class="language-c"><span class="pln">   </span><span class="pun">}</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L3"><code class="language-c"><span class="pln"> </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Business</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="com">//不确定子线程和主线程哪个先执行，假如是先到主线程，主线程发现不是它执行，它就wait，这个时候子线程开始执行，执行完以后，又再次进它的方法，发现不该它执行了，它就等。主线程还不知道该它了，这个时候应该把大哥唤醒。同理，大哥唤醒孩子</span></code></li><li class="L5"><code class="language-c"><span class="pln">   </span><span class="kwd">private</span><span class="pln"> boolean beShouldSub </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> synchronized </span><span class="kwd">void</span><span class="pln"> sub</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> i</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-c"><span class="pln">      </span><span class="kwd">while</span><span class="pun">(!</span><span class="pln">beShouldSub</span><span class="pun">){</span></code></li><li class="L8"><code class="language-c"><span class="pln">       </span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-c"><span class="pln">         </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">wait</span><span class="pun">();</span><span class="com">//不是它，它就等</span></code></li><li class="L0"><code class="language-c"><span class="pln">       </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">InterruptedException</span><span class="pln"> e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">         e</span><span class="pun">.</span><span class="pln">printStackTrace</span><span class="pun">();</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L3"><code class="language-c"><span class="pln">     </span><span class="pun">}</span></code></li><li class="L4"><code class="language-c"><span class="pln">     </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="lit">10</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-c"><span class="pln">       </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Sub thread sequence of "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> i </span><span class="pun">+</span><span class="pln"> </span><span class="str">" ,loop of "</span></code></li><li class="L6"><code class="language-c"><span class="pln">           </span><span class="pun">+</span><span class="pln"> j</span><span class="pun">);</span></code></li><li class="L7"><code class="language-c"><span class="pln">     </span><span class="pun">}</span></code></li><li class="L8"><code class="language-c"><span class="pln">     beShouldSub </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span></code></li><li class="L9"><code class="language-c"><span class="pln">     </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">notify</span><span class="pun">();</span></code></li><li class="L0"><code class="language-c"><span class="pln">   </span><span class="pun">}</span></code></li><li class="L1"><code class="language-c"><span class="pln">   </span><span class="kwd">public</span><span class="pln"> synchronized </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> i</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-c"><span class="pln">     </span><span class="kwd">while</span><span class="pun">(</span><span class="pln">beShouldSub</span><span class="pun">){</span></code></li><li class="L3"><code class="language-c"><span class="pln">        </span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-c"><span class="pln">         </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">wait</span><span class="pun">();</span><span class="com">//不是它，它就等</span></code></li><li class="L5"><code class="language-c"><span class="pln">       </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">InterruptedException</span><span class="pln"> e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-c"><span class="pln">         e</span><span class="pun">.</span><span class="pln">printStackTrace</span><span class="pun">();</span></code></li><li class="L7"><code class="language-c"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L8"><code class="language-c"><span class="pln">     </span><span class="pun">}</span></code></li><li class="L9"><code class="language-c"><span class="pln">     </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="lit">100</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-c"><span class="pln">        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"main thread sequence of "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> i</span></code></li><li class="L1"><code class="language-c"><span class="pln">            </span><span class="pun">+</span><span class="pln"> </span><span class="str">" ,loop of "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> j</span><span class="pun">);</span></code></li><li class="L2"><code class="language-c"><span class="pln">      </span><span class="pun">}</span></code></li><li class="L3"><code class="language-c"><span class="pln">     beShouldSub </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span></code></li><li class="L4"><code class="language-c"><span class="pln">      </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">notify</span><span class="pun">();</span></code></li><li class="L5"><code class="language-c"><span class="pln">   </span><span class="pun">}</span></code></li><li class="L6"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L7"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div>notify只能唤醒一个线程，其他等待的线程仍然处于wait状态，使用notifyAll()来唤醒所有正在等待该锁的线程。</div></div><h6>interrupt()、stop()、join()、suspend()、resume()、yield()、守护线程</h6><div><ul><li>interrupt()优雅停止线程，仅仅是在当前线程中打了一个停止的标记，并不是真正的停止线程。待线程内执行完后停止。<br></li></ul></div><div><div>判断线程是否是停止状态，Thread类提供了两个方法：</div><div>1.this.interrupted()测试当前线程是否已经中断<span style="line-height: 1.6;">&nbsp; &nbsp; 2.this.isInterrupted()测试线程是否已经中断。</span></div></div><div><ul><li>stop()暴露停止线程</li><li>join()让当前线程阻塞等待其他线程执行完毕，一般放在主线程里，等待子线程执行完毕。</li><li>suspend()暂停线程</li><li>resume()继续执行线程</li><li>yield()放弃当前CPU资源，让给其他的任务去占用CPU执行时间</li><li>为线程.setDaemon(true);将线程设置成守护线程</li></ul></div><h6>ThreadLocal实现在当前线程范围任意地方调用都可以</h6><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ThreadLocalSharedData</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">ThreadLocal</span><span class="pun">&lt;</span><span class="typ">Integer</span><span class="pun">&gt;</span><span class="pln"> threadData </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ThreadLocal</span><span class="pun">&lt;</span><span class="typ">Integer</span><span class="pun">&gt;();</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">2</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-c"><span class="pln">     </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Thread</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Runnable</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-c"><span class="pln">        </span><span class="lit">@Override</span></code></li><li class="L6"><code class="language-c"><span class="pln">       </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> run</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-c"><span class="pln">         </span><span class="typ">int</span><span class="pln"> data </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Random</span><span class="pun">().</span><span class="pln">nextInt</span><span class="pun">();</span><span class="com">// 随机一个整数</span></code></li><li class="L8"><code class="language-c"><span class="pln">         </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="typ">Thread</span><span class="pun">.</span><span class="pln">currentThread</span><span class="pun">().</span><span class="pln">getName</span><span class="pun">()</span></code></li><li class="L9"><code class="language-c"><span class="pln">              </span><span class="pun">+</span><span class="pln"> </span><span class="str">" has put data:"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> data</span><span class="pun">);</span></code></li><li class="L0"><code class="language-c"><span class="pln">         threadData</span><span class="pun">.</span><span class="typ">set</span><span class="pun">(</span><span class="pln">data</span><span class="pun">);</span></code></li><li class="L1"><code class="language-c"><span class="pln">         </span><span class="kwd">new</span><span class="pln"> A</span><span class="pun">().</span><span class="pln">get</span><span class="pun">();</span></code></li><li class="L2"><code class="language-c"><span class="pln">          </span><span class="kwd">new</span><span class="pln"> B</span><span class="pun">().</span><span class="pln">get</span><span class="pun">();</span></code></li><li class="L3"><code class="language-c"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L4"><code class="language-c"><span class="pln">     </span><span class="pun">}).</span><span class="pln">start</span><span class="pun">();</span></code></li><li class="L5"><code class="language-c"><span class="pln">   </span><span class="pun">}</span></code></li><li class="L6"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L7"><code class="language-c"><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> A </span><span class="pun">{</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> get</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-c"><span class="pln">     </span><span class="typ">int</span><span class="pln"> data </span><span class="pun">=</span><span class="pln"> threadData</span><span class="pun">.</span><span class="pln">get</span><span class="pun">();</span></code></li><li class="L0"><code class="language-c"><span class="pln">      </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"A from "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="typ">Thread</span><span class="pun">.</span><span class="pln">currentThread</span><span class="pun">().</span><span class="pln">getName</span><span class="pun">()</span></code></li><li class="L1"><code class="language-c"><span class="pln">          </span><span class="pun">+</span><span class="pln"> </span><span class="str">" has put data:"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> data</span><span class="pun">);</span></code></li><li class="L2"><code class="language-c"><span class="pln">   </span><span class="pun">}</span></code></li><li class="L3"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L4"><code class="language-c"><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> B </span><span class="pun">{</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> get</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-c"><span class="pln">     </span><span class="typ">int</span><span class="pln"> data </span><span class="pun">=</span><span class="pln"> threadData</span><span class="pun">.</span><span class="pln">get</span><span class="pun">();</span></code></li><li class="L7"><code class="language-c"><span class="pln">      </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"B from "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="typ">Thread</span><span class="pun">.</span><span class="pln">currentThread</span><span class="pun">().</span><span class="pln">getName</span><span class="pun">()</span></code></li><li class="L8"><code class="language-c"><span class="pln">          </span><span class="pun">+</span><span class="pln"> </span><span class="str">" has put data:"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> data</span><span class="pun">);</span></code></li><li class="L9"><code class="language-c"><span class="pln">   </span><span class="pun">}</span></code></li><li class="L0"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L1"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><br></div><div><h6>volatile</h6><div>在Java中，每一个线程有一块工作内存区，其中存放着被所有线程共享的主内存中的变量的值的拷贝。当线程执行时，它在自己的工作内存中操作这些变量。为了存取一个共享的变量，一个线程通常先获取锁定并且清除它的工作内存区，这保证该共享变量从所有线程的共享内存区正确地装入到线程的工作内存区，当线程解锁时保证该工作内存区中变量的值写回到共享内存中。<br></div><div><div>由于每个线程都有自己的工作内存区，因此当一个线程改变自己的工作内存中的数据时，对其他线程来说，可能是不可见的。为此，可以使用volatile关键字迫使所有线程都读写主内存中的对应变量，从而使得volatile变量在多线程间可见。</div><div>声明为volatile的变量可以做一下保证：</div><div><ol style="margin-bottom: 0px;"><li>其他线程对变量的修改，可以即时反应在当前线程中。</li><li>确保当前线程对volatile变量的修改，能即时写回共享主内存中，并被其他线程所见。</li><li>使用volatile声明的变量，编译器会保证其有序性。</li></ol></div></div></div><h6>CAS无锁实现原理</h6></div><div><div><b>为什么要用CAS</b></div><div>在多线程高并发编程的时候，最关键的问题就是保证临界区的对象的安全访问。通常是用加锁来处理，其实加锁本质上是将并发转变为串行来实现的，势必会影响吞吐量。而且线程的数量是有限的，依赖于操作系统，而且线程的创建和销毁带来的性能损耗是不可以忽略掉的。虽然现在基本都是用线程池来尽可能的降低不断创建线程带来的性能损耗。</div><div>对于并发控制而言，锁是一种悲观策略，会阻塞线程执行。而无锁是一种乐观策略，它会假设对资源的访问时没有冲突的，既然没有冲突就不需要等待，线程不需要阻塞。那多个线程共同访问临界区的资源怎么办呢，无锁的策略采用一种比较交换技术CAS（compare and swap）来鉴别线程冲突，一旦检测到冲突，就充实当前操作指导没有冲突为止。<span style="line-height: 1.6;">与锁相比，CAS使用无锁的方式没有锁竞争带来的开销，也没有线程间频繁调度带来的开销，他比基于锁的方式有更优越的性能，所以在目前被广泛应用，我们在程序设计时也可以适当的使用.</span></div><div><br></div><div><div><b>CAS算法</b></div><div>一个CAS方法包含三个参数CAS(V,E,N)。V表示要更新的变量，E表示预期的值，N表示新值。只有当V的值等于E时，才会将V的值修改为N。如果V的值不等于E，说明已经被其他线程修改了，当前线程可以放弃此操作，也可以再次尝试次操作直至修改成功。基于这样的算法，CAS操作即使没有锁，也可以发现其他线程对当前线程的干扰（临界区值的修改），并进行恰当的处理。</div><div><br></div><div><span style="line-height: 1.6;">volatile实现了JMM中的可见性。使得对临界区资源的修改可以马上被其他线程看到，它是通过添加内存屏障实现的。</span><br></div><div><br></div><div>初次接触CAS的人一般都是通过AtomicInteger这个类来了解的，这里讲其CAS原理也借助这个类。</div><div>查看一下AtomicInteger的源码：</div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-go"><span class="kwd">private</span><span class="pln"> </span><span class="kwd">volatile</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> value</span><span class="pun">;</span></code></li><li class="L1"><code class="language-go"><span class="com">//此处省略一万字代码</span></code></li><li class="L2"><code class="language-go"><span class="com">/**</span></code></li><li class="L3"><code class="language-go"><span class="com"> * Atomically sets to the given value and returns the old value.</span></code></li><li class="L4"><code class="language-go"><span class="com"> */</span></code></li><li class="L5"><code class="language-go"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> getAndSet</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> newValue</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-go"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(;;)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-go"><span class="pln">        </span><span class="kwd">int</span><span class="pln"> current </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">();</span></code></li><li class="L8"><code class="language-go"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">compareAndSet</span><span class="pun">(</span><span class="pln">current</span><span class="pun">,</span><span class="pln"> newValue</span><span class="pun">))</span></code></li><li class="L9"><code class="language-go"><span class="pln">            </span><span class="kwd">return</span><span class="pln"> current</span><span class="pun">;</span></code></li><li class="L0"><code class="language-go"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L1"><code class="language-go"><span class="pun">}</span></code></li><li class="L6"><code class="language-go"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> compareAndSet</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> expect</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> update</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-go"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">unsafe</span><span class="pun">.</span><span class="pln">compareAndSwapInt</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">,</span><span class="pln"> valueOffset</span><span class="pun">,</span><span class="pln"> expect</span><span class="pun">,</span><span class="pln"> update</span><span class="pun">);</span></code></li><li class="L8"><code class="language-go"><span class="pun">}</span></code></li></ol></pre></div><div><div>通过这段代码可知：&nbsp;</div><div>- AtomicInteger中真正存储数据的是value变量，而改变量是被volatile修饰的，保证了线程直接的可见性。</div><div>- getAndSet方法通过一个死循环不断尝试赋值操作。而真正的赋值操作交给了unsafe类来实现。</div></div></div><div><div>Unsafe类是CAS实现的核心。&nbsp;</div><div>从名字可知，这个类标记为不安全的，JDK作者不希望用户使用这个类，所以它的他的构造方法如下：</div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-go"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">Unsafe</span><span class="pln"> getUnsafe</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-go"><span class="pln">    </span><span class="typ">Class</span><span class="pln"> var0 </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Reflection</span><span class="pun">.</span><span class="pln">getCallerClass</span><span class="pun">();</span></code></li><li class="L2"><code class="language-go"><span class="pln">    </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">var0</span><span class="pun">.</span><span class="pln">getClassLoader</span><span class="pun">()</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-go"><span class="pln">        </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SecurityException</span><span class="pun">(</span><span class="str">"Unsafe"</span><span class="pun">);</span></code></li><li class="L4"><code class="language-go"><span class="pln">    </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-go"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> theUnsafe</span><span class="pun">;</span></code></li><li class="L6"><code class="language-go"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L7"><code class="language-go"><span class="pun">}</span></code></li></ol></pre></div><div>不允许哪里使用Unsafe。由于CAS编码稍微复杂，而且jdk作者本身也不希望你直接使用unsafe来进行代码的编写，所以如果不能深刻理解CAS以及unsafe还是要慎用，使用一些别人已经实现好的无锁类或者框架就好了。</div></div><div>看看<span class="kwd" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13px; line-height: 18px; white-space: pre; background-color: rgb(247, 247, 249);">unsafe</span><span class="pun" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13px; line-height: 18px; white-space: pre; background-color: rgb(247, 247, 249);">.</span><span class="pln" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13px; line-height: 18px; white-space: pre; background-color: rgb(247, 247, 249);">compareAndSwapInt</span><span class="pun" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13px; line-height: 18px; white-space: pre; background-color: rgb(247, 247, 249);">(</span><span class="kwd" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13px; line-height: 18px; white-space: pre; background-color: rgb(247, 247, 249);">this</span><span class="pun" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13px; line-height: 18px; white-space: pre; background-color: rgb(247, 247, 249);">,</span><span class="pln" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13px; line-height: 18px; white-space: pre; background-color: rgb(247, 247, 249);"> valueOffset</span><span class="pun" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13px; line-height: 18px; white-space: pre; background-color: rgb(247, 247, 249);">,</span><span class="pln" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13px; line-height: 18px; white-space: pre; background-color: rgb(247, 247, 249);"> expect</span><span class="pun" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13px; line-height: 18px; white-space: pre; background-color: rgb(247, 247, 249);">,</span><span class="pln" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13px; line-height: 18px; white-space: pre; background-color: rgb(247, 247, 249);"> update</span><span class="pun" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13px; line-height: 18px; white-space: pre; background-color: rgb(247, 247, 249);">);</span><span style="line-height: 1.6;">方法</span></div><div><span style="line-height: 1.6;">参数1</span><span style="line-height: 1.6;">&nbsp; &nbsp; 当前对象</span></div><div><span style="line-height: 1.6;">参数2</span><span style="line-height: 1.6;">&nbsp; &nbsp;&nbsp;</span>offset是对象内的偏移量（其实就是一个字段到对象头部的偏移量，通过这个偏移量可以快速定位字段）</div><div>参数3 &nbsp; &nbsp;期望值</div><div>参数4 &nbsp; &nbsp;要设置的值。</div><div><br></div><div>这里Unsafe封装了一些类似于C++中指针的东西，该类中的方法都是native的，而且是原子的操作。原子性是通过CAS原子指令实现的，由处理器保证。</div><div>java.util.concurrent.atomic下所有包都采用CAS来实现无锁。<br></div></div><div><h6>java.util.concurrent包</h6></div><div><div>java.util.concurrent.atomic包</div></div><div>AtomicBoolean、AtomicInteger、AtomicLong等，提供了原子增量方法。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">class</span><span class="pln"> </span><span class="typ">Counter</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">AtomicInteger</span><span class="pln"> count </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">AtomicInteger</span><span class="pun">();</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> increment</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">   count</span><span class="pun">.</span><span class="pln">incrementAndGet</span><span class="pun">();</span></code></li><li class="L4"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L5"><code class="language-c"><span class="pln"> </span><span class="com">// 使用AtomicInteger之后，不需要加锁，也可以实现线程安全。</span></code></li><li class="L6"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> getCount</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-c"><span class="pln">   </span><span class="kwd">return</span><span class="pln"> count</span><span class="pun">.</span><span class="pln">get</span><span class="pun">();</span></code></li><li class="L8"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L9"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div></div><div><div>java.util.concurrent.locks</div></div><div>提供Lock锁和Qt的QMutex一样、ReadWriteLock读写锁。Condition、Semaphore信号量</div><div><br></div><div><div>互斥锁Lock是一个接口。提供了无条件的、可轮询的、定时的、可中断的锁获取操作。ReentrantLock(重入锁)是Lock的实现。</div><div>读写锁 ReadWriteLock，维护了一对相关的锁，一个用于只读操作，一个用于写入操作。ReentrantReadWriteLock是ReadWriteLock的实现。</div><div><br></div><div>互斥锁一次只允许一个线程访问共享数据，哪怕进行的是只读操作；读写锁允许对共享数据进行更高级别的并发访问：对于写操作，一次只有一个线程（write线程）可以修改共享数据，对于读操作，允许任意数量的线程同时进行读取。</div><div><br></div><div>Lock与synchronized 的比较：</div><div>1：Lock使用起来比较灵活，但是必须有释放锁的动作；</div><div>2：Lock必须手动释放和开启锁，synchronized 不需要；</div><div>3：Lock只适用于代码块锁，而synchronized 对象之间的互斥关系；</div><div><br></div><div>公平锁：锁的获取是有序的，等待时间最长的线程最有机会获取锁。否则是不公平锁。</div><div><br></div><div>ReentrantLock通过在构造方法中可指定是否公平，不指定默认为非公平锁。公平锁是通过一个等待队列来实现的公平锁。</div><div>ReentrantReadWriteLock也是基于AbstractQueuedSynchronizer等待队列实现的公平锁和不公平锁，和ReentrantLock一样。</div><div><br></div><div>JDK1.5之后的并发包中提供的CountDownLatch也可以实现join的这个功能，并且比join的功能更多。CountDownLatch的构造函数接收一个int类型的参数作为计数器，如果你想等待N个点完成，这里就传入N。当我们调用一次CountDownLatch的countDown方法时，N就会减1，CountDownLatch的await会阻塞当前线程，直到N变成零。由于countDown方法可以用在任何地方，所以这里说的N个点，可以是N个线程，也可以是1个线程里的N个执行步骤。用在多个线程时，你只需要把这个CountDownLatch的引用传递到线程里。</div></div><div><br></div><div><div>BlockingQueue一个指定长度的队列，如果队列满了，添加新元素的操作会被阻塞等待，直到有空位为止。同样，当队列为空时候，请求队列元素的操作同样会阻塞等待，直到有可用元素为止。DelayQueue，时间到了才出队列。</div><div>LinkedBlockingDeque栈是“后入先出”的结构，每次操作的是栈顶，而队列是“先进先出”的结构，每次操作的是队列头。</div></div><div><br></div><div>java.util.concurrent.Executors</div><div><div>Java5提供5种类型的线程池，分别如下：</div><div>1.newCachedThreadPool-可变尺寸的线程池(缓存线程池)</div><div>2.newFixedThreadPool-固定大小的线程池</div><div>3.ScheduledThreadPool-调度线程池 这个池子里的线程可以按schedule依次delay执行，或周期执行。</div><div>4.SingleThreadExecutor-单例线程池 任意时间池中只能有一个线程；</div><div>5.自定义线程池--ThreadPoolExecutor</div></div><div><br></div><div>可返回值的任务必须实现Callable接口，类似的，无返回值的任务必须Runnable接口。<br></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">CallableFutureTest</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">MyCallable</span><span class="pln"> implements </span><span class="typ">Callable</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> name</span><span class="pun">;</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="typ">MyCallable</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> name</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-c"><span class="pln">     </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">name </span><span class="pun">=</span><span class="pln"> name</span><span class="pun">;</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L7"><code class="language-c"><span class="pln">   </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Object</span><span class="pln"> call</span><span class="pun">()</span><span class="pln"> throws </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-c"><span class="pln">     </span><span class="kwd">return</span><span class="pln"> name </span><span class="pun">+</span><span class="pln"> </span><span class="str">"任务返回的内容"</span><span class="pun">;</span></code></li><li class="L9"><code class="language-c"><span class="pln">   </span><span class="pun">}</span></code></li><li class="L0"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="lit">@SuppressWarnings</span><span class="pun">(</span><span class="str">"unchecked"</span><span class="pun">)</span></code></li><li class="L3"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> throws </span><span class="typ">ExecutionException</span><span class="pun">,</span></code></li><li class="L4"><code class="language-c"><span class="pln">      </span><span class="typ">InterruptedException</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="typ">CallableFutureTest</span><span class="pln"> test </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">CallableFutureTest</span><span class="pun">();</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="com">// 创建一个线程池</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="typ">ExecutorService</span><span class="pln"> pool </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Executors</span><span class="pun">.</span><span class="pln">newFixedThreadPool</span><span class="pun">(</span><span class="lit">2</span><span class="pun">);</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="com">// 创建两个有返回值的任务</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="typ">Callable</span><span class="pln"> c1 </span><span class="pun">=</span><span class="pln"> test</span><span class="pun">.</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">MyCallable</span><span class="pun">(</span><span class="str">"A"</span><span class="pun">);</span></code></li><li class="L0"><code class="language-c"><span class="pln">   </span><span class="typ">Callable</span><span class="pln"> c2 </span><span class="pun">=</span><span class="pln"> test</span><span class="pun">.</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">MyCallable</span><span class="pun">(</span><span class="str">"B"</span><span class="pun">);</span></code></li><li class="L1"><code class="language-c"><span class="pln">   </span><span class="com">// 执行任务并获取Future对象</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="typ">Future</span><span class="pln"> f1 </span><span class="pun">=</span><span class="pln"> pool</span><span class="pun">.</span><span class="pln">submit</span><span class="pun">(</span><span class="pln">c1</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="typ">Future</span><span class="pln"> f2 </span><span class="pun">=</span><span class="pln"> pool</span><span class="pun">.</span><span class="pln">submit</span><span class="pun">(</span><span class="pln">c2</span><span class="pun">);</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="com">// 从Future对象上获取任务的返回值，并输出到控制台</span></code></li><li class="L5"><code class="language-c"><span class="pln">   </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"&gt;&gt;&gt;"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> f1</span><span class="pun">.</span><span class="pln">get</span><span class="pun">().</span><span class="pln">toString</span><span class="pun">());</span></code></li><li class="L6"><code class="language-c"><span class="pln">   </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"&gt;&gt;&gt;"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> f2</span><span class="pun">.</span><span class="pln">get</span><span class="pun">().</span><span class="pln">toString</span><span class="pun">());</span></code></li><li class="L7"><code class="language-c"><span class="pln">   </span><span class="com">// 关闭线程池</span></code></li><li class="L8"><code class="language-c"><span class="pln">    pool</span><span class="pun">.</span><span class="pln">shutdown</span><span class="pun">();</span></code></li><li class="L9"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L0"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ThreadPoolTest</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="typ">ExecutorService</span><span class="pln"> threadPool </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Executors</span><span class="pun">.</span><span class="pln">newFixedThreadPool</span><span class="pun">(</span><span class="lit">3</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L3"><code class="language-c"><span class="pln">        </span><span class="kwd">for</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">5</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L4"><code class="language-c"><span class="pln">            final </span><span class="typ">int</span><span class="pln"> taskID </span><span class="pun">=</span><span class="pln"> i</span><span class="pun">;</span><span class="pln">  </span></code></li><li class="L5"><code class="language-c"><span class="pln">            threadPool</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Runnable</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L6"><code class="language-c"><span class="pln">                </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> run</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L7"><code class="language-c"><span class="pln">                    </span><span class="kwd">for</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">5</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L8"><code class="language-c"><span class="pln">                        </span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L9"><code class="language-c"><span class="pln">                            </span><span class="typ">Thread</span><span class="pun">.</span><span class="pln">sleep</span><span class="pun">(</span><span class="lit">20</span><span class="pun">);</span><span class="com">// 为了测试出效果，让每次任务执行都需要一定时间  </span></code></li><li class="L0"><code class="language-c"><span class="pln">                        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">InterruptedException</span><span class="pln"> e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L1"><code class="language-c"><span class="pln">                            e</span><span class="pun">.</span><span class="pln">printStackTrace</span><span class="pun">();</span><span class="pln">  </span></code></li><li class="L2"><code class="language-c"><span class="pln">                        </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L3"><code class="language-c"><span class="pln">                        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"第"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> taskID </span><span class="pun">+</span><span class="pln"> </span><span class="str">"次任务的第"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> i </span><span class="pun">+</span><span class="pln"> </span><span class="str">"次执行"</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L4"><code class="language-c"><span class="pln">                    </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L5"><code class="language-c"><span class="pln">                </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L6"><code class="language-c"><span class="pln">            </span><span class="pun">});</span><span class="pln">  </span></code></li><li class="L7"><code class="language-c"><span class="pln">        </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L8"><code class="language-c"><span class="pln">        threadPool</span><span class="pun">.</span><span class="pln">shutdown</span><span class="pun">();</span><span class="com">// 任务执行完毕，关闭线程池  </span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L0"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></div><div></div><div>Amino无锁算法框架、Kilim协程。</div><div><br></div><h5>5 JVM调优</h5><h6>Java虚拟机内存模型</h6><div>JVM虚拟机将其内存数据分为程序计数器、虚拟机栈、本地方法栈、Java堆和方法区等部分。</div><div><div><img border="0" src="All in_files/69799464.png"></div></div><div><ul><li>程序计数器用于存放下一条运行的指令；</li><li>虚拟机栈和本地方法栈用于存放函数调用堆栈信息；</li><li>Java堆用于存放Java程序运行时所需的对象等数据；</li><li>方法区用于存放程序的类元数据信息。<br></li></ul><div><br></div><div>程序计数器&nbsp; &nbsp;&nbsp;</div><div>每一个线程都有一个独立的程序计数器，当正在执行一个java方法，程序计数器记录的是正在执行的Java字节码地址；如果正在执行的是一个Native方法，则程序计数器为空；<br></div></div><div><br></div><div>Java虚拟机栈</div><div>Java虚拟机栈也是线程私有的内存空间，它和Java线程在同一时间创建，它保存方法的局部变量、部分结果，并参与方法的调用和返回。</div><div>在Hot Spot虚拟机中，可以使用-Xss参数来设置栈的大小。栈的大小直接决定了函数调用的可达深度。</div><div>如递归无限制的调一个方法做测试，可得出结论：可递归的深度和栈大小是决定的。栈越大，函数嵌套调用次数越多。</div><div>虚拟机栈在运行时使用一种叫做栈帧的数据结构保存上下文数据。在栈帧中，存放了方法的局部变量表（包括方法的参数和方法内的局部变量）、操作数栈、动态连接方法和返回地址等信息。每一个方法的调用都伴随着栈帧的入栈操作。相应地，方法的返回则表示栈帧的出栈操作。对于一个函数而言，它的参数越多，内部局部变量越多，它的栈帧就越大，其嵌套调用次数就会减少。局部变量表以“字”为单位进行内存划分，一个字为32位长度。对于long/double变量占2个字，其他类型占1个字。如果请求的栈深度大于最大可用的栈深度，抛出StackOverflowError；没有足够的内存空间来支持栈的扩展，则抛出OutOfMemoryError。</div><div><br></div><div>本地方法栈</div><div>本地方法栈是用于管理本地方法(C实现的)的调用，在SUN的Hot Spot虚拟机中，不区分本地方法栈和虚拟机栈。和虚拟机栈一样，它也会跑出StackOverflowError和OutOfMemoryError。</div><div><br></div><div>Java堆</div><div>Java堆，几乎所有对象和数组都是在堆中分配空间的，所有线程共享的。Java堆分为新生代和老年代两部分。新生代用于存放刚刚产生的对象和年轻的对象，如果对象一直没有被回收，生存的足够长，老年对象就会被移入老年代。</div><div>新生代又可细分为eden(出生地，大部分对象刚刚建立时，通常会存放在这里)、survivor space0(so或者from space)和survivor space1(s1或者to space)，s0和s1为survivor空间，译为幸存者，也就是至少经过一次垃圾回收后还得以幸存的。如果在幸存区的对象到了指定年龄仍未被回收，则有机会进入老年代(tenured)。</div><div>后面讲JVM GC算法时详细讲。</div><div><br></div><div>方法区</div><div>也是被JVM所有线程共享的。方法区主要保存的信息是类的元数据，包括类的完整信息（完整名称、父类信息，类型修饰符、类的接口表等）、常量池、方法信息（方法名、返回类型、方法参数等）。总之，方法区内保存的信息，大部分来自于class文件，是Java应用程序必不可少的重要数据。</div><div>在Hot Spot虚拟机中，方法区也称为永久区，是一块独立的内存空间。但GC也会回收永久区的，回收常量池、回收类元数据。如果常量池中的常量没有被任何地方引用，就可以被回收。</div><div>在现有的软件开发项目中，CGLIB和Javasist等动态字节码生成工具得到非常普遍的使用。当系统中需要生成大量动态类时，对持久化的压力会非常大。持久代若饱和，会抛出“java.lang.OutOfMemoryError:PermGen space”显示持久代溢出。</div><div><br></div><h6>JVM原理</h6><div><div><ol><li>每个Java虚拟机都由一个类加载器子系统负责加载程序中的类型（类和接口），并赋予唯一的名字，都有一个执行引擎负责执行被加载类中包含的指令。</li><li>每个Java虚拟机都包含方法区和堆，他们都被整个程序共享。Java虚拟机加载并解析一个类以后，将从类文件中解析出来的信息保存于方法区中。程序执行时创建的对象都保存在堆中。当一个线程被创建时，会被分配只属于他自己的PC寄存器和Java堆栈。当线程不调用本地方法时，PC寄存器中保存线程执行的下一条指令。Java堆栈保存了一个线程调用方法时的状态，包括本地变量、调用方法的参数、返回值、处理的中间变量。调用本地方法时的状态保存在本地方法堆栈中。</li><li>当Java程序创建一个类的实例或者数组时，都在堆中为新的对象分配内存。虚拟机中只有一个堆，所有的线程都共享他。Java堆栈由堆栈块组成。堆栈块包含Java方法调用的状态。当一个线程调用一个方法时，Java虚拟机会将一个新的块压到Java堆栈中，当这个方法运行结束时，Java虚拟机会将对应的块弹出并抛弃。</li><li>Java虚拟机不使用寄存器保存计算的中间结果，而是用Java堆栈在存放中间结果。</li></ol></div><div><div><img border="0" src="All in_files/34385868.png"></div></div><div>此图看出jvm内存结构</div><div>JVM内存结构主要包括两个子系统和两个组件。两个子系统分别是Classloader子系统和Executionengine(执行引擎)子系统；两个组件分别是Runtimedataarea(运行时数据区域)组件和Nativeinterface(本地接口)组件。</div><div><ul><li>Classloader子系统的作用：根据给定的全限定名类名(如java.lang.Object)（就是带包的类路径）来装载class文件的内容到JVM内存（Runtimedataarea）中的methodarea(方法区域)。</li><li>Executionengine子系统的作用：执行classes中的指令。</li><li>Nativeinterface组件：是其它编程语言交互的接口。当调用native方法的时候，就进入了一个全新的并且不再受虚拟机限制的世界，所以也很容易出现JVM无法控制的nativeheapOutOfMemory。</li><li>RuntimeDataArea组件：这就是我们常说的JVM的内存了。它主要分为五个部分：</li><ul><li>Heap(堆)：一个Java虚拟实例中只存在一个堆空间</li><li>MethodArea(方法区域)：被装载的class的信息存储在Methodarea的内存中。当虚拟机装载某个类型时，它使用类装载器定位相应的class文件，然后读入这个class文件内容并把它传输到虚拟机中。</li><li>Java Stack(java的栈)：虚拟机只会直接对Javastack执行两种操作：以帧为单位的压栈或出栈</li><li>Program Counter(程序计数器)：每一个线程都有它自己的PC寄存器，也是该线程启动时创建的。PC寄存器的内容总是指向下一条将被执行指令的地址</li><li>Native method stack(本地方法栈)：保存native方法进入区域的地址。</li></ul></ul></div></div><div><br></div><h6>常见参数设置</h6><div><ul><li>最大堆大小：-Xmx &nbsp; &nbsp;最大堆指的是新生代和老年代的大小和的最大值。</li><li>最小堆内存：-Xms &nbsp; &nbsp;启动JVM时，所占据的操作系统的内存大小。Java应用程序运行时，首先会被分配-Xms大小内存，尽可能在该内存下运行，当内存大小确实无法满足应用程序运行时，JVM才会向操作系统申请更多的内存。直到-Xms，若还无法满足，则抛出OutOfMemoryError异常。如果-Xms值较小，JVM为了保证系统尽可能在指定范围内运行，就会更加频繁地进行GC操作，以释放失效的内存空间。因此把-Xms值设置为-Xmx时，可以在系统运行初期减少GC的次数和耗时。</li><li>设置新生代：-Xmn &nbsp; &nbsp;设置较大的新生代会减少年老代的大小，新生代大小一般设置为整个堆空间的1/4到1/3左右。</li></ul></div><div>在Hot Spot虚拟机中，同样支持-XX:NewSize设置新生代的初始大小，-XX:MaxNewSize设置新生代的最大值，一般不用设置。</div><div><ul><li>设置持久代 &nbsp; &nbsp;持久代不属于堆的一部分，就是方法区。使用-XX:MaxPermSize可以设置持久代的最大值，使用-XX:PermSize可以设置持久代的初始大小。持久代的大小直接决定了系统可以支持多少个类定义和多少常量。对于使用CGLIB或者Javasist等动态字节码生成工具的应用程序，应合理设置持久代大小。<br></li><li>设置线程栈大小 :-Xss &nbsp; &nbsp;函数调用时，都需要在栈中开辟空间，如果栈分配空间太小，会影响调用函数深度；同时，如果栈空间过大，所能支持的线程总数就会下降。这两个是矛盾，但要均衡。</li><li>对堆里设置比例：-XX:SurvivorRatio可以设置eden区与survivor区的比例。-XX:NewRatio可以设置老年代与新生代的比例。</li></ul><div><br></div></div><h6>class文件结构</h6><div>class文件结构：4个字节class文件标识符，jdk小版本，大版本，常量数，常量表，访问标识符，类名，父类名，实现接口数，实现接口表，字段数，字段表，方法数，方法表，属性数，属性表。每个表都放了详细信息，如访问控制符，synchronized等。在加载字节码class文件时候，会用到他们。<br></div><div><br></div><h6>垃圾收集器</h6><div>一个不合适的垃圾回收方法和策略会对系统性能造成不良影响。本节介绍一些垃圾回收方法以及Hot Spot虚拟机支持的垃圾回收器。</div><div><br></div><div><b>常用垃圾收集算法</b></div><div><ul><li><span style="line-height: 1.6;">引用计数法</span><br></li></ul></div><div>对于每个对象配备一个计数器，记录哪里有引用了它，当有引用，计数器+1，当引用时效，计数器-1，只要对象的引用计数器的值为0，则对象就不可能再被使用。但引用计数器无法处理循环引用问题，A引用B，B引用A，所以不合适做Java垃圾回收。</div><div><ul><li><span style="line-height: 1.6;">标记清除算法</span><br></li></ul></div><div>标记-清除算法先通过根节点标记所有可达对象，然后清除所有不可达对象，这样回收后的空间是不连续的。在对象的堆空间分配过程中，尤其是大对象的内存分配，不连续的内存空间的工作效率要低于连续的空间。<br></div><div><ul><li><span style="line-height: 1.6;">复制算法</span><br></li></ul></div><div>将内存空间分为两块，每次只使用其中一块，在垃圾回收时，将正在使用的内存中的存活对象复制到未使用的内存块中（连续放），然后清除这个内存块，完成垃圾回收。复制算法效率很高，这是在存活对象少，垃圾对象多情况，而且复制算法将系统内存折半，单纯的复制算法让人不能接受。</div><div>在Java的新生代串行垃圾回收器中，使用了复制算法的思想。新生代分为eden空间、from空间和to空间3个部分。其中from和to空间可以视为用于复制的两块大小相同、地位相等，且可进行角色互换的空间块。from和to空间也称为survivor空间，即幸存者空间，用于存放未被回收的对象。在垃圾回收时，eden空间的存活对象会被复制到未使用的survivor空间中（假设是to），正在使用的survivor空间（假设是from）中的年轻对象也会被复制到to空间中（大对象，或者老年对象会直接进行年老代，如果to空间已满，则对象也会直接进行老年代）。此时，eden空间和from空间中的剩余对象就是垃圾对象，可以直接清空，to空间则存放此时回收后的存活对象。</div><div>但对于Java老年代，存活对象过多，这种方法效率就不高了。</div><div><ul><li><span style="line-height: 1.6;">标记—压缩算法</span><br></li></ul></div><div>标记—压缩算法是一种老年代的回收算法，它对标记-清除算法做了优化。它也是从根节点开始，对所有可达对象做一次标记。标记完后，它将所有存活对象压缩到内存的一端。之后，清理边界外所有的空间（都放到一端，然后清理这一端意外的所有）。性价比较高。</div><div><ul><li><span style="line-height: 1.6;">分代</span><br></li></ul></div><div>分代是同时使用赋值算法和标记-压缩算法，它将内存区间根据对象特点分成2大块，年轻代的特点是对象朝生夕灭，大约90%的新建对象会被很快回收，因此，年轻代使用效率较高的复制算法。当一个对象经过几次回收后依然存活，对象就会被放入称为老年代的内存空间。在老年代中，几乎所有对象都是经过几次垃圾回收后依然得以幸存的。可认为，这些对象是常驻内存的。对老年代使用标记-压缩算法。<br></div><div><br></div><div>对于任何的垃圾回收过程中，所有的线程都会被挂起，暂停一切正常的工作，等待垃圾回收的完成。如果垃圾回收时间很长，应用程序就会被挂起很久，将严重影响用户体验或者系统的稳定性。</div><div><br></div><div><b>垃圾收集器类型：</b></div><div>在执行机制上JVM提供了串行GC(SerialGC)、并行GC(ParallelGC)和并发GC(CMS)？Par是什么<br></div><div><div>1)串行GC</div><div><span style="line-height: 1.6;">使用的是标记-压缩算法，</span>在整个扫描和复制过程采用单线程的方式来进行，适用于单CPU、新生代空间较小及对暂停时间要求不是非常高的应用上，是client级别默认的GC方式，可以通过-XX:+UseSerialGC来强制指定</div><div>2)并行GC</div><div><span style="line-height: 1.6;">使用的是标记-压缩算法，</span>JVM的默认垃圾回收器，<span style="line-height: 1.6;">只是把串行GC变成多核GC，</span><span style="line-height: 1.6;">在整个扫描和复制过程采用多线程的方式来进行，适用于多CPU、对暂停时间要求较短的应用上，是server级别默认采用的GC方式，可用-XX:+UseParallelGC来强制指定，用-XX:ParallelGCThreads=4来指定线程数。</span></div></div><div>3）并发GC</div><div>CMS收集器关注于系统停顿时间。使用的是标记-清除算法，同时也是使用的多线程并行回收的垃圾收集器。不是独占式回收器，在回收过程中，应用程序仍然再不停地工作。但因为是标记-清除算法会造成大量内存碎片，离散的可用空间无法分配较大的对象，即使堆内存仍然有较大的剩余空间，也可能会被迫进行一次垃圾回收。</div><h6>常用调优案例和方法</h6><div><div>老生代进行一次垃圾清理，被称为fullGC或者majorGC</div><div>新生代进行一次垃圾清理，被称为youngGC或者minorGC</div><div><br></div><div>我们在JVM优化过程中的一个原则就是：</div><div><br></div><div>降低youngGC的频率、减少fullGC的次数。</div></div><div><br></div><div><div>我们需要根据应用场景、硬件性能和吞吐量需求来决定使用哪一种垃圾回收器，通过JVM参数的配置来选择垃圾回收器：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-java"><span class="pun">-</span><span class="pln">XX</span><span class="pun">:+</span><span class="typ">UseSerialGC</span><span class="pun">：串行垃圾回收器</span><span class="pln"> </span></code></li><li class="L1"><code class="language-java"><span class="pun">-</span><span class="pln">XX</span><span class="pun">:+</span><span class="typ">UseParallelGC</span><span class="pun">：并行垃圾回收器</span><span class="pln"> </span></code></li><li class="L2"><code class="language-java"><span class="pun">-</span><span class="pln">XX</span><span class="pun">:+</span><span class="typ">UseConcMarkSweepGC</span><span class="pun">：并发标记扫描垃圾回收器</span><span class="pln"> </span></code></li><li class="L3"><code class="language-java"><span class="pun">-</span><span class="pln">XX</span><span class="pun">:</span><span class="typ">ParallelCMSThreads</span><span class="pun">：并发标记扫描垃圾回收器</span><span class="pln"> </span><span class="pun">=为使用的线程数量</span><span class="pln"> </span></code></li><li class="L4"><code class="language-java"><span class="pun">-</span><span class="pln">XX</span><span class="pun">:+</span><span class="typ">UseG1GC</span><span class="pun">：</span><span class="pln">G1</span><span class="pun">垃圾回收器</span></code></li></ol></pre></div></div><div>其他内存常见配置：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-java"><span class="pun">-</span><span class="typ">Xms</span><span class="pun">：初始化堆内存大小</span><span class="pln"> </span></code></li><li class="L1"><code class="language-java"><span class="pun">-</span><span class="typ">Xmx</span><span class="pun">：堆内存最大值</span><span class="pln"> </span></code></li><li class="L2"><code class="language-java"><span class="pun">-</span><span class="typ">Xmn</span><span class="pun">：新生代大小</span><span class="pln"> </span></code></li><li class="L3"><code class="language-java"><span class="pun">-</span><span class="pln">XX</span><span class="pun">:</span><span class="typ">PermSize</span><span class="pun">：初始化永久代大小</span><span class="pln"> </span></code></li><li class="L4"><code class="language-java"><span class="pun">-</span><span class="pln">XX</span><span class="pun">:</span><span class="typ">MaxPermSize</span><span class="pun">：永久代最大容量</span></code></li></ol></pre></div></div><div>配置JVM GC参数的实例：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-java"><span class="pln">java </span><span class="pun">-</span><span class="typ">Xmx1024m</span><span class="pln"> </span><span class="pun">-</span><span class="typ">Xms512m</span><span class="pln"> </span><span class="pun">-</span><span class="typ">Xmn256m</span><span class="pln"> </span><span class="pun">-</span><span class="pln">XX</span><span class="pun">:</span><span class="typ">PermSize</span><span class="pun">=</span><span class="lit">64m</span><span class="pln"> </span><span class="pun">-</span><span class="pln">XX</span><span class="pun">:</span><span class="typ">MaxPermSize</span><span class="pun">=</span><span class="lit">128m</span><span class="pln"> </span><span class="pun">-</span><span class="pln">XX</span><span class="pun">:+</span><span class="typ">UseSerialGC</span><span class="pln"> </span><span class="pun">-</span><span class="pln">jar java</span><span class="pun">-</span><span class="pln">application</span><span class="pun">.</span><span class="pln">jar</span></code></li></ol></pre></div></div><div>上述配置的含义是：&nbsp;</div><div>堆内存512-1024M，新生代256M，永久代64-128M，采用串行垃圾回收器执行java-application.jar。</div></div><div><div>java.lang.OutOfMemoryError: PermGen space<span class="Apple-tab-span" style="white-space:pre"> </span>Perm区内存溢出</div><div>java.lang.OutOfMemoryError：heap space<span class="Apple-tab-span" style="white-space:pre">   </span>堆区内存溢出</div></div><div><br></div><div>JVM调优的主要过程有：确定堆内存大小（-Xms<span style="line-height: 24.2667px;">、</span><span style="line-height: 1.6;">-Xms）</span><span style="line-height: 24.2667px;">、合理分配新生代和老年代（-XX:NewRatio</span><span style="line-height: 24.2667px;">、-Xmn</span><span style="line-height: 24.2667px;">、-XX:SuvivorRatio</span><span style="line-height: 24.2667px;">）</span><span style="line-height: 24.2667px;">、确定永久区大小（-XX:Permsize</span><span style="line-height: 24.2667px;">、-XX:MaxPermSize</span><span style="line-height: 24.2667px;">）</span><span style="line-height: 24.2667px;">、选择垃圾收集器/对垃圾收集器进行合理的设置，如设置线程数等。除此之外，禁用显示GC（-XX:+DisableExplicitGC，禁止再代码中System.gc()出发Full gc），禁用类元数据回收（-Xnoclassgc），禁用类验证（-Xverify:none）等设置，对提升系统性能也有一定的帮助。</span></div><div><br></div><h6>常用调优工具</h6><div><ul><li>top &nbsp; &nbsp;查看各个进程的资源占用状况</li><li>pidstat &nbsp; &nbsp;既可以监视进程性能情况，也可以监视线程的性能情况。</li></ul><div>-p&nbsp; &nbsp;&nbsp;监控CPU使用率</div></div><div>-d &nbsp; &nbsp;监控磁盘IO</div><div>-r &nbsp; &nbsp;监控内存使用情况</div><div>如对CPU使用率做如下分析</div><div>查看进程CPU使用率</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="com">#每秒采样1次，采样3次，采CPU使用率</span></code></li><li class="L1"><code class="language-c"><span class="pln">pidstat </span><span class="pun">-</span><span class="pln">p </span><span class="pun">进程</span><span class="pln">ID </span><span class="pun">-</span><span class="pln">u </span><span class="lit">1</span><span class="pln"> </span><span class="lit">3</span></code></li></ol></pre></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0">#每秒采样1次，采样3次，采CPU使用率   -t可以将监控细化到线程级别<br></li><li class="L1"><code class="language-c"><span class="pln">pidstat </span><span class="pun">-</span><span class="pln">p </span><span class="pun">进程</span><span class="pln">ID </span><span class="pun">-</span><span class="pln">u </span><span class="pun">-</span><span class="pln">t </span><span class="lit">1</span><span class="pln"> </span><span class="lit">3</span></code></li></ol></pre></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">jstack </span><span class="pun">-</span><span class="pln">l </span><span class="pun">进程</span><span class="pln">ID </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">1.txt</span></code></li></ol></pre></div><div>jstack导出Java应用程序的线程堆栈，导出信息到文件中</div></div></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="str">"Timer-0"</span><span class="pln"> </span><span class="com">#25 daemon prio=5 os_prio=31 tid=0x00007fb9b748c000 nid=0x11353 in Object.wait() [0x0000700006d54000]</span></code></li><li class="L1"><code class="language-c"><span class="pln">   java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">Thread</span><span class="pun">.</span><span class="typ">State</span><span class="pun">:</span><span class="pln"> WAITING </span><span class="pun">(</span><span class="pln">on object monitor</span><span class="pun">)</span></code></li><li class="L2"><code class="language-c"><span class="pln"> at java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">Object</span><span class="pun">.</span><span class="pln">wait</span><span class="pun">(</span><span class="typ">Native</span><span class="pln"> </span><span class="typ">Method</span><span class="pun">)</span></code></li><li class="L3"><code class="language-c"><span class="pln"> at java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">Object</span><span class="pun">.</span><span class="pln">wait</span><span class="pun">(</span><span class="typ">Object</span><span class="pun">.</span><span class="pln">java</span><span class="pun">:</span><span class="lit">502</span><span class="pun">)</span></code></li><li class="L4"><code class="language-c"><span class="pln"> at java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">TimerThread</span><span class="pun">.</span><span class="pln">mainLoop</span><span class="pun">(</span><span class="typ">Timer</span><span class="pun">.</span><span class="pln">java</span><span class="pun">:</span><span class="lit">526</span><span class="pun">)</span></code></li><li class="L5"><code class="language-c"><span class="pln"> </span><span class="pun">-</span><span class="pln"> locked </span><span class="pun">&lt;</span><span class="lit">0x00000007a1597500</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">(</span><span class="pln">a java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">TaskQueue</span><span class="pun">)</span></code></li><li class="L6"><code class="language-c"><span class="pln"> at java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">TimerThread</span><span class="pun">.</span><span class="pln">run</span><span class="pun">(</span><span class="typ">Timer</span><span class="pun">.</span><span class="pln">java</span><span class="pun">:</span><span class="lit">505</span><span class="pun">)</span></code></li><li class="L7"><code class="language-c"></code></li><li class="L8"><code class="language-c"><span class="pln">   </span><span class="typ">Locked</span><span class="pln"> ownable synchronizers</span><span class="pun">:</span></code></li><li class="L9"><code class="language-c"><span class="pln">  </span><span class="pun">-</span><span class="pln"> </span><span class="typ">None</span></code></li><li class="L0"><code class="language-c"><span class="pun">...</span></code></li></ol></pre></div><div>这里的nid值刚好就是进程ID。所以根据这个nid可以确定在Java应用程序中大量占用CPU的线程。</div></div><div><ul><li>jps &nbsp; &nbsp;查看所有Java程序的进程ID以及Main函数、程序启动参数，主函数完整路径等信息<br></li><li>jstat &nbsp; &nbsp;查看Java应用程序的堆使用情况以及GC情况。</li></ul><div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">jstat </span><span class="pun">-</span><span class="pln">options </span><span class="pun">进程</span><span class="pln">ID</span></code></li></ol></pre></div></div><div>可以列出当前JVM版本支持的选项，常见的有</div><div>[options选项]</div><div>class &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 加载类的信息，数量，所占空间</div><div>compiler &nbsp; &nbsp; &nbsp; &nbsp;显示编译相关信息，编译数、失败数</div><div>gc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;显示eden、s0、s1、old使用量，总量。Yong gc次数，Full gc次数，最后一次耗时</div><div>gccapacity &nbsp; &nbsp; &nbsp;和上面类似</div><div>gcutil &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;显示eden、s0、s1、old使用率。Yong gc次数，Full gc次数，最后一次耗时</div><div>...</div></div><ul><li>visual VM是一个可代替jstat、jmap、jhat、jstack、JConsole的工具。</li><li>jstack &nbsp; &nbsp;导出Java应用程序的线程堆栈。</li></ul></div><div><br></div><div><div style="border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>Java精粹代码<br></h2></div><h3 style="line-height: 24.2667px;">定义方法时，使用...代表可以使用任意个参数</h3></div><div style="line-height: 24.2667px;"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ReflactTest</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="com">/**</span></code></li><li class="L2"><code class="language-c"><span class="com">  * @param args</span></code></li><li class="L3"><code class="language-c"><span class="com">  */</span></code></li><li class="L4"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ReflactTest</span><span class="pun">().</span><span class="pln">test</span><span class="pun">(</span><span class="lit">1</span><span class="pun">);</span></code></li><li class="L6"><code class="language-c"><span class="pln">   </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ReflactTest</span><span class="pun">().</span><span class="pln">test</span><span class="pun">(</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">);</span></code></li><li class="L7"><code class="language-c"><span class="pln">   </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ReflactTest</span><span class="pun">().</span><span class="pln">test</span><span class="pun">(</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln"> </span><span class="lit">42</span><span class="pun">);</span></code></li><li class="L8"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L9"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> test</span><span class="pun">(</span><span class="typ">int</span><span class="pun">...</span><span class="pln"> yp</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-c"><span class="pln">   </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> yp</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">      </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">yp</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]);</span></code></li><li class="L2"><code class="language-c"><span class="pln">   </span><span class="pun">}</span></code></li><li class="L3"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L4"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><h3>泛型中使用?、super、extends</h3><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Test</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="com">/**</span></code></li><li class="L2"><code class="language-c"><span class="com">  * @param args</span></code></li><li class="L3"><code class="language-c"><span class="com">  */</span></code></li><li class="L4"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">Integer</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Integer</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">map</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashMap</span><span class="pun">&lt;</span><span class="typ">Integer</span><span class="pun">,</span><span class="typ">Integer</span><span class="pun">&gt;();</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="typ">map</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">list</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ArrayList</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;();</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="typ">list</span><span class="pun">.</span><span class="pln">add</span><span class="pun">(</span><span class="str">"123"</span><span class="pun">);</span></code></li><li class="L9"><code class="language-c"><span class="pln">   </span><span class="com">//限定通配符的上边界。?任意类型。Number包括八大基本类型，Number或者Number的8大子类</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="typ">Vector</span><span class="pun">&lt;?</span><span class="pln"> extends </span><span class="typ">Number</span><span class="pun">&gt;</span><span class="pln"> ver </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Vector</span><span class="pun">&lt;</span><span class="typ">Integer</span><span class="pun">&gt;();</span></code></li><li class="L1"><code class="language-c"><span class="com">//    Vector&lt;? extends Number&gt; ver2 = new Vector&lt;String&gt;();//错误。类型必须是Number或者Number的子类</span></code></li><li class="L2"><code class="language-c"><span class="pln">   </span><span class="com">//限定通配符的下边界。?任意类型。Integer或者Integer的父类都可以</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="typ">Vector</span><span class="pun">&lt;?</span><span class="pln"> super </span><span class="typ">Integer</span><span class="pun">&gt;</span><span class="pln"> sub </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Vector</span><span class="pun">&lt;</span><span class="typ">Number</span><span class="pun">&gt;();</span></code></li><li class="L4"><code class="language-c"><span class="com">//    Vector&lt;? super Number&gt; sub2 = new Vector&lt;String&gt;();//错误。类型必须是Integer或者Integer的父类都可以</span></code></li><li class="L5"><code class="language-c"><span class="com">//    Vector&lt;? super Number&gt; sub3 = new Vector&lt;boolean&gt;();//错误。类型必须是Integer或者Integer的父类都可以</span></code></li><li class="L6"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L7"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> printf</span><span class="pun">(</span><span class="typ">Collection</span><span class="pun">&lt;?&gt;</span><span class="pln"> collecation</span><span class="pun">){</span><span class="com">//?代表接收任何类型的集合，如果要表示任意类型，不能用Object代替?，编译器会报错</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">collecation</span><span class="pun">!=</span><span class="pln">null </span><span class="pun">&amp;&amp;</span><span class="pln"> collecation</span><span class="pun">.</span><span class="pln">size</span><span class="pun">()&gt;</span><span class="lit">0</span><span class="pun">){</span></code></li><li class="L9"><code class="language-c"><span class="pln">      </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">collecation instanceof </span><span class="typ">Arrays</span><span class="pun">){</span></code></li><li class="L0"><code class="language-c"><span class="pln">        </span><span class="kwd">for</span><span class="pun">(</span><span class="typ">Object</span><span class="pln"> col </span><span class="pun">:</span><span class="pln"> collecation</span><span class="pun">){</span></code></li><li class="L1"><code class="language-c"><span class="pln">          </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">col instanceof </span><span class="typ">String</span><span class="pun">){</span></code></li><li class="L2"><code class="language-c"><span class="pln">            </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">col</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pln">         </span><span class="pun">}</span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">col instanceof </span><span class="typ">MyClass</span><span class="pun">){</span></code></li><li class="L4"><code class="language-c"><span class="pln">            </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">col</span><span class="pun">.</span><span class="pln">toString</span><span class="pun">());</span></code></li><li class="L5"><code class="language-c"><span class="pln">          </span><span class="pun">}</span></code></li><li class="L6"><code class="language-c"><span class="pln">       </span><span class="pun">}</span></code></li><li class="L7"><code class="language-c"><span class="pln">     </span><span class="pun">}</span><span class="kwd">else</span><span class="pun">{</span></code></li><li class="L8"><code class="language-c"><span class="pln">        </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">RuntimeException</span><span class="pun">(</span><span class="str">"必须为set/list"</span><span class="pun">);</span></code></li><li class="L9"><code class="language-c"><span class="pln">     </span><span class="pun">}</span></code></li><li class="L0"><code class="language-c"><span class="pln">   </span><span class="pun">}</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="com">//限定通配符的上边界。?任意类型。Number包括八大基本类型，Number或者Number的8大子类</span></code></li><li class="L3"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;?</span><span class="pln"> super </span><span class="typ">Number</span><span class="pun">&gt;</span><span class="pln"> getList</span><span class="pun">(){</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> null</span><span class="pun">;</span></code></li><li class="L5"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L6"><code class="language-c"><span class="pln"> </span><span class="com">//限定通配符的下边界。?任意类型。Integer或者Integer的父类都可以</span></code></li><li class="L7"><code class="language-c"><span class="pln">  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;?</span><span class="pln"> extends </span><span class="typ">Number</span><span class="pun">&gt;</span><span class="pln"> getList2</span><span class="pun">(){</span></code></li><li class="L8"><code class="language-c"><span class="pln">   </span><span class="kwd">return</span><span class="pln"> null</span><span class="pun">;</span></code></li><li class="L9"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L0"><code class="language-c"><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">MyClass</span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="lit">@Override</span></code></li><li class="L2"><code class="language-c"><span class="pln">   </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> toString</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">      </span><span class="kwd">return</span><span class="pln"> </span><span class="str">"test"</span><span class="pun">;</span></code></li><li class="L4"><code class="language-c"><span class="pln">   </span><span class="pun">}</span></code></li><li class="L5"><code class="language-c"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L6"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><br></div><h4>break、continue语句结合语句标签的使用</h4></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">ublic </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">TestLable</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span></code></li><li class="L1"><code class="language-c"><span class="pln">        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span></code></li><li class="L2"><code class="language-c"><span class="pln">                outer</span><span class="pun">:</span><span class="pln"> </span></code></li><li class="L3"><code class="language-c"><span class="pln">                </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">10</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span></code></li><li class="L4"><code class="language-c"><span class="pln">                        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"\nouter_loop:"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> i</span><span class="pun">);</span><span class="pln"> </span></code></li><li class="L5"><code class="language-c"><span class="pln">                        inner</span><span class="pun">:</span><span class="pln"> </span></code></li><li class="L6"><code class="language-c"><span class="pln">                        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pln"> k </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">10</span><span class="pun">;</span><span class="pln"> k</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span></code></li><li class="L7"><code class="language-c"><span class="pln">                                </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">print</span><span class="pun">(</span><span class="pln">k </span><span class="pun">+</span><span class="pln"> </span><span class="str">" "</span><span class="pun">);</span><span class="pln"> </span></code></li><li class="L8"><code class="language-c"><span class="pln">                                </span><span class="typ">int</span><span class="pln"> x </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Random</span><span class="pun">().</span><span class="pln">nextInt</span><span class="pun">(</span><span class="lit">10</span><span class="pun">);</span><span class="pln"> </span></code></li><li class="L9"><code class="language-c"><span class="pln">                                </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">x </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">7</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span></code></li><li class="L0"><code class="language-c"><span class="pln">                                        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">print</span><span class="pun">(</span><span class="str">" &gt;&gt;x == "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> x </span><span class="pun">+</span><span class="pln"> </span><span class="str">"，结束inner循环，继续迭代执行outer循环了！"</span><span class="pun">);</span><span class="pln"> </span></code></li><li class="L1"><code class="language-c"><span class="pln">                                        </span><span class="kwd">continue</span><span class="pln"> outer</span><span class="pun">;</span><span class="pln"> </span></code></li><li class="L2"><code class="language-c"><span class="pln">                                </span><span class="pun">}</span><span class="pln"> </span></code></li><li class="L3"><code class="language-c"><span class="pln">                                </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">x </span><span class="pun">==</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span></code></li><li class="L4"><code class="language-c"><span class="pln">                                        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">print</span><span class="pun">(</span><span class="str">" &gt;&gt;x == 1，跳出并结束整个outer和inner循环！"</span><span class="pun">);</span><span class="pln"> </span></code></li><li class="L5"><code class="language-c"><span class="pln">                                        </span><span class="kwd">break</span><span class="pln"> outer</span><span class="pun">;</span><span class="pln"> </span></code></li><li class="L6"><code class="language-c"><span class="pln">                                </span><span class="pun">}</span><span class="pln"> </span></code></li><li class="L7"><code class="language-c"><span class="pln">                        </span><span class="pun">}</span><span class="pln"> </span></code></li><li class="L8"><code class="language-c"><span class="pln">                </span><span class="pun">}</span><span class="pln"> </span></code></li><li class="L9"><code class="language-c"><span class="pln">                </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"------&gt;&gt;&gt;所有循环执行完毕！"</span><span class="pun">);</span><span class="pln"> </span></code></li><li class="L0"><code class="language-c"><span class="pln">        </span><span class="pun">}</span><span class="pln"> </span></code></li><li class="L1"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><br></div><h4>抽象接口类、匿名类的使用</h4></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> abstract </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">BaseSender</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="com">/**</span></code></li><li class="L2"><code class="language-c"><span class="com">     * 发送 必须让子类实现才能使用</span></code></li><li class="L3"><code class="language-c"><span class="com">     */</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> abstract </span><span class="typ">String</span><span class="pln"> send</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> to</span><span class="pun">);</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getContent</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> to</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-c"><span class="pln">        </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">send</span><span class="pun">(</span><span class="pln">to</span><span class="pun">);</span></code></li><li class="L7"><code class="language-c"><span class="pln">        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"BaseSender getContent"</span><span class="pun">);</span></code></li><li class="L8"><code class="language-c"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> null</span><span class="pun">;</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L0"><code class="language-c"><span class="pun">}</span></code></li><li class="L1"><code class="language-c"></code></li><li class="L2"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SenderTest</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-c"><span class="pln">        </span><span class="typ">Sender</span><span class="pln"> sender3 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">BaseSender</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="com">// 匿名类。</span></code></li><li class="L5"><code class="language-c"><span class="pln">            </span><span class="lit">@Override</span></code></li><li class="L6"><code class="language-c"><span class="pln">            </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> send</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> senderID</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> senderNumber</span><span class="pun">,</span></code></li><li class="L7"><code class="language-c"><span class="pln">                    </span><span class="typ">String</span><span class="pln"> receiverID</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> receoverNumber</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-c"><span class="pln">                </span><span class="kwd">return</span><span class="pln"> null</span><span class="pun">;</span></code></li><li class="L9"><code class="language-c"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L0"><code class="language-c"><span class="pln">        </span><span class="pun">};</span></code></li><li class="L1"><code class="language-c"><span class="pln">        sender3</span><span class="pun">.</span><span class="pln">getContent</span><span class="pun">(</span><span class="str">"123"</span><span class="pun">);</span><span class="com">// 引用过时的方法</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L3"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div>使用回调模式</div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> interface </span><span class="typ">Person</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> getAge</span><span class="pun">();</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getName</span><span class="pun">();</span></code></li><li class="L3"><code class="language-c"><span class="pun">}</span></code></li><li class="L4"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">LynzaboUtil</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> sayHello</span><span class="pun">(</span><span class="typ">Person</span><span class="pln"> person</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-c"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> person</span><span class="pun">.</span><span class="pln">getName</span><span class="pun">()</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="str">",你好啊!"</span><span class="pun">;</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">};</span></code></li><li class="L8"><code class="language-c"><span class="pun">}</span></code></li><li class="L9"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">MainTest</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="com">/**</span></code></li><li class="L1"><code class="language-c"><span class="com">     * @param args</span></code></li><li class="L2"><code class="language-c"><span class="com">     */</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-c"><span class="pln">        </span><span class="typ">LynzaboUtil</span><span class="pln"> util </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">LynzaboUtil</span><span class="pun">();</span></code></li><li class="L5"><code class="language-c"><span class="pln">        final </span><span class="typ">String</span><span class="pln"> </span><span class="kwd">operator</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"习近平"</span><span class="pun">;</span></code></li><li class="L6"><code class="language-c"><span class="pln">        </span><span class="typ">String</span><span class="pln"> info </span><span class="pun">=</span><span class="pln"> util</span><span class="pun">.</span><span class="pln">sayHello</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="com">// 重写接口或者接口的抽象类都可以。</span></code></li><li class="L7"><code class="language-c"><span class="pln">                    </span><span class="lit">@Override</span></code></li><li class="L8"><code class="language-c"><span class="pln">                    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> getAge</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-c"><span class="pln">                        </span><span class="kwd">return</span><span class="pln"> </span><span class="lit">10</span><span class="pun">;</span></code></li><li class="L0"><code class="language-c"><span class="pln">                    </span><span class="pun">}</span></code></li><li class="L1"><code class="language-c"><span class="pln">                    </span><span class="lit">@Override</span></code></li><li class="L2"><code class="language-c"><span class="pln">                    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getName</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">                        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">operator</span><span class="pun">;</span></code></li><li class="L4"><code class="language-c"><span class="pln">                    </span><span class="pun">}</span></code></li><li class="L5"><code class="language-c"><span class="pln">                </span><span class="pun">});</span></code></li><li class="L6"><code class="language-c"><span class="pln">        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">info</span><span class="pun">);</span><span class="com">// 习近平,你好啊!</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L8"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><h4>使用lambda</h4></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="com">// Java 8之前：</span></code></li><li class="L1"><code class="language-c"><span class="kwd">new</span><span class="pln"> </span><span class="typ">Thread</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Runnable</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="lit">@Override</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> run</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Before Java8, too much code for too little to do"</span><span class="pun">);</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L6"><code class="language-c"><span class="pun">}).</span><span class="pln">start</span><span class="pun">();</span></code></li><li class="L7"><code class="language-c"><span class="lit">1</span></code></li><li class="L8"><code class="language-c"><span class="lit">2</span></code></li><li class="L9"><code class="language-c"><span class="com">//Java 8方式：</span></code></li><li class="L0"><code class="language-c"><span class="kwd">new</span><span class="pln"> </span><span class="typ">Thread</span><span class="pun">(</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">-&gt;</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"In Java8, Lambda expression rocks !!"</span><span class="pun">)</span><span class="pln"> </span></code></li></ol></pre></div><div><h4 style="line-height: 24.2667px;">数字字面量下划线支持</h4><div style="line-height: 24.2667px;">（当遇到很长的数字，我们采取的是分段分隔的方式。比如数字500000，我们通常会写成500,000，即每三位数字用逗号分隔。利用这种方式就可以很快知道数值的大小。这种做法的理念被加入到了Java 7中，不过用的不是逗号，而是下划线“_”，System.out.println(1_500_000); //输出1500000）</div><div style="line-height: 24.2667px;">jdk1.8（<font color="#00b0f0">TODO 好难，最多看看lambda，还有函数式接口</font>）</div><h4 style="line-height: 24.2667px;">允许在接口中有默认方法实现</h4><div style="line-height: 24.2667px;"><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> interface </span><span class="typ">Animal</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="kwd">void</span><span class="pln"> sayHi</span><span class="pun">();</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="kwd">default</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> eat</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"animal eat default method"</span><span class="pun">);</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L5"><code class="language-c"><span class="pun">}</span></code></li><li class="L6"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Dog</span><span class="pln"> implements </span><span class="typ">Animal</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> sayHi</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-c"><span class="pln">        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"dog"</span><span class="pun">);</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L0"><code class="language-c"></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> args</span><span class="pun">[])</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="typ">Dog</span><span class="pln"> dog </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Dog</span><span class="pun">();</span></code></li><li class="L3"><code class="language-c"><span class="pln">        dog</span><span class="pun">.</span><span class="pln">eat</span><span class="pun">();</span><span class="pln"> </span><span class="com">// 再具体的类里面不是必须重写默认方法，但必须要实现抽象方法。</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L5"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div></div></div><div><br></div></div><div></div></span></div><div><div><br></div></div><div><span lang="EN-GB"><div><div style="border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>Java版本对比<br></h2></div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">jdk新特性总结：</div><div style="line-height: 24.2667px;">jdk1.5</div><div style="line-height: 24.2667px;">枚举、静态导入、函数可变参数、提供一套内省方法，可以直接访问某个属性的 getter/setter 方法、支持泛型、For-Each循环（for(String a:list)类型）、注解。</div><div style="line-height: 24.2667px;">jdk1.6</div><div style="line-height: 24.2667px;">将复杂易变逻辑放入js中，支持运行Javascript、内置轻量级Http Server、内置嵌入式数据库 Derby。</div><div style="line-height: 24.2667px;">jdk1.7</div><div style="line-height: 24.2667px;">1. switch中可以使用字符串</div><div style="line-height: 24.2667px;">2. 运用List&lt;String&gt; tempList = new ArrayList&lt;&gt;(); 即泛型实例化类型自动推断</div><div style="line-height: 24.2667px;">3. 数字字面量下划线支持 （当遇到很长的数字，我们采取的是分段分隔的方式。比如数字500000，我们通常会写成500,000，即每三位数字用逗号分隔。利用这种方式就可以很快知道数值的大小。这种做法的理念被加入到了Java 7中，不过用的不是逗号，而是下划线“_”，System.out.println(1_500_000); //输出1500000）</div><div style="line-height: 24.2667px;">jdk1.8（<font color="#00b0f0">TODO 好难，最多看看lambda，还有函数式接口</font>）</div><div style="line-height: 24.2667px;">1. 允许在接口中有默认方法实现</div><div style="line-height: 24.2667px;"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> interface </span><span class="typ">Animal</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="kwd">void</span><span class="pln"> sayHi</span><span class="pun">();</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="kwd">default</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> eat</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"animal eat default method"</span><span class="pun">);</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L5"><code class="language-c"><span class="pun">}</span></code></li><li class="L6"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Dog</span><span class="pln"> implements </span><span class="typ">Animal</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> sayHi</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-c"><span class="pln">        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"dog"</span><span class="pun">);</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L0"><code class="language-c"></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> args</span><span class="pun">[])</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="typ">Dog</span><span class="pln"> dog </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Dog</span><span class="pun">();</span></code></li><li class="L3"><code class="language-c"><span class="pln">        dog</span><span class="pun">.</span><span class="pln">eat</span><span class="pun">();</span><span class="pln"> </span><span class="com">// 再具体的类里面不是必须重写默认方法，但必须要实现抽象方法。</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L5"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div></div><div style="line-height: 24.2667px;">2. Lambda表达式</div><div style="line-height: 24.2667px;">3. 函数式接口</div><div style="line-height: 24.2667px;">4. 方法和构造函数引用</div><div style="line-height: 24.2667px;">5. Lambda的范围</div><div style="line-height: 24.2667px;">6. 内置函数式接口</div><div style="line-height: 24.2667px;">7. Streams</div><div style="line-height: 24.2667px;">8. Parallel Streams&nbsp;</div><div style="line-height: 24.2667px;">10. 时间日期API</div><div style="line-height: 24.2667px;">11. Annotations</div></div></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN" style="font-family: 黑体;"><div style="font-family: &quot;Helvetica Neue&quot;;"></div></span></w:sdt></span></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN"><div style="font-family: &quot;Helvetica Neue&quot;;"><br class="Apple-interchange-newline"><br></div><div><div style="font-family: &quot;Helvetica Neue&quot;; border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>Spring、SpringMVC、Spring Cloud<br></h2></div><div style="line-height: 24.2667px;"><font face="黑体"><h3 style="line-height: 24.2667px;">Spring IOC</h3><div style="line-height: 24.2667px;">Spring IOC控制反转 负责创建对象、管理对象(通过依赖注入)、整合对象、配置对象以及管理这些对象的生命周期。</div></font><div style="font-family: 黑体; line-height: 24.2667px;"><br></div><div style="font-family: 黑体; line-height: 24.2667px;">IoC 控制反转，指将对象的创建权，反转到Spring容器 ， DI 依赖注入，指Spring创建对象的过程中，将对象依赖属性通过配置进行注入。<br></div><div style="font-family: 黑体; line-height: 24.2667px;"><div><br></div></div><div style="line-height: 24.2667px;"><div style="font-family: 黑体; line-height: 24.2667px;">在Java中依赖注入有以下三种实现方式：</div><div style="font-family: 黑体; line-height: 24.2667px;">构造器注入</div><div style="font-family: 黑体; line-height: 24.2667px;">Setter方法注入</div><div style="font-family: 黑体; line-height: 24.2667px;">接口注入</div><div style="font-family: 黑体; line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;"><div style="font-family: 黑体; line-height: 24.2667px;">Spring框架支持如下五种不同的作用域：</div><div style="font-family: 黑体; line-height: 24.2667px;"><ul><li>singleton：在Spring IOC容器中仅存在一个Bean实例，Bean以单实例的方式存在。</li><li>prototype：一个bean可以定义多个实例。</li><li>request：每次HTTP请求都会创建一个新的Bean。该作用域仅适用于WebApplicationContext环境。</li><li>session：一个HTTP Session定义一个Bean。该作用域仅适用于WebApplicationContext环境.</li><li>globalSession：同一个全局HTTP Session定义一个Bean。该作用域同样仅适用于WebApplicationContext环境.全局作用域与Servlet中的session作用域效果相同。</li></ul></div><div style="font-family: 黑体; line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;"><div style="font-family: 黑体; line-height: 24.2667px;">Spring框架中单例beans是线程安全的吗？</div><div style="font-family: 黑体; line-height: 24.2667px;">不是，Spring框架并没有对单例bean进行任何多线程的封装处理。关于单例bean的线程安全和并发问题需要开发者自行去搞定。但实际上，大部分的Spring bean并没有可变的状态(比如Service类和DAO类)，所以在某种程度上说Spring的单例bean是线程安全的。如果你的bean有多种状态的话（比如 View Model 对象），就需要自行保证线程安全。</div><div style="font-family: 黑体; line-height: 24.2667px;"><br></div><div style="font-family: 黑体;">Spring bean factory 负责管理在spring容器中被创建的bean的生命周期。Spring生命周期：<br></div><div style="font-family: 黑体;">在一个bean实例被初始化时，需要执行一系列的初始化操作以达到可用的状态。同样的，当一个bean不在被调用时需要进行相关的析构操作，并从bean容器中移除。<br></div><div style="font-family: 黑体;"><br></div><div style="font-family: 黑体;">Spring bean在初始化时加载，你可以<span style="font-family: &quot;Helvetica Neue&quot;;">在bean上加lazy-init="true"，则这个bean在第一次使用时候创建。</span></div><div style="font-family: 黑体;"><br></div><div><div>Spring自动装配提供很多模式：主要是byName、byType。使用自动注解，可以消除相应的set和get方法。</div><div><br></div><div>@Autowired注解与@Resource注解的区别：</div><div>@Autowired只按照byType 注入；@Resource默认按byName自动注入，也提供按照byType 注入；</div><div>在二者上可以加：</div><div>@Required注解用于检查特定的属性是否必须存在，可以设置不是必须注入。</div><div>@Qualifier明确指定注入的是哪个。比如beans定义了id不同的多个同一个bean，id="student1"和id="student2"，当使用@Autowired按类型时，可以再加</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="lit">@Autowired</span></code></li><li class="L1"><code class="language-c"><span class="lit">@Qualifier</span><span class="pun">(</span><span class="str">"student2"</span><span class="pun">)</span><span class="pln">  </span><span class="com">//明确指定使用第二个</span></code></li><li class="L2"><code class="language-c"><span class="kwd">private</span><span class="pln"> </span><span class="typ">Student</span><span class="pln"> student</span><span class="pun">;</span></code></li></ol></pre></div><div><br></div></div><h3 style="font-family: &quot;Helvetica Neue&quot;;">Spring AOP</h3></div><div><div>面向切面编程</div><div>使用JDK中的Proxy技术和CGLIB库文件实现AOP功能。</div><div>AOP的核心就是切面，它将多个类的通用行为封装为可重用的模块。</div><div>连接点(Join point)&nbsp; &nbsp;&nbsp;代表应用程序中插入AOP切面的地点。</div><div>通知(Advice)&nbsp; &nbsp;&nbsp;表示在方法执行前后需要执行的动作。</div><div><br></div><div>Spring切面可以执行一下五种类型的通知:</div><div><ul><li>before(前置通知)：在一个方法之前执行的通知。</li><li>after(最终通知)：当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。</li><li>after-returning(后置通知)：在某连接点正常完成后执行的通知。</li><li>after-throwing(异常通知)：在方法抛出异常退出时执行的通知。</li><li>around(环绕通知)：在方法调用前后触发的通知。</li></ul></div><div><br></div><div>切入点(Pointcut)是一个或一组连接点，通知将在这些位置执行。可以通过表达式或匹配的方式指明切入点。</div><div>目标对象是被一个或者多个切面所通知的对象。</div><div>织入是将切面和其他应用类型或对象连接起来创建一个通知对象的过程。织入可以在编译、加载或运行时完成。</div><div>代理是将通知应用到目标对象后创建的对象。</div><div><br></div><div><div>Spring提供了两种切面声明方式，实际工作中我们可以选用其中一种：</div><div><ul><li>基于XML配置方式（基于<span class="pln" style="font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13px; white-space: pre; background-color: rgb(247, 247, 249);">aop</span><span class="pun" style="font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13px; white-space: pre; background-color: rgb(247, 247, 249);">:</span><span class="pln" style="font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13px; white-space: pre; background-color: rgb(247, 247, 249);">config</span>和<span class="pln" style="font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13px; white-space: pre; background-color: rgb(247, 247, 249);">aop</span><span class="pun" style="font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13px; white-space: pre; background-color: rgb(247, 247, 249);">:</span><span class="pln" style="font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13px; white-space: pre; background-color: rgb(247, 247, 249);">aspect</span>）声明切面。</li><li>基于注解方式(基于@AspectJ)声明切面</li></ul></div></div><div><br></div><div>基于XML Schema方式的切面实现，切面由使用XML文件配置的类实现。</div><div>基于注解方式(基于@AspectJ)的切面实现，指的是切面的对应的类使用Java 5注解的声明方式。</div><div style="font-family: &quot;Helvetica Neue&quot;;"><br></div></div></div></div></div><h3 style="font-family: 黑体;">AOP事务管理</h3><div><font face="黑体">Spring的事务管理分为注解方式（直接给类或方法加@Transactional）与XML配置文件（用XML配置来管理事务）。</font><br></div><div><font face="黑体">XML配置：</font></div><div><font face="黑体"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">使用该配置可以读取</span><span class="pln">properties</span><span class="pun">文件</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pun">&lt;</span><span class="pln">context</span><span class="pun">:</span><span class="kwd">property</span><span class="pun">-</span><span class="pln">placeholder location</span><span class="pun">=</span><span class="str">"jdbc.properties"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pun">&lt;</span><span class="pln">bean id</span><span class="pun">=</span><span class="str">"dataSource"</span><span class="pln"> </span><span class="kwd">class</span><span class="pun">=</span><span class="str">"org.apache.commons.dbcp.BasicDataSource"</span></code></li><li class="L3"><code class="language-c"><span class="pln">  destroy</span><span class="pun">-</span><span class="pln">method</span><span class="pun">=</span><span class="str">"close"</span><span class="pun">&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"driverClassName"</span><span class="pln"> value</span><span class="pun">=</span><span class="str">"${driverClassName}"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"url"</span><span class="pln"> value</span><span class="pun">=</span><span class="str">"${url}"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"username"</span><span class="pln"> value</span><span class="pun">=</span><span class="str">"${username}"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"password"</span><span class="pln"> value</span><span class="pun">=</span><span class="str">"${password}"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li><li class="L8"><code class="language-c"><span class="pln"> </span><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">连接池启动时的初始值</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"initialSize"</span><span class="pln"> value</span><span class="pun">=</span><span class="str">"${initialSize}"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li><li class="L0"><code class="language-c"><span class="pln"> </span><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">连接池的最大值</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"maxActive"</span><span class="pln"> value</span><span class="pun">=</span><span class="str">"${maxActive}"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到</span><span class="pln">maxIdle</span><span class="pun">为止</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"maxIdle"</span><span class="pln"> value</span><span class="pun">=</span><span class="str">"${maxIdle}"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln"> </span><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"minIdle"</span><span class="pln"> value</span><span class="pun">=</span><span class="str">"${minIdle}"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">bean</span><span class="pun">&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pun">&lt;</span><span class="pln">bean id</span><span class="pun">=</span><span class="str">"txManager"</span></code></li><li class="L8"><code class="language-c"><span class="pln">  </span><span class="kwd">class</span><span class="pun">=</span><span class="str">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span><span class="pun">&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"dataSource"</span><span class="pln"> ref</span><span class="pun">=</span><span class="str">"dataSource"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li><li class="L0"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">bean</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">采用</span><span class="lit">@Transactional</span><span class="pun">注解方式使用事务</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">tx</span><span class="pun">:</span><span class="pln">annotation</span><span class="pun">-</span><span class="pln">driven transaction</span><span class="pun">-</span><span class="pln">manager</span><span class="pun">=</span><span class="str">"txManager"</span><span class="pln"> </span><span class="pun">/&gt;</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">采用</span><span class="pln">xml</span><span class="pun">方式配置事务</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pun">&lt;</span><span class="pln">aop</span><span class="pun">:</span><span class="pln">config</span><span class="pun">&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pln"> </span><span class="pun">&lt;!--</span><span class="pln"> </span></code></li><li class="L6"><code class="language-c"><span class="pln">   </span><span class="pun">定义切入点</span></code></li><li class="L7"><code class="language-c"><span class="pln">   </span><span class="pun">自定义切入点</span><span class="pln">transactionPointcut</span><span class="pun">，对</span><span class="pln">com</span><span class="pun">.</span><span class="pln">lynzabo</span><span class="pun">.</span><span class="pln">service</span><span class="pun">下所有类和子类的任意方法进行监控</span><span class="pln"> </span></code></li><li class="L8"><code class="language-c"><span class="pln">  </span><span class="pun">--&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;</span><span class="pln">aop</span><span class="pun">:</span><span class="pln">pointcut id</span><span class="pun">=</span><span class="str">"transactionPointcut"</span><span class="pln"> expression</span><span class="pun">=</span><span class="str">"execution(* com.lynzabo.service..*.*(..))"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li><li class="L0"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;!--</span><span class="pln"> </span></code></li><li class="L1"><code class="language-c"><span class="pln">   </span><span class="pun">定义一个通知器</span></code></li><li class="L2"><code class="language-c"><span class="pln">   </span><span class="pun">引用</span><span class="pln">txAdvice</span><span class="pun">，引入切入点</span><span class="pln">transactionPointcut </span><span class="pun">--&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;</span><span class="pln">aop</span><span class="pun">:</span><span class="pln">advisor advice</span><span class="pun">-</span><span class="pln">ref</span><span class="pun">=</span><span class="str">"txAdvice"</span><span class="pln"> pointcut</span><span class="pun">-</span><span class="pln">ref</span><span class="pun">=</span><span class="str">"transactionPointcut"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">aop</span><span class="pun">:</span><span class="pln">config</span><span class="pun">&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pun">&lt;!--</span><span class="pln"> </span></code></li><li class="L6"><code class="language-c"><span class="pln">  </span><span class="pun">定义通知</span></code></li><li class="L7"><code class="language-c"><span class="pln">  </span><span class="pun">使用</span><span class="pln">txManager</span><span class="pun">事务</span></code></li><li class="L8"><code class="language-c"><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pun">&lt;</span><span class="pln">tx</span><span class="pun">:</span><span class="pln">advice id</span><span class="pun">=</span><span class="str">"txAdvice"</span><span class="pln"> transaction</span><span class="pun">-</span><span class="pln">manager</span><span class="pun">=</span><span class="str">"txManager"</span><span class="pun">&gt;</span></code></li><li class="L0"><code class="language-c"><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">tx</span><span class="pun">:</span><span class="pln">attributes</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">   </span><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">以</span><span class="pln">get</span><span class="pun">开头的方法，都不支持事务</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">   </span><span class="pun">&lt;</span><span class="pln">tx</span><span class="pun">:</span><span class="pln">method name</span><span class="pun">=</span><span class="str">"get*"</span><span class="pln"> read</span><span class="pun">-</span><span class="pln">only</span><span class="pun">=</span><span class="str">"true"</span><span class="pln"> propagation</span><span class="pun">=</span><span class="str">"NOT_SUPPORTED"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">   </span><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">其他方法，使用默认的需要事务,使用方法和注解方法一样，属性名都一样</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">tx</span><span class="pun">:</span><span class="pln">method name</span><span class="pun">=</span><span class="str">"*"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pln"> </span><span class="pun">&lt;/</span><span class="pln">tx</span><span class="pun">:</span><span class="pln">attributes</span><span class="pun">&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">tx</span><span class="pun">:</span><span class="pln">advice</span><span class="pun">&gt;</span></code></li></ol></pre></div><div>在@Transactional上可以指定属性，和xml里配置aop一样：</div><div><div>propagation&nbsp; &nbsp;&nbsp;可选的事务传播行为设置</div><div>isolation&nbsp; &nbsp;&nbsp;可选的事务隔离级别设置</div><div>readOnly&nbsp; &nbsp;&nbsp;读写或只读事务，默认为读写</div><div>timeout&nbsp; &nbsp;&nbsp;事务超时时间设置</div><div>rollbackFor&nbsp; &nbsp;&nbsp;导致事务回滚的异常类数组</div><div>rollbackForClassName&nbsp; &nbsp;&nbsp;导致事务回滚的异常类名字数组</div><div>noRollbackFor&nbsp; &nbsp;&nbsp;不会导致事务回滚的异常类数组</div><div>noRollbackForClassName&nbsp; &nbsp;&nbsp;不会导致事务回滚的异常类名字数组</div></div><div><br></div><div>事务传播行为指：如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为：</div><div><div>PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。这是默认值。</div><div>PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起。</div><div>PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</div><div>PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</div><div>PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</div><div>PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</div><div>PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价。</div></div><div><br></div></font></div><div><font face="黑体"><div><div>隔离级别指：若干个并发的事务之间的隔离程度。定义了五个表示隔离级别的常量：</div><div>ISOLATION_DEFAULT：这是默认值，表示使用底层数据库的默认隔离级别。</div><div>ISOLATION_READ_UNCOMMITTED：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读，不可重复读和幻读，因此很少使用该隔离级别。</div><div>ISOLATION_READ_COMMITTED：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。</div><div>ISOLATION_REPEATABLE_READ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。该级别可以防止脏读和不可重复读。</div><div>ISOLATION_SERIALIZABLE：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</div></div><div><br></div><div><h4>SpringMVC</h4><div>@Controller注解表示该类扮演控制器的角色。</div><div>@RequestMapping注解用于将URL映射到任何一个类或者一个特定的处理方法上。</div></div><div><br></div><div>Struts采用值栈存储请求和响应的数据，通过OGNL存取数据， springmvc通过参数解析器是将request对象内容进行解析成方法形参，将响应数据和页面封装成ModelAndView对象，最后又将模型数据通过request对象传输到页面。 Jsp视图解析器默认使用jstl。springmvc的入口是一个servlet即前端控制器，而struts2入口是一个filter过虑器。<br></div><div><br></div><div><div><br></div><div>Spring框架中使用到了大量的设计模式，下面列举了比较有代表性的：</div><div>代理模式—在AOP和remoting中被用的比较多。</div><div>单例模式—在spring配置文件中定义的bean默认为单例模式。</div><div>模板方法—用来解决代码重复的问题。比如. RestTemplate, JmsTemplate, JpaTemplate。</div><div>前端控制器—Spring提供了DispatcherServlet来对请求进行分发。</div><div>依赖注入—贯穿于BeanFactory / ApplicationContext接口的核心理念。</div><div>工厂模式—BeanFactory用来创建对象的实例。</div></div></font></div><div style="font-family: 黑体;"><br></div></div><h4 style="line-height: 24.2667px;"><font face="黑体">Spring Boot/Spring Cloud</font></h4></div><div style="font-family: &quot;Helvetica Neue&quot;;"></div></span></w:sdt></span></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN"><div style="font-family: &quot;Helvetica Neue&quot;;"><br class="Apple-interchange-newline"><br></div><div><div style="font-family: &quot;Helvetica Neue&quot;; border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>Dubbo、Dubbox<br></h2></div><div style="line-height: 24.2667px;"><h3 style="font-family: &quot;Helvetica Neue&quot;;">Dubbo架构</h3><div style="font-family: &quot;Helvetica Neue&quot;;"><img border="0" src="All in_files/65475292.png"></div><div><div>节点角色说明：</div><div><ul><li>Provider: 暴露服务的服务提供方。</li><li>Consumer: 调用远程服务的服务消费方。</li><li>Registry: 服务注册与发现的注册中心。</li><li>Monitor: 统计服务的调用次数和调用时间的监控中心。</li><li>Container: 服务运行容器。</li></ul></div><div>调用关系说明：</div><div>1. 服务容器负责启动，加载，运行服务提供者。</div><div>2. 服务提供者在启动时，向注册中心注册自己提供的服务。</div><div>3. 服务消费者在启动时，向注册中心订阅自己所需的服务。</div><div>4. 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</div><div>5. 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</div><div>6. 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</div></div><div><br></div></div><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN" style="font-family: 黑体;"><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;">监控中心负责统计各服务调用次数，调用时间等，统计先在内存汇总后每分钟一次发送到监控中心服务器，并以报表展示</div><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;">服务提供者向注册中心注册其提供的服务，并汇报调用时间到监控中心，此时间不包含网络开销</div><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;">服务消费者向注册中心获取服务提供者地址列表，并根据负载算法直接调用提供者，同时汇报调用时间到监控中心，此时间包含网络开销</div><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;">注册中心，服务提供者，服务消费者三者之间均为长连接，监控中心除外</div><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;">注册中心通过长连接感知服务提供者的存在，服务提供者宕机，注册中心将立即推送事件通知消费者</div><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;">注册中心和监控中心全部宕机，不影响已运行的提供者和消费者，消费者在本地缓存了提供者列表</div><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;">注册中心和监控中心都是可选的，服务消费者可以直连服务提供者</div></span></w:sdt></span></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN"><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;">服务提供者无状态，可动态增加机器部署实例，注册中心将推送新的服务提供者信息给消费者</div><div style="font-family: 黑体;"><br></div><div style="font-family: 黑体;">注册中心可以为：</div><div style="font-family: 黑体;"><a href="http://dubbo.io/User+Guide-zh.htm#UserGuide-zh-Zookeeper%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83" style="color: rgb(143, 78, 11); text-decoration: none; outline: none; font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 13.3333px;">Zookeeper注册中心</a>、<a href="http://dubbo.io/User+Guide-zh.htm#UserGuide-zh-Redis%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83" style="color: rgb(143, 78, 11); text-decoration: none; outline: none; font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 13.3333px;">Redis注册中心</a>、<a href="http://dubbo.io/User+Guide-zh.htm#UserGuide-zh-Multicast%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83" style="color: rgb(143, 78, 11); text-decoration: none; outline: none; font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 13.3333px;">Multicast注册中心</a>（<span style="font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 13.3333px;">依赖于网络拓普和路由，跨机房有风险</span>）。</div><div style="font-family: 黑体;">高级用法：</div><div><div><ul><li>消费方直连提供者<br></li></ul></div><div><span style="font-family: 黑体;"><div><img border="0" src="All in_files/66010143.png"></div></span></div><div><span style="font-family: 黑体;">调试时候使用，这样不影响其他人</span><br></div><div><ul><li>提供者只订阅<br></li><li>A服务开发中，A依赖reference于B,C,D服务，我配置A服务只订阅，它能调别人服务，但不注册到注册中心，别人看不到这个服务，消费者直接可以使用上面的直连连接该服务，方便调试。</li><li>只注册</li></ul><div><div><img border="0" src="All in_files/66045295.png"></div></div></div><div><span style="font-family: 黑体;">A服务和B服务同时依赖于D服务，需要D服务在R1和R2上都注册，让别人调用。D服务依赖于C服务，C服务只在ZK1上注册，这时我们让D服务同时注册和订阅（要调用C）ZK1，对ZK2只注册服务。这个场景经常在容灾，多ZK上会用到。</span><br></div></div><div><div style="font-family: 黑体;"><img border="0" src="All in_files/66051306.png"></div><div><div><ul><li>Dubbo在安全机制方面是如何解决的&nbsp;<br></li></ul></div><div><font face="黑体">Dubbo通过Token令牌防止用户绕过注册中心直连，然后在注册中心上管理授权。Dubbo还提供服务黑白名单，来控制服务所允许的调用方。</font></div></div><h3 style="font-family: 黑体;">Dubbox</h3><div><div><font face="黑体">Dubbo提供了多种均衡策略，缺省为random随机调、还有轮询、一致性Hash、最少活跃调用数。</font></div><div><font face="黑体"><br></font></div><div><font face="黑体">dubbx是当当网对原阿里dubbo2.x的升级，并且兼容原有的dubbox。其中升级了zookeeper和spring版本，并且支持restfull风格的远程调用。</font></div><div><font face="黑体"><br></font></div><div><font face="黑体">dubbox的新特性介绍：</font></div><div><ul><li>支持REST风格远程调用（HTTP + JSON/XML)：基于非常成熟的JBoss RestEasy框 架。 另外，REST调用也达到了比较高的性能，在基准测试下，HTTP + JSON与Dubbo 2.x默认的RPC协议（即TCP + Hessian2二进制序列化）之间只有1.5倍左右的差距。</li><li>支持基于Kryo和FST的Java高效序列化实现：基于当今比较知名的Kryo和FST高性能序列化库，为Dubbo默认的RPC协议添加新的序列化实现，并优化调整了其序列化体系，比较显著的提高了Dubbo RPC的性能，详见文档中的基准测试报告。</li><li>支持基于Jackson的JSON序列化：为Dubbo默认的RPC协议添加新的JSON序列化实现。</li><li>支持基于嵌入式Tomcat的HTTP remoting体系：用以逐步取代Dubbo中旧版本的嵌入式Jetty，可以显著的提高REST等的远 程调用性能，并将Servlet API的支持从2.5升级到3.1。</li><li>升级Spring：将dubbo中Spring由2.x升级到目前最常用的3.x版本，减少版本冲突带来的麻烦。</li><li>升级ZooKeeper客户端：将dubbo中的zookeeper客户端升级到最新的版本，以修正老版本中包含的bug。</li><li>支持完全基于Java代码的Dubbo配置：基于Spring的Java Config，实现完全无XML的纯Java代码方式来配置dubbo</li></ul></div><div><font face="黑体"><br></font></div><div><font face="黑体">注：dubbox和dubbo 2.x是兼容的，没有改变dubbo的任何已有的功能和配置方式（除了升级了spring之类的版本）</font></div></div></div></span></w:sdt></span></div><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN" style="font-family: 黑体;"><br></span></w:sdt></span></div></div><div style="line-height: 24.2667px;"><font face="黑体">我的测试工程代码：</font></div><div style="line-height: 24.2667px;"><font face="黑体">matrix-service-template<br></font></div><div style="line-height: 24.2667px;"><font face="黑体"><br></font></div><div style="line-height: 24.2667px;"><font face="黑体">spring-context.xml</font></div><div style="line-height: 24.2667px;"><font face="黑体"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;?</span><span class="pln">xml version</span><span class="pun">=</span><span class="str">"1.0"</span><span class="pln"> encoding</span><span class="pun">=</span><span class="str">"UTF-8"</span><span class="pun">?&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pun">&lt;</span><span class="pln">beans xmlns</span><span class="pun">=</span><span class="str">"http://www.springframework.org/schema/beans"</span></code></li><li class="L2"><code class="language-c"><span class="pln">       xmlns</span><span class="pun">:</span><span class="pln">xsi</span><span class="pun">=</span><span class="str">"http://www.w3.org/2001/XMLSchema-instance"</span></code></li><li class="L3"><code class="language-c"><span class="pln">       xmlns</span><span class="pun">:</span><span class="pln">context</span><span class="pun">=</span><span class="str">"http://www.springframework.org/schema/context"</span></code></li><li class="L4"><code class="language-c"><span class="pln">       xmlns</span><span class="pun">:</span><span class="pln">aop</span><span class="pun">=</span><span class="str">"http://www.springframework.org/schema/aop"</span></code></li><li class="L5"><code class="language-c"><span class="pln">       xsi</span><span class="pun">:</span><span class="pln">schemaLocation</span><span class="pun">=</span><span class="str">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span><span class="pun">&gt;</span></code></li><li class="L6"><code class="language-c"></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="str">&lt;description&gt;</span><span class="pun">服务</span><span class="typ">Spring</span><span class="pun">全局配置&lt;/</span><span class="pln">description</span><span class="pun">&gt;</span></code></li><li class="L8"><code class="language-c"></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">采用注释的方式配置</span><span class="pln">bean </span><span class="pun">--&gt;</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">context</span><span class="pun">:</span><span class="pln">annotation</span><span class="pun">-</span><span class="pln">config</span><span class="pun">/&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">配置要扫描的包</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">context</span><span class="pun">:</span><span class="pln">component</span><span class="pun">-</span><span class="pln">scan base</span><span class="pun">-</span><span class="pln">package</span><span class="pun">=</span><span class="str">"com.le.matrix.template"</span><span class="pun">/&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">读入配置属性文件</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">context</span><span class="pun">:</span><span class="kwd">property</span><span class="pun">-</span><span class="pln">placeholder location</span><span class="pun">=</span><span class="str">"classpath:db.properties,classpath:config.properties"</span><span class="pun">/&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--&lt;</span><span class="pln">context</span><span class="pun">:</span><span class="kwd">property</span><span class="pun">-</span><span class="pln">placeholder location</span><span class="pun">=</span><span class="str">"classpath:public_system.properties,classpath:db.properties"</span><span class="pun">/&gt;--&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">读入配置属性文件</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--&lt;</span><span class="pln">bean id</span><span class="pun">=</span><span class="str">"propertyConfigurer"</span></code></li><li class="L8"><code class="language-c"><span class="pln">          </span><span class="kwd">class</span><span class="pun">=</span><span class="str">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span><span class="pun">&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pln">           </span><span class="pun">&lt;!–&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"location"</span><span class="pln"> value</span><span class="pun">=</span><span class="str">"classpath:jdbc.properties"</span><span class="pln"> </span><span class="pun">/&gt;–&gt;</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;/</span><span class="pln">bean</span><span class="pun">&gt;--&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--</span><span class="pln"> proxy</span><span class="pun">-</span><span class="pln">target</span><span class="pun">-</span><span class="kwd">class</span><span class="pun">默认</span><span class="str">"false"</span><span class="pun">,更改为</span><span class="str">"ture"</span><span class="pun">使用</span><span class="typ">CGLib</span><span class="pun">动态代理</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">aop</span><span class="pun">:</span><span class="pln">aspectj</span><span class="pun">-</span><span class="pln">autoproxy proxy</span><span class="pun">-</span><span class="pln">target</span><span class="pun">-</span><span class="kwd">class</span><span class="pun">=</span><span class="str">"true"</span><span class="pun">/&gt;</span></code></li><li class="L3"><code class="language-c"></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">import</span><span class="pln"> resource</span><span class="pun">=</span><span class="str">"classpath:spring/spring-mybatis.xml"</span><span class="pun">/&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">import</span><span class="pln"> resource</span><span class="pun">=</span><span class="str">"classpath:spring/spring-tx.xml"</span><span class="pun">/&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">import</span><span class="pln"> resource</span><span class="pun">=</span><span class="str">"classpath*:spring/dubbo/spring-*.xml"</span><span class="pun">/&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--&lt;</span><span class="kwd">import</span><span class="pln"> resource</span><span class="pun">=</span><span class="str">"classpath*:spring/dubbo/spring-*.xml"</span><span class="pun">/&gt;--&gt;</span></code></li><li class="L8"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">beans</span><span class="pun">&gt;</span></code></li></ol></pre></div><div>spring-dubbo-provider.xml<br></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;?</span><span class="pln">xml version</span><span class="pun">=</span><span class="str">"1.0"</span><span class="pln"> encoding</span><span class="pun">=</span><span class="str">"UTF-8"</span><span class="pun">?&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pun">&lt;</span><span class="pln">beans xmlns</span><span class="pun">=</span><span class="str">"http://www.springframework.org/schema/beans"</span></code></li><li class="L2"><code class="language-c"><span class="pln">       xmlns</span><span class="pun">:</span><span class="pln">xsi</span><span class="pun">=</span><span class="str">"http://www.w3.org/2001/XMLSchema-instance"</span></code></li><li class="L3"><code class="language-c"><span class="pln">       xmlns</span><span class="pun">:</span><span class="pln">dubbo</span><span class="pun">=</span><span class="str">"http://code.alibabatech.com/schema/dubbo"</span></code></li><li class="L4"><code class="language-c"><span class="pln">       xsi</span><span class="pun">:</span><span class="pln">schemaLocation</span><span class="pun">=</span><span class="str">"</span><span class="pln">http</span><span class="pun">:</span><span class="com">//www.springframework.org/schema/beans</span></code></li><li class="L5"><code class="language-c"><span class="pln">       http</span><span class="pun">:</span><span class="com">//www.springframework.org/schema/beans/spring-beans.xsd</span></code></li><li class="L6"><code class="language-c"><span class="pln">       http</span><span class="pun">:</span><span class="com">//code.alibabatech.com/schema/dubbo</span></code></li><li class="L7"><code class="language-c"><span class="pln">       http</span><span class="pun">:</span><span class="com">//code.alibabatech.com/schema/dubbo/dubbo.xsd"&gt;</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">提供方应用信息，用于计算依赖关系</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">dubbo</span><span class="pun">:</span><span class="pln">application name</span><span class="pun">=</span><span class="str">"matrix-service-template"</span><span class="pln"> owner</span><span class="pun">=</span><span class="str">"matrix"</span><span class="pln"> organization</span><span class="pun">=</span><span class="str">"le"</span><span class="pun">/&gt;</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">使用</span><span class="pln">zookeeper</span><span class="pun">注册中心暴露服务地址</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">dubbo</span><span class="pun">:</span><span class="pln">registry address</span><span class="pun">=</span><span class="str">"${dubbo.registry.zkAddr}"</span><span class="pun">/&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--自动扫描该包路径，省去每个都配合</span><span class="pln">dubbo</span><span class="pun">:</span><span class="pln">service</span><span class="pun">--&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">dubbo</span><span class="pun">:</span><span class="pln">annotation package</span><span class="pun">=</span><span class="str">"com.le.matrix.template.service"</span><span class="pun">/&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--</span><span class="pln"> dubbo</span><span class="pun">协议定义</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">dubbo</span><span class="pun">:</span><span class="pln">protocol name</span><span class="pun">=</span><span class="str">"dubbo"</span><span class="pln"> port</span><span class="pun">=</span><span class="str">"${dubbo.protocol.dubbo}"</span><span class="pun">/&gt;</span></code></li><li class="L6"><code class="language-c"></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--使用内置</span><span class="pln">tomcat</span><span class="pun">服务器</span><span class="pln">   </span><span class="pun">可以省去</span><span class="pln">webapp</span><span class="pun">里面内容</span><span class="pln">          </span><span class="pun">!!!与下面二选一--&gt;</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--如果直接</span><span class="typ">Main</span><span class="pun">启动/</span><span class="pln">junit</span><span class="pun">启动（一般测试时候用），使用下面配置</span><span class="pln">  </span><span class="pun">--&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--缺省配置--&gt;</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--&lt;</span><span class="pln">dubbo</span><span class="pun">:</span><span class="pln">protocol name</span><span class="pun">=</span><span class="str">"rest"</span><span class="pln"> port</span><span class="pun">=</span><span class="str">"${dubbo.protocol.rest}"</span><span class="pln"> threads</span><span class="pun">=</span><span class="str">"500"</span><span class="pln"> contextpath</span><span class="pun">=</span><span class="str">"services"</span><span class="pln"> server</span><span class="pun">=</span><span class="str">"tomcat"</span><span class="pln"> accepts</span><span class="pun">=</span><span class="str">"500"</span></code></li><li class="L1"><code class="language-c"><span class="pln">                    </span><span class="pun">/&gt;--&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--使用内置</span><span class="pln">tomcat</span><span class="pun">服务器</span><span class="pln">   </span><span class="pun">可以省去</span><span class="pln">webapp</span><span class="pun">里面内容--&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--自定义配置--&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--&lt;</span><span class="pln">dubbo</span><span class="pun">:</span><span class="pln">protocol name</span><span class="pun">=</span><span class="str">"rest"</span><span class="pln"> port</span><span class="pun">=</span><span class="str">"${dubbo.protocol.rest}"</span><span class="pln"> threads</span><span class="pun">=</span><span class="str">"500"</span><span class="pln"> contextpath</span><span class="pun">=</span><span class="str">"services"</span><span class="pln"> server</span><span class="pun">=</span><span class="str">"tomcat"</span><span class="pln"> accepts</span><span class="pun">=</span><span class="str">"500"</span></code></li><li class="L5"><code class="language-c"><span class="pln">                    extension</span><span class="pun">=</span><span class="str">"</span><span class="pln">com</span><span class="pun">.</span><span class="pln">le</span><span class="pun">.</span><span class="pln">matrix</span><span class="pun">.</span><span class="kwd">template</span><span class="pun">.</span><span class="pln">extension</span><span class="pun">.</span><span class="pln">tomcat</span><span class="pun">.</span><span class="typ">TraceInterceptor</span><span class="pun">,</span></code></li><li class="L6"><code class="language-c"><span class="pln">                    com</span><span class="pun">.</span><span class="pln">le</span><span class="pun">.</span><span class="pln">matrix</span><span class="pun">.</span><span class="kwd">template</span><span class="pun">.</span><span class="pln">extension</span><span class="pun">.</span><span class="pln">tomcat</span><span class="pun">.</span><span class="typ">TraceFilter</span><span class="pun">,</span></code></li><li class="L7"><code class="language-c"><span class="pln">                    com</span><span class="pun">.</span><span class="pln">le</span><span class="pun">.</span><span class="pln">matrix</span><span class="pun">.</span><span class="kwd">template</span><span class="pun">.</span><span class="pln">extension</span><span class="pun">.</span><span class="pln">tomcat</span><span class="pun">.</span><span class="typ">ClientTraceFilter</span><span class="pun">,</span></code></li><li class="L8"><code class="language-c"><span class="pln">                    com</span><span class="pun">.</span><span class="pln">le</span><span class="pun">.</span><span class="pln">matrix</span><span class="pun">.</span><span class="kwd">template</span><span class="pun">.</span><span class="pln">extension</span><span class="pun">.</span><span class="pln">tomcat</span><span class="pun">.</span><span class="typ">DynamicTraceBinding</span><span class="pun">,</span></code></li><li class="L9"><code class="language-c"><span class="pln">                    com</span><span class="pun">.</span><span class="pln">le</span><span class="pun">.</span><span class="pln">matrix</span><span class="pun">.</span><span class="kwd">template</span><span class="pun">.</span><span class="pln">extension</span><span class="pun">.</span><span class="pln">tomcat</span><span class="pun">.</span><span class="typ">CustomExceptionMapper</span><span class="pun">,</span></code></li><li class="L0"><code class="language-c"><span class="pln">                    com</span><span class="pun">.</span><span class="pln">alibaba</span><span class="pun">.</span><span class="pln">dubbo</span><span class="pun">.</span><span class="pln">rpc</span><span class="pun">.</span><span class="pln">protocol</span><span class="pun">.</span><span class="pln">rest</span><span class="pun">.</span><span class="pln">support</span><span class="pun">.</span><span class="typ">LoggingFilter</span><span class="str">"</span><span class="pun">/&gt;--&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--如果使用外部</span><span class="pln">jetty</span><span class="pun">服务器</span><span class="pln">          </span><span class="pun">!!!与上面二选一--&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--</span><span class="pln"> rest</span><span class="pun">协议定义：</span></code></li><li class="L3"><code class="language-c"><span class="pln">        port</span><span class="pun">：和服务器端口保持一致</span></code></li><li class="L4"><code class="language-c"><span class="pln">        contextpath</span><span class="pun">：和</span><span class="pln">web</span><span class="pun">服务器</span><span class="pln">web</span><span class="pun">.</span><span class="pln">xml</span><span class="pun">定义保持一致</span></code></li><li class="L5"><code class="language-c"><span class="pln">        server</span><span class="pun">：默认</span><span class="pln">servlet</span><span class="pun">，在没有在</span><span class="pln">web</span><span class="pun">服务器中运行的时候，可以写</span><span class="pln">tomcat</span><span class="pun">等由应用启动一个</span><span class="pln">web</span><span class="pun">服务器--&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">dubbo</span><span class="pun">:</span><span class="pln">protocol name</span><span class="pun">=</span><span class="str">"rest"</span><span class="pln"> port</span><span class="pun">=</span><span class="str">"${dubbo.protocol.rest}"</span><span class="pln"> contextpath</span><span class="pun">=</span><span class="str">"services"</span><span class="pln"> server</span><span class="pun">=</span><span class="str">"servlet"</span><span class="pun">/&gt;</span></code></li><li class="L7"><code class="language-c"></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--暴露服务列表--&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--关于</span><span class="pln">service</span><span class="pun">属性配置看</span><span class="pln">http</span><span class="pun">:</span><span class="com">//dubbo.io/User+Guide-zh.htm#UserGuide-zh-%253Cdubbo%253Aservice%252F%253E--&gt;</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--</span><span class="typ">HelloWorldFacade</span><span class="pun">服务</span></code></li><li class="L1"><code class="language-c"><span class="pln">           interface     </span><span class="pun">服务接口名</span></code></li><li class="L2"><code class="language-c"><span class="pln">           ref           </span><span class="pun">服务对象实现引用</span></code></li><li class="L3"><code class="language-c"><span class="pln">           retries       </span><span class="pun">远程服务调用重试次数，默认为</span><span class="lit">2</span><span class="pun">，不包括第一次调用，不需要重试请设为</span><span class="lit">0</span></code></li><li class="L4"><code class="language-c"><span class="pln">           protocol      </span><span class="pun">协议，默认为上面定义的所有协议</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="pun">--&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">dubbo</span><span class="pun">:</span><span class="pln">service interface</span><span class="pun">=</span><span class="str">"com.le.matrix.template.facade.HelloWorldFacade"</span><span class="pln"> ref</span><span class="pun">=</span><span class="str">"helloWorldService"</span></code></li><li class="L7"><code class="language-c"><span class="pln">                   retries</span><span class="pun">=</span><span class="str">"0"</span><span class="pln"> protocol</span><span class="pun">=</span><span class="str">"dubbo"</span><span class="pun">/&gt;</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--</span><span class="typ">HelloWorld2Facade</span><span class="pun">服务</span></code></li><li class="L9"><code class="language-c"><span class="pln">                  interface     </span><span class="pun">接口名</span></code></li><li class="L0"><code class="language-c"><span class="pln">                  ref           </span><span class="pun">服务对象实现引用</span></code></li><li class="L1"><code class="language-c"><span class="pln">                  retries       </span><span class="pun">远程服务调用重试次数，默认为</span><span class="lit">2</span><span class="pun">，不包括第一次调用，不需要重试请设为</span><span class="lit">0</span></code></li><li class="L2"><code class="language-c"><span class="pln">                  protocol      </span><span class="pun">协议，默认为上面定义的所有协议</span></code></li><li class="L3"><code class="language-c"><span class="pln">                  timeout       </span><span class="pun">远程服务调用超时时间</span></code></li><li class="L4"><code class="language-c"><span class="pln">                  connections   </span><span class="pun">对每个提供者的最大连接数，</span><span class="pln">rmi</span><span class="pun">、</span><span class="pln">http</span><span class="pun">、</span><span class="pln">hessian</span><span class="pun">等短连接协议表示限制连接数，</span><span class="pln">dubbo</span><span class="pun">等长连接协表示建立的长连接个数</span></code></li><li class="L5"><code class="language-c"><span class="pln">                  validation    </span><span class="pun">是否启用</span><span class="pln">JSR303</span><span class="pun">标准注解验证，如果启用，将对方法参数上的注解进行校验</span></code></li><li class="L6"><code class="language-c"><span class="pln">                  group         </span><span class="pun">服务分组，当一个接口有多个实现，可以用分组区分</span><span class="pln">          TODO</span></code></li><li class="L7"><code class="language-c"><span class="pln">           </span><span class="pun">--&gt;</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">dubbo</span><span class="pun">:</span><span class="pln">service interface</span><span class="pun">=</span><span class="str">"com.le.matrix.template.facade.HelloWorld2Facade"</span><span class="pln"> ref</span><span class="pun">=</span><span class="str">"helloWorld2Service"</span><span class="pln"> protocol</span><span class="pun">=</span><span class="str">"rest"</span></code></li><li class="L9"><code class="language-c"><span class="pln">                   timeout</span><span class="pun">=</span><span class="str">"2000"</span><span class="pln"> connections</span><span class="pun">=</span><span class="str">"100"</span><span class="pln"> validation</span><span class="pun">=</span><span class="str">"true"</span><span class="pun">/&gt;</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--</span><span class="typ">HelloWorld3Facade</span><span class="pun">服务</span></code></li><li class="L1"><code class="language-c"><span class="pln">                  interface     </span><span class="pun">接口名</span></code></li><li class="L2"><code class="language-c"><span class="pln">                  ref           </span><span class="pun">服务对象实现引用</span></code></li><li class="L3"><code class="language-c"><span class="pln">                  retries       </span><span class="pun">远程服务调用重试次数，默认为</span><span class="lit">2</span><span class="pun">，不包括第一次调用，不需要重试请设为</span><span class="lit">0</span></code></li><li class="L4"><code class="language-c"><span class="pln">                  protocol      </span><span class="pun">协议，默认为上面定义的所有协议</span></code></li><li class="L5"><code class="language-c"><span class="pln">                  timeout       </span><span class="pun">远程服务调用超时时间</span></code></li><li class="L6"><code class="language-c"><span class="pln">                  connections   </span><span class="pun">对每个提供者的最大连接数，</span><span class="pln">rmi</span><span class="pun">、</span><span class="pln">http</span><span class="pun">、</span><span class="pln">hessian</span><span class="pun">等短连接协议表示限制连接数，</span><span class="pln">dubbo</span><span class="pun">等长连接协表示建立的长连接个数</span></code></li><li class="L7"><code class="language-c"><span class="pln">                  validation    </span><span class="pun">是否启用</span><span class="pln">JSR303</span><span class="pun">标准注解验证，如果启用，将对方法参数上的注解进行校验</span></code></li><li class="L8"><code class="language-c"><span class="pln">           </span><span class="pun">--&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">dubbo</span><span class="pun">:</span><span class="pln">service interface</span><span class="pun">=</span><span class="str">"com.le.matrix.template.facade.HelloWorld3Facade"</span><span class="pln"> ref</span><span class="pun">=</span><span class="str">"helloWorld3Service"</span></code></li><li class="L0"><code class="language-c"><span class="pln">                   timeout</span><span class="pun">=</span><span class="str">"2000"</span><span class="pln"> connections</span><span class="pun">=</span><span class="str">"100"</span><span class="pln"> validation</span><span class="pun">=</span><span class="str">"true"</span><span class="pun">/&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--</span><span class="typ">HelloWorld5Facade</span><span class="pun">服务</span></code></li><li class="L2"><code class="language-c"><span class="pln">                  interface     </span><span class="pun">接口名</span></code></li><li class="L3"><code class="language-c"><span class="pln">                  ref           </span><span class="pun">服务对象实现引用</span></code></li><li class="L4"><code class="language-c"><span class="pln">                  retries       </span><span class="pun">远程服务调用重试次数，默认为</span><span class="lit">2</span><span class="pun">，不包括第一次调用，不需要重试请设为</span><span class="lit">0</span></code></li><li class="L5"><code class="language-c"><span class="pln">                  protocol      </span><span class="pun">协议，默认为上面定义的所有协议</span></code></li><li class="L6"><code class="language-c"><span class="pln">                  timeout       </span><span class="pun">远程服务调用超时时间</span></code></li><li class="L7"><code class="language-c"><span class="pln">                  connections   </span><span class="pun">对每个提供者的最大连接数，</span><span class="pln">rmi</span><span class="pun">、</span><span class="pln">http</span><span class="pun">、</span><span class="pln">hessian</span><span class="pun">等短连接协议表示限制连接数，</span><span class="pln">dubbo</span><span class="pun">等长连接协表示建立的长连接个数</span></code></li><li class="L8"><code class="language-c"><span class="pln">                  validation    </span><span class="pun">是否启用</span><span class="pln">JSR303</span><span class="pun">标准注解验证，如果启用，将对方法参数上的注解进行校验</span></code></li><li class="L9"><code class="language-c"><span class="pln">                  version       </span><span class="pun">服务版本，建议使用两位数字版本，如：</span><span class="lit">1.0</span><span class="pun">，通常在接口不兼容时版本号才需要升级</span></code></li><li class="L0"><code class="language-c"><span class="pln">           </span><span class="pun">--&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">dubbo</span><span class="pun">:</span><span class="pln">service interface</span><span class="pun">=</span><span class="str">"com.le.matrix.template.facade.HelloWorld5Facade"</span><span class="pln"> ref</span><span class="pun">=</span><span class="str">"helloWorld5Service"</span></code></li><li class="L2"><code class="language-c"><span class="pln">                   timeout</span><span class="pun">=</span><span class="str">"2000"</span><span class="pln"> connections</span><span class="pun">=</span><span class="str">"100"</span><span class="pln"> validation</span><span class="pun">=</span><span class="str">"true"</span><span class="pln"> version</span><span class="pun">=</span><span class="str">"10.0"</span><span class="pun">/&gt;</span></code></li><li class="L3"><code class="language-c"></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">dubbo</span><span class="pun">:</span><span class="pln">service interface</span><span class="pun">=</span><span class="str">"com.le.matrix.template.facade.UserFacade"</span><span class="pln"> ref</span><span class="pun">=</span><span class="str">"userService"</span><span class="pln"> validation</span><span class="pun">=</span><span class="str">"true"</span><span class="pun">/&gt;</span></code></li><li class="L5"><code class="language-c"></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--&lt;</span><span class="pln">dubbo</span><span class="pun">:</span><span class="pln">reference interface</span><span class="pun">=</span><span class="str">"com.xxx.XxxService"</span><span class="pun">&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pln">        </span><span class="pun">&lt;</span><span class="pln">dubbo</span><span class="pun">:</span><span class="pln">method name</span><span class="pun">=</span><span class="str">"findXxx"</span><span class="pln"> timeout</span><span class="pun">=</span><span class="str">"3000"</span><span class="pln"> retries</span><span class="pun">=</span><span class="str">"2"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;/</span><span class="pln">dubbo</span><span class="pun">:</span><span class="pln">reference</span><span class="pun">&gt;--&gt;</span></code></li><li class="L9"><code class="language-c"></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--</span><span class="pln">TODO    </span><span class="pun">需要再次验证</span></code></li><li class="L1"><code class="language-c"><span class="pln">        </span><span class="lit">1.</span><span class="pun">验证</span><span class="pln">dubbo</span><span class="pun">/</span><span class="pln">rest</span><span class="pun">传对象</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="lit">2.</span><span class="pun">验证传对象</span><span class="pln">validate</span></code></li><li class="L3"><code class="language-c"><span class="pln">        </span><span class="lit">3.</span><span class="pun">验证服务端抛出异常，客户端</span><span class="pln">dubbo</span><span class="pun">/</span><span class="pln">rest</span><span class="pun">接收异常</span></code></li><li class="L4"><code class="language-c"><span class="pln">        </span><span class="lit">4.</span><span class="pun">验证服务端异常统一处理，并返回对应</span><span class="pln">http</span><span class="pun">状态码</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="pun">--&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">beans</span><span class="pun">&gt;</span></code></li></ol></pre></div><div>HelloWorld2ServiceImpl<br></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">package com</span><span class="pun">.</span><span class="pln">le</span><span class="pun">.</span><span class="pln">matrix</span><span class="pun">.</span><span class="kwd">template</span><span class="pun">.</span><span class="pln">service</span><span class="pun">.</span><span class="pln">impl</span><span class="pun">;</span></code></li><li class="L1"><code class="language-c"></code></li><li class="L2"><code class="language-c"><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">alibaba</span><span class="pun">.</span><span class="pln">dubbo</span><span class="pun">.</span><span class="pln">rpc</span><span class="pun">.</span><span class="pln">protocol</span><span class="pun">.</span><span class="pln">rest</span><span class="pun">.</span><span class="pln">support</span><span class="pun">.</span><span class="typ">ContentType</span><span class="pun">;</span></code></li><li class="L3"><code class="language-c"><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">le</span><span class="pun">.</span><span class="pln">matrix</span><span class="pun">.</span><span class="kwd">template</span><span class="pun">.</span><span class="pln">facade</span><span class="pun">.</span><span class="typ">HelloWorld2Facade</span><span class="pun">;</span></code></li><li class="L4"><code class="language-c"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">slf4j</span><span class="pun">.</span><span class="typ">Logger</span><span class="pun">;</span></code></li><li class="L5"><code class="language-c"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">slf4j</span><span class="pun">.</span><span class="typ">LoggerFactory</span><span class="pun">;</span></code></li><li class="L6"><code class="language-c"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">stereotype</span><span class="pun">.</span><span class="typ">Service</span><span class="pun">;</span></code></li><li class="L7"><code class="language-c"></code></li><li class="L8"><code class="language-c"><span class="kwd">import</span><span class="pln"> javax</span><span class="pun">.</span><span class="pln">ws</span><span class="pun">.</span><span class="pln">rs</span><span class="pun">.*;</span></code></li><li class="L9"><code class="language-c"><span class="kwd">import</span><span class="pln"> javax</span><span class="pun">.</span><span class="pln">ws</span><span class="pun">.</span><span class="pln">rs</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="typ">MediaType</span><span class="pun">;</span></code></li><li class="L0"><code class="language-c"></code></li><li class="L1"><code class="language-c"><span class="com">/**</span></code></li><li class="L2"><code class="language-c"><span class="com"> * Created by linzhanbo on 2016/10/10.</span></code></li><li class="L3"><code class="language-c"><span class="com"> */</span></code></li><li class="L4"><code class="language-c"><span class="lit">@Service</span><span class="pun">(</span><span class="str">"helloWorld2Service"</span><span class="pun">)</span></code></li><li class="L5"><code class="language-c"><span class="com">//Rest定义、异常处理详看 RestEasy  http://dangdangdotcom.github.io/dubbox/rest.html</span></code></li><li class="L6"><code class="language-c"><span class="com">//如统一处理使用javax.ws.rs，若异常    http://redhacker.iteye.com/blog/1924071</span></code></li><li class="L7"><code class="language-c"><span class="com">//REST路径</span></code></li><li class="L8"><code class="language-c"><span class="lit">@Path</span><span class="pun">(</span><span class="str">"helloWorld2"</span><span class="pun">)</span></code></li><li class="L9"><code class="language-c"><span class="com">//标注可接受请求的MIME媒体类型</span></code></li><li class="L0"><code class="language-c"><span class="lit">@Consumes</span><span class="pun">({</span><span class="typ">MediaType</span><span class="pun">.</span><span class="pln">APPLICATION_JSON</span><span class="pun">,</span><span class="pln"> </span><span class="typ">MediaType</span><span class="pun">.</span><span class="pln">TEXT_XML</span><span class="pun">})</span></code></li><li class="L1"><code class="language-c"><span class="com">//标注返回的MIME媒体类型</span></code></li><li class="L2"><code class="language-c"><span class="lit">@Produces</span><span class="pun">({</span><span class="typ">ContentType</span><span class="pun">.</span><span class="pln">APPLICATION_JSON_UTF_8</span><span class="pun">,</span><span class="pln"> </span><span class="typ">ContentType</span><span class="pun">.</span><span class="pln">TEXT_XML_UTF_8</span><span class="pun">})</span></code></li><li class="L3"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HelloWorld2ServiceImpl</span><span class="pln"> implements </span><span class="typ">HelloWorld2Facade</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Logger</span><span class="pln"> logger </span><span class="pun">=</span><span class="pln"> </span><span class="typ">LoggerFactory</span><span class="pun">.</span><span class="pln">getLogger</span><span class="pun">(</span><span class="typ">HelloWorld2ServiceImpl</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span></code></li><li class="L5"><code class="language-c"></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="lit">@GET</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="lit">@Path</span><span class="pun">(</span><span class="str">"{id}"</span><span class="pun">)</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="lit">@Override</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> sayHi</span><span class="pun">(</span><span class="lit">@PathParam</span><span class="pun">(</span><span class="str">"id"</span><span class="pun">)</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> id</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-c"><span class="pln">        </span><span class="typ">String</span><span class="pln"> hiStr </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Hello,"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> id</span><span class="pun">;</span></code></li><li class="L1"><code class="language-c"><span class="pln">        logger</span><span class="pun">.</span><span class="pln">debug</span><span class="pun">(</span><span class="str">"sayhello to {}"</span><span class="pun">,</span><span class="pln"> id</span><span class="pun">);</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> hiStr</span><span class="pun">;</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L4"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div>HelloWorldServiceImpl<br></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">package com</span><span class="pun">.</span><span class="pln">le</span><span class="pun">.</span><span class="pln">matrix</span><span class="pun">.</span><span class="kwd">template</span><span class="pun">.</span><span class="pln">service</span><span class="pun">.</span><span class="pln">impl</span><span class="pun">;</span></code></li><li class="L1"><code class="language-c"></code></li><li class="L2"><code class="language-c"><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">le</span><span class="pun">.</span><span class="pln">matrix</span><span class="pun">.</span><span class="kwd">template</span><span class="pun">.</span><span class="pln">facade</span><span class="pun">.</span><span class="typ">HelloWorldFacade</span><span class="pun">;</span></code></li><li class="L3"><code class="language-c"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">slf4j</span><span class="pun">.</span><span class="typ">Logger</span><span class="pun">;</span></code></li><li class="L4"><code class="language-c"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">slf4j</span><span class="pun">.</span><span class="typ">LoggerFactory</span><span class="pun">;</span></code></li><li class="L5"><code class="language-c"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">stereotype</span><span class="pun">.</span><span class="typ">Service</span><span class="pun">;</span></code></li><li class="L6"><code class="language-c"></code></li><li class="L7"><code class="language-c"><span class="com">/**</span></code></li><li class="L8"><code class="language-c"><span class="com"> * Created by linzhanbo on 2016/10/10.</span></code></li><li class="L9"><code class="language-c"><span class="com"> */</span></code></li><li class="L0"><code class="language-c"><span class="lit">@Service</span><span class="pun">(</span><span class="str">"helloWorldService"</span><span class="pun">)</span></code></li><li class="L1"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HelloWorldServiceImpl</span><span class="pln"> implements </span><span class="typ">HelloWorldFacade</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Logger</span><span class="pln"> logger </span><span class="pun">=</span><span class="pln"> </span><span class="typ">LoggerFactory</span><span class="pun">.</span><span class="pln">getLogger</span><span class="pun">(</span><span class="typ">HelloWorldServiceImpl</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="lit">@Override</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> sayHello</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> username</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-c"><span class="pln">        </span><span class="typ">String</span><span class="pln"> helloStr </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Hello,"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> username</span><span class="pun">;</span></code></li><li class="L7"><code class="language-c"><span class="pln">        logger</span><span class="pun">.</span><span class="pln">debug</span><span class="pun">(</span><span class="str">"sayhello to {}"</span><span class="pun">,</span><span class="pln"> username</span><span class="pun">);</span></code></li><li class="L8"><code class="language-c"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> helloStr</span><span class="pun">;</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L0"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div>spring-dubbo-consumer.xml<br></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;?</span><span class="pln">xml version</span><span class="pun">=</span><span class="str">"1.0"</span><span class="pln"> encoding</span><span class="pun">=</span><span class="str">"UTF-8"</span><span class="pun">?&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pun">&lt;</span><span class="pln">beans xmlns</span><span class="pun">=</span><span class="str">"http://www.springframework.org/schema/beans"</span></code></li><li class="L2"><code class="language-c"><span class="pln">       xmlns</span><span class="pun">:</span><span class="pln">xsi</span><span class="pun">=</span><span class="str">"http://www.w3.org/2001/XMLSchema-instance"</span></code></li><li class="L3"><code class="language-c"><span class="pln">       xsi</span><span class="pun">:</span><span class="pln">schemaLocation</span><span class="pun">=</span><span class="str">"</span><span class="pln">http</span><span class="pun">:</span><span class="com">//www.springframework.org/schema/beans</span></code></li><li class="L4"><code class="language-c"><span class="pln">       http</span><span class="pun">:</span><span class="com">//www.springframework.org/schema/beans/spring-beans.xsd"&gt;</span></code></li><li class="L5"><code class="language-c"></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">调用</span><span class="typ">HelloWorldFacade</span><span class="pun">服务</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--&lt;</span><span class="pln">dubbo</span><span class="pun">:</span><span class="pln">reference interface</span><span class="pun">=</span><span class="str">"com.le.matrix.template.facade.HelloWorldFacade"</span><span class="pln"> id</span><span class="pun">=</span><span class="str">"helloWorldssService"</span></code></li><li class="L8"><code class="language-c"><span class="pln">                     check</span><span class="pun">=</span><span class="str">"false"</span><span class="pln"> </span><span class="pun">/&gt;--&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">beans</span><span class="pun">&gt;</span></code></li></ol></pre></div><div><br></div></div><div>matrix-web-template<br></div><div><br></div><div>spring-dubbo-consumer.xml<br></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;?</span><span class="pln">xml version</span><span class="pun">=</span><span class="str">"1.0"</span><span class="pln"> encoding</span><span class="pun">=</span><span class="str">"UTF-8"</span><span class="pun">?&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pun">&lt;</span><span class="pln">beans xmlns</span><span class="pun">:</span><span class="pln">xsi</span><span class="pun">=</span><span class="str">"http://www.w3.org/2001/XMLSchema-instance"</span></code></li><li class="L2"><code class="language-c"><span class="pln">       xmlns</span><span class="pun">:</span><span class="pln">dubbo</span><span class="pun">=</span><span class="str">"http://code.alibabatech.com/schema/dubbo"</span></code></li><li class="L3"><code class="language-c"><span class="pln">       xmlns</span><span class="pun">=</span><span class="str">"http://www.springframework.org/schema/beans"</span></code></li><li class="L4"><code class="language-c"><span class="pln">       xsi</span><span class="pun">:</span><span class="pln">schemaLocation</span><span class="pun">=</span><span class="str">"</span><span class="pln">http</span><span class="pun">:</span><span class="com">//www.springframework.org/schema/beans</span></code></li><li class="L5"><code class="language-c"><span class="pln">       http</span><span class="pun">:</span><span class="com">//www.springframework.org/schema/beans/spring-beans.xsd</span></code></li><li class="L6"><code class="language-c"><span class="pln">       http</span><span class="pun">:</span><span class="com">//code.alibabatech.com/schema/dubbo</span></code></li><li class="L7"><code class="language-c"><span class="pln">       http</span><span class="pun">:</span><span class="com">//code.alibabatech.com/schema/dubbo/dubbo.xsd"&gt;</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">提供方应用信息，用于计算依赖关系</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">dubbo</span><span class="pun">:</span><span class="pln">application name</span><span class="pun">=</span><span class="str">"matrix-web-redis"</span><span class="pln"> owner</span><span class="pun">=</span><span class="str">"matrix"</span><span class="pln"> organization</span><span class="pun">=</span><span class="str">"le"</span><span class="pun">/&gt;</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">使用</span><span class="pln">zookeeper</span><span class="pun">注册中心暴露服务地址</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">dubbo</span><span class="pun">:</span><span class="pln">registry address</span><span class="pun">=</span><span class="str">"${dubbo.registry.zkAddr}"</span><span class="pun">/&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--服务引用列表--&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--关于</span><span class="pln">reference</span><span class="pun">属性配置看</span><span class="pln">http</span><span class="pun">:</span><span class="com">//dubbo.io/User+Guide-zh.htm#UserGuide-zh-%253Cdubbo%253Areference%252F%253E--&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">调用</span><span class="typ">HelloWorldFacade</span><span class="pun">服务</span></code></li><li class="L5"><code class="language-c"><span class="pln">           interface     </span><span class="pun">服务接口名</span></code></li><li class="L6"><code class="language-c"><span class="pln">           id            </span><span class="pun">服务引用</span><span class="typ">BeanId</span></code></li><li class="L7"><code class="language-c"><span class="pln">           check         </span><span class="pun">启动时检查提供者是否存在，</span><span class="kwd">true</span><span class="pun">报错，</span><span class="kwd">false</span><span class="pun">忽略</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">--&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">dubbo</span><span class="pun">:</span><span class="pln">reference interface</span><span class="pun">=</span><span class="str">"com.le.matrix.template.facade.HelloWorldFacade"</span><span class="pln"> id</span><span class="pun">=</span><span class="str">"helloWorldService"</span></code></li><li class="L0"><code class="language-c"><span class="pln">                     check</span><span class="pun">=</span><span class="str">"false"</span><span class="pun">/&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">调用</span><span class="typ">HelloWorldFacade</span><span class="pun">服务</span></code></li><li class="L2"><code class="language-c"><span class="pln">           interface     </span><span class="pun">服务接口名</span></code></li><li class="L3"><code class="language-c"><span class="pln">           id            </span><span class="pun">服务引用</span><span class="typ">BeanId</span></code></li><li class="L4"><code class="language-c"><span class="pln">           check         </span><span class="pun">启动时检查提供者是否存在，</span><span class="kwd">true</span><span class="pun">报错，</span><span class="kwd">false</span><span class="pun">忽略</span></code></li><li class="L5"><code class="language-c"><span class="pln">           url           </span><span class="pun">点对点直连服务提供者地址，将绕过注册中心</span><span class="pln">        </span><span class="pun">调试时候经常使用，线上不要用，否则不会注册众测中心，也不会有负载等等功能</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="pun">--&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">dubbo</span><span class="pun">:</span><span class="pln">reference interface</span><span class="pun">=</span><span class="str">"com.le.matrix.template.facade.HelloWorld3Facade"</span><span class="pln"> id</span><span class="pun">=</span><span class="str">"helloWorld3Service"</span></code></li><li class="L8"><code class="language-c"><span class="pln">                     check</span><span class="pun">=</span><span class="str">"false"</span><span class="pln"> url</span><span class="pun">=</span><span class="str">"dubbo://localhost:8888/services/"</span><span class="pun">/&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">调用</span><span class="typ">HelloWorld5Facade</span><span class="pun">服务</span></code></li><li class="L0"><code class="language-c"><span class="pln">           interface     </span><span class="pun">服务接口名</span></code></li><li class="L1"><code class="language-c"><span class="pln">           id            </span><span class="pun">服务引用</span><span class="typ">BeanId</span></code></li><li class="L2"><code class="language-c"><span class="pln">           check         </span><span class="pun">启动时检查提供者是否存在，</span><span class="kwd">true</span><span class="pun">报错，</span><span class="kwd">false</span><span class="pun">忽略</span></code></li><li class="L3"><code class="language-c"><span class="pln">           group         </span><span class="pun">服务分组，当一个接口有多个实现，可以用分组区分，必需和服务提供方一致</span></code></li><li class="L4"><code class="language-c"><span class="pln">           retries       </span><span class="pun">远程服务调用重试次数，不包括第一次调用，不需要重试请设为</span><span class="lit">0</span></code></li><li class="L5"><code class="language-c"><span class="pln">           version       </span><span class="pun">服务版本，与服务提供者的版本一致</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="pun">--&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--注意：连接</span><span class="pln">rest</span><span class="pun">的服务时候，</span><span class="pln">rs</span><span class="pun">.</span><span class="pln">ws</span><span class="pun">定义必须在接口中定义，否则报错</span><span class="typ">You</span><span class="pln"> must use at least one</span><span class="pun">,</span><span class="pln"> but no more than one http method annotation on</span><span class="pun">:。</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">如何定义详细看</span><span class="pln">com</span><span class="pun">.</span><span class="pln">le</span><span class="pun">.</span><span class="pln">matrix</span><span class="pun">.</span><span class="kwd">template</span><span class="pun">.</span><span class="pln">facade</span><span class="pun">.</span><span class="typ">HelloWorld5Facade</span><span class="pun">--&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">dubbo</span><span class="pun">:</span><span class="pln">reference interface</span><span class="pun">=</span><span class="str">"com.le.matrix.template.facade.HelloWorld5Facade"</span></code></li><li class="L0"><code class="language-c"><span class="pln">                     id</span><span class="pun">=</span><span class="str">"helloWorld5Service"</span></code></li><li class="L1"><code class="language-c"><span class="pln">                     check</span><span class="pun">=</span><span class="str">"false"</span><span class="pln"> version</span><span class="pun">=</span><span class="str">"10.0"</span><span class="pun">/&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">调用</span><span class="typ">UserFacade</span><span class="pun">服务</span></code></li><li class="L3"><code class="language-c"><span class="pln">    protocol      </span><span class="pun">指定使用协议</span><span class="pln"> </span><span class="pun">如果服务提供多个协议支持，消费端必须指定使用协议</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">--&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">dubbo</span><span class="pun">:</span><span class="pln">reference interface</span><span class="pun">=</span><span class="str">"com.le.matrix.template.facade.UserFacade"</span><span class="pln"> id</span><span class="pun">=</span><span class="str">"userService"</span><span class="pln"> check</span><span class="pun">=</span><span class="str">"false"</span></code></li><li class="L6"><code class="language-c"><span class="pln">                     protocol</span><span class="pun">=</span><span class="str">"dubbo"</span><span class="pun">/&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">beans</span><span class="pun">&gt;</span></code></li></ol></pre></div><div>直接使用对Rest封装HTTP client测试&nbsp; &nbsp;&nbsp;RestClient<br></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">package com</span><span class="pun">.</span><span class="pln">le</span><span class="pun">.</span><span class="pln">matrix</span><span class="pun">.</span><span class="kwd">template</span><span class="pun">;</span></code></li><li class="L1"><code class="language-c"></code></li><li class="L2"><code class="language-c"><span class="kwd">import</span><span class="pln"> javax</span><span class="pun">.</span><span class="pln">ws</span><span class="pun">.</span><span class="pln">rs</span><span class="pun">.</span><span class="pln">client</span><span class="pun">.</span><span class="typ">Client</span><span class="pun">;</span></code></li><li class="L3"><code class="language-c"><span class="kwd">import</span><span class="pln"> javax</span><span class="pun">.</span><span class="pln">ws</span><span class="pun">.</span><span class="pln">rs</span><span class="pun">.</span><span class="pln">client</span><span class="pun">.</span><span class="typ">ClientBuilder</span><span class="pun">;</span></code></li><li class="L4"><code class="language-c"><span class="kwd">import</span><span class="pln"> javax</span><span class="pun">.</span><span class="pln">ws</span><span class="pun">.</span><span class="pln">rs</span><span class="pun">.</span><span class="pln">client</span><span class="pun">.</span><span class="typ">Entity</span><span class="pun">;</span></code></li><li class="L5"><code class="language-c"><span class="kwd">import</span><span class="pln"> javax</span><span class="pun">.</span><span class="pln">ws</span><span class="pun">.</span><span class="pln">rs</span><span class="pun">.</span><span class="pln">client</span><span class="pun">.</span><span class="typ">WebTarget</span><span class="pun">;</span></code></li><li class="L6"><code class="language-c"><span class="kwd">import</span><span class="pln"> javax</span><span class="pun">.</span><span class="pln">ws</span><span class="pun">.</span><span class="pln">rs</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="typ">MediaType</span><span class="pun">;</span></code></li><li class="L7"><code class="language-c"><span class="kwd">import</span><span class="pln"> javax</span><span class="pun">.</span><span class="pln">ws</span><span class="pun">.</span><span class="pln">rs</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="typ">Response</span><span class="pun">;</span></code></li><li class="L8"><code class="language-c"></code></li><li class="L9"><code class="language-c"><span class="com">/**</span></code></li><li class="L0"><code class="language-c"><span class="com"> * Created by linzhanbo on 2016/10/10.</span></code></li><li class="L1"><code class="language-c"><span class="com"> */</span></code></li><li class="L2"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">RestClient</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-c"><span class="pln">        getUser</span><span class="pun">(</span><span class="str">"http://localhost:8888/services/helloWorld2/aaa.json"</span><span class="pun">);</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L6"><code class="language-c"></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> getUser</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> url</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-c"><span class="pln">        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Getting user via "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> url</span><span class="pun">);</span></code></li><li class="L9"><code class="language-c"><span class="pln">        </span><span class="typ">Client</span><span class="pln"> client </span><span class="pun">=</span><span class="pln"> </span><span class="typ">ClientBuilder</span><span class="pun">.</span><span class="pln">newClient</span><span class="pun">();</span></code></li><li class="L0"><code class="language-c"><span class="pln">        </span><span class="typ">WebTarget</span><span class="pln"> target </span><span class="pun">=</span><span class="pln"> client</span><span class="pun">.</span><span class="pln">target</span><span class="pun">(</span><span class="pln">url</span><span class="pun">);</span></code></li><li class="L1"><code class="language-c"><span class="pln">        </span><span class="typ">Response</span><span class="pln"> response </span><span class="pun">=</span><span class="pln"> target</span><span class="pun">.</span><span class="pln">request</span><span class="pun">().</span><span class="pln">get</span><span class="pun">();</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-c"><span class="pln">            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">response</span><span class="pun">.</span><span class="pln">getStatus</span><span class="pun">()</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">200</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-c"><span class="pln">                </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">RuntimeException</span><span class="pun">(</span><span class="str">"Failed with HTTP error code : "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> response</span><span class="pun">.</span><span class="pln">getStatus</span><span class="pun">());</span></code></li><li class="L5"><code class="language-c"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L6"><code class="language-c"><span class="pln">            </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Successfully got result: "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> response</span><span class="pun">.</span><span class="pln">readEntity</span><span class="pun">(</span><span class="typ">String</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">));</span></code></li><li class="L7"><code class="language-c"><span class="pln">        </span><span class="pun">}</span><span class="pln"> finally </span><span class="pun">{</span></code></li><li class="L8"><code class="language-c"><span class="pln">            response</span><span class="pun">.</span><span class="pln">close</span><span class="pun">();</span></code></li><li class="L9"><code class="language-c"><span class="pln">            client</span><span class="pun">.</span><span class="pln">close</span><span class="pun">();</span></code></li><li class="L0"><code class="language-c"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L2"><code class="language-c"></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> registerUser</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> url</span><span class="pun">,</span><span class="pln"> </span><span class="typ">MediaType</span><span class="pln"> mediaType</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-c"><span class="pln">        </span><span class="typ">Client</span><span class="pln"> client </span><span class="pun">=</span><span class="pln"> </span><span class="typ">ClientBuilder</span><span class="pun">.</span><span class="pln">newClient</span><span class="pun">();</span></code></li><li class="L5"><code class="language-c"><span class="pln">        </span><span class="typ">WebTarget</span><span class="pln"> target </span><span class="pun">=</span><span class="pln"> client</span><span class="pun">.</span><span class="pln">target</span><span class="pun">(</span><span class="pln">url</span><span class="pun">);</span></code></li><li class="L6"><code class="language-c"><span class="pln">        </span><span class="typ">String</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">String</span><span class="pun">();</span></code></li><li class="L7"><code class="language-c"><span class="pln">        </span><span class="typ">Response</span><span class="pln"> response </span><span class="pun">=</span><span class="pln"> target</span><span class="pun">.</span><span class="pln">request</span><span class="pun">().</span><span class="pln">post</span><span class="pun">(</span><span class="typ">Entity</span><span class="pun">.</span><span class="pln">entity</span><span class="pun">(</span><span class="pln">result</span><span class="pun">,</span><span class="pln"> mediaType</span><span class="pun">));</span></code></li><li class="L8"><code class="language-c"></code></li><li class="L9"><code class="language-c"><span class="pln">        </span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-c"><span class="pln">            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">response</span><span class="pun">.</span><span class="pln">getStatus</span><span class="pun">()</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">200</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">                </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">RuntimeException</span><span class="pun">(</span><span class="str">"Failed with HTTP error code : "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> response</span><span class="pun">.</span><span class="pln">getStatus</span><span class="pun">());</span></code></li><li class="L2"><code class="language-c"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L3"><code class="language-c"><span class="pln">            </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Successfully got result: "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> response</span><span class="pun">.</span><span class="pln">readEntity</span><span class="pun">(</span><span class="typ">String</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">));</span></code></li><li class="L4"><code class="language-c"><span class="pln">        </span><span class="pun">}</span><span class="pln"> finally </span><span class="pun">{</span></code></li><li class="L5"><code class="language-c"><span class="pln">            response</span><span class="pun">.</span><span class="pln">close</span><span class="pun">();</span></code></li><li class="L6"><code class="language-c"><span class="pln">            client</span><span class="pun">.</span><span class="pln">close</span><span class="pun">();</span></code></li><li class="L7"><code class="language-c"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="com">/*private static void registerUser(String url, MediaType mediaType) {</span></code></li><li class="L0"><code class="language-c"><span class="com">        System.out.println("Registering user via " + url);</span></code></li><li class="L1"><code class="language-c"><span class="com">        User user = new User(1L, "larrypage");</span></code></li><li class="L2"><code class="language-c"><span class="com">        Client client = ClientBuilder.newClient();</span></code></li><li class="L3"><code class="language-c"><span class="com">        WebTarget target = client.target(url);</span></code></li><li class="L4"><code class="language-c"><span class="com">        Response response = target.request().post(Entity.entity(user, mediaType));</span></code></li><li class="L5"><code class="language-c"></code></li><li class="L6"><code class="language-c"><span class="com">        try {</span></code></li><li class="L7"><code class="language-c"><span class="com">            if (response.getStatus() != 200) {</span></code></li><li class="L8"><code class="language-c"><span class="com">                throw new RuntimeException("Failed with HTTP error code : " + response.getStatus());</span></code></li><li class="L9"><code class="language-c"><span class="com">            }</span></code></li><li class="L0"><code class="language-c"><span class="com">            System.out.println("Successfully got result: " + response.readEntity(String.class));</span></code></li><li class="L1"><code class="language-c"><span class="com">        } finally {</span></code></li><li class="L2"><code class="language-c"><span class="com">            response.close();</span></code></li><li class="L3"><code class="language-c"><span class="com">            client.close();</span></code></li><li class="L4"><code class="language-c"><span class="com">        }</span></code></li><li class="L5"><code class="language-c"><span class="com">    }</span></code></li><li class="L6"><code class="language-c"></code></li><li class="L7"><code class="language-c"><span class="com">    private static void getUser(String url) {</span></code></li><li class="L8"><code class="language-c"><span class="com">        System.out.println("Getting user via " + url);</span></code></li><li class="L9"><code class="language-c"><span class="com">        Client client = ClientBuilder.newClient();</span></code></li><li class="L0"><code class="language-c"><span class="com">        WebTarget target = client.target(url);</span></code></li><li class="L1"><code class="language-c"><span class="com">        Response response = target.request().get();</span></code></li><li class="L2"><code class="language-c"><span class="com">        try {</span></code></li><li class="L3"><code class="language-c"><span class="com">            if (response.getStatus() != 200) {</span></code></li><li class="L4"><code class="language-c"><span class="com">                throw new RuntimeException("Failed with HTTP error code : " + response.getStatus());</span></code></li><li class="L5"><code class="language-c"><span class="com">            }</span></code></li><li class="L6"><code class="language-c"><span class="com">            System.out.println("Successfully got result: " + response.readEntity(String.class));</span></code></li><li class="L7"><code class="language-c"><span class="com">        } finally {</span></code></li><li class="L8"><code class="language-c"><span class="com">            response.close();</span></code></li><li class="L9"><code class="language-c"><span class="com">            client.close();</span></code></li><li class="L0"><code class="language-c"><span class="com">        }</span></code></li><li class="L1"><code class="language-c"><span class="com">    }*/</span></code></li><li class="L2"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></div></font></div><div style="font-family: &quot;Helvetica Neue&quot;;"></div></span></w:sdt></span></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN" style="font-family: 黑体;"><br></span></w:sdt></span></div><div></div></span></div><h1 style="line-height: 70.4px;"><span style="font-size: 36px;"><font color="#9d45b8"><span data-wiz-span="data-wiz-span" style="font-size: 3.2rem;">二 &nbsp;In Go</span></font></span></h1><div style="border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2><span style="color: rgb(224, 155, 59); font-family: Tahoma; font-size: 19pt; font-weight: bold;">Golang基础</span></h2><div><div><h3 style="line-height: 24.2667px;">Go常用命令简介</h3><div style="line-height: 24.2667px;">go get：获取远程包（需提前安装 git或hg）</div><div style="line-height: 24.2667px;">go run：直接运行程序</div><div style="line-height: 24.2667px;">go build：测试编译，检查是否有编译错误</div><div style="line-height: 24.2667px;">go fmt：格式化源码（部分IDE在保存时自动调用）</div><div style="line-height: 24.2667px;">go install：编译包文件并编译整个程序</div><div style="line-height: 24.2667px;">go test：运行测试文件</div><div style="line-height: 24.2667px;">go doc：查看文档（CHM手册）</div><div style="line-height: 24.2667px;"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-go"><span class="com">// 当前程序的包名  使用包名唯一确定程序</span></code></li><li class="L1"><code class="language-go"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L2"><code class="language-go"></code></li><li class="L3"><code class="language-go"><span class="com">//导入其他的包    使用双引号括起来包名</span></code></li><li class="L4"><code class="language-go"><span class="com">//import "fmt"</span></code></li><li class="L5"><code class="language-go"><span class="com">//import "os"</span></code></li><li class="L6"><code class="language-go"><span class="com">//import "time"</span></code></li><li class="L7"><code class="language-go"><span class="com">//import "strings"</span></code></li><li class="L8"><code class="language-go"><span class="com">//如果不想输入这么多可以在()里面写入全部</span></code></li><li class="L9"><code class="language-go"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L0"><code class="language-go"><span class="pln">  </span><span class="str">"os"</span></code></li><li class="L1"><code class="language-go"><span class="pln"> </span><span class="str">"strings"</span></code></li><li class="L2"><code class="language-go"><span class="pln">  </span><span class="str">"time"</span></code></li><li class="L3"><code class="language-go"><span class="pln"> std </span><span class="str">"fmt"</span><span class="pln"> </span><span class="com">//别名调用</span></code></li><li class="L4"><code class="language-go"><span class="pln"> </span><span class="pun">.</span><span class="pln"> </span><span class="str">"strconv"</span><span class="pln"> </span><span class="com">//省略调用</span></code></li><li class="L5"><code class="language-go"><span class="pln"> _ </span><span class="str">"hello/imp"</span><span class="pln"> </span><span class="com">//导入该包时，包下init()函数会被执行</span></code></li><li class="L6"><code class="language-go"><span class="pun">)</span></code></li><li class="L7"><code class="language-go"></code></li><li class="L8"><code class="language-go"><span class="com">//常量的定义  大写的常量、变量、类型、接口、结构或函数就是public，可以被外部使用的。</span></code></li><li class="L9"><code class="language-go"><span class="kwd">const</span><span class="pln"> PI </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3.14</span><span class="pln">  </span></code></li><li class="L0"><code class="language-go"><span class="com">//多个常量定义</span></code></li><li class="L1"><code class="language-go"><span class="kwd">const</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L2"><code class="language-go"><span class="pln"> PI2   </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3.14</span></code></li><li class="L3"><code class="language-go"><span class="pln"> WIDTH </span><span class="pun">=</span><span class="pln"> </span><span class="lit">10</span></code></li><li class="L4"><code class="language-go"><span class="pun">)</span></code></li><li class="L5"><code class="language-go"></code></li><li class="L6"><code class="language-go"></code></li><li class="L7"><code class="language-go"><span class="com">/*</span></code></li><li class="L8"><code class="language-go"><span class="com">Go语言中，使用 大小写 来决定该 常量、变量、类型、接口、结构或函数 是否可以被外部包所调用：</span></code></li><li class="L9"><code class="language-go"><span class="com">根据约定，</span></code></li><li class="L0"><code class="language-go"><span class="com">函数名首字母 小写,或使用_ 即为private</span></code></li><li class="L1"><code class="language-go"><span class="com">函数名首字母 大写 即为public</span></code></li><li class="L2"><code class="language-go"><span class="com">*/</span></code></li><li class="L3"><code class="language-go"></code></li><li class="L4"><code class="language-go"></code></li><li class="L5"><code class="language-go"><span class="com">//全局变量的声明与赋值</span></code></li><li class="L6"><code class="language-go"><span class="kwd">var</span><span class="pln"> name </span><span class="pun">=</span><span class="pln"> </span><span class="str">"gopher"</span></code></li><li class="L7"><code class="language-go"><span class="com">//一般类型声明  type 一般类型名称 基本类型  这里newType就是int类型</span></code></li><li class="L8"><code class="language-go"><span class="pln">type newType </span><span class="kwd">int</span></code></li><li class="L9"><code class="language-go"></code></li><li class="L0"><code class="language-go"><span class="com">//多个一般类型定义</span></code></li><li class="L1"><code class="language-go"><span class="pln">type </span><span class="pun">(</span></code></li><li class="L2"><code class="language-go"><span class="pln"> typeor2 </span><span class="kwd">int</span></code></li><li class="L3"><code class="language-go"><span class="pln">  vvv2    float32</span></code></li><li class="L4"><code class="language-go"><span class="pun">)</span></code></li><li class="L5"><code class="language-go"></code></li><li class="L6"><code class="language-go"></code></li><li class="L7"><code class="language-go"><span class="com">//结构的声明</span></code></li><li class="L8"><code class="language-go"><span class="pln">type gopher </span><span class="kwd">struct</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-go"><span class="pln">  </span><span class="com">//结构体</span></code></li><li class="L0"><code class="language-go"><span class="pun">}</span></code></li><li class="L1"><code class="language-go"></code></li><li class="L2"><code class="language-go"><span class="com">//多个结构声明</span></code></li><li class="L3"><code class="language-go"><span class="pln">type </span><span class="pun">(</span></code></li><li class="L4"><code class="language-go"><span class="pln"> sss2 </span><span class="kwd">struct</span><span class="pun">{}</span></code></li><li class="L5"><code class="language-go"><span class="pln"> vvv  </span><span class="kwd">struct</span><span class="pun">{}</span></code></li><li class="L6"><code class="language-go"><span class="pun">)</span></code></li><li class="L7"><code class="language-go"></code></li><li class="L8"><code class="language-go"><span class="com">//接口的声明</span></code></li><li class="L9"><code class="language-go"><span class="pln">type golang </span><span class="kwd">interface</span><span class="pun">{}</span></code></li><li class="L0"><code class="language-go"></code></li><li class="L1"><code class="language-go"><span class="com">//多个接口声明</span></code></li><li class="L2"><code class="language-go"><span class="pln">type </span><span class="pun">(</span></code></li><li class="L3"><code class="language-go"><span class="pln"> aaaa </span><span class="kwd">interface</span><span class="pun">{}</span></code></li><li class="L4"><code class="language-go"><span class="pln">  bbbb </span><span class="kwd">interface</span><span class="pun">{}</span></code></li><li class="L5"><code class="language-go"><span class="pln">  cccc </span><span class="kwd">struct</span><span class="pun">{}</span></code></li><li class="L6"><code class="language-go"><span class="pun">)</span></code></li><li class="L7"><code class="language-go"></code></li><li class="L8"><code class="language-go"></code></li><li class="L9"><code class="language-go"><span class="com">//枚举使用</span></code></li><li class="L0"><code class="language-go"><span class="kwd">const</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L1"><code class="language-go"><span class="pln"> a </span><span class="pun">=</span><span class="pln"> </span><span class="str">'A'</span></code></li><li class="L2"><code class="language-go"><span class="pln">  b</span></code></li><li class="L3"><code class="language-go"><span class="pln"> c </span><span class="pun">=</span><span class="pln"> iota </span><span class="com">//2 iota是常量的计数器，从0开始，组中每定义1个常量自动</span></code></li><li class="L4"><code class="language-go"><span class="pln">  </span><span class="com">//递增1,每遇到一个const关键字，iota就会重置为0</span></code></li><li class="L5"><code class="language-go"><span class="pln"> </span><span class="com">//如果希望后面的值也自增，对前一个使用iota</span></code></li><li class="L6"><code class="language-go"><span class="pln"> d </span><span class="com">//3</span></code></li><li class="L7"><code class="language-go"><span class="pln">  e </span><span class="com">//4</span></code></li><li class="L8"><code class="language-go"><span class="pln">  f </span><span class="pun">=</span><span class="pln"> </span><span class="str">'B'</span></code></li><li class="L9"><code class="language-go"><span class="pln">  g </span><span class="pun">=</span><span class="pln"> iota </span><span class="com">//6</span></code></li><li class="L0"><code class="language-go"><span class="pun">)</span></code></li><li class="L1"><code class="language-go"><span class="kwd">const</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L2"><code class="language-go"><span class="pln"> h </span><span class="pun">=</span><span class="pln"> iota </span><span class="com">//0</span></code></li><li class="L3"><code class="language-go"><span class="pun">)</span></code></li><li class="L4"><code class="language-go"></code></li><li class="L5"><code class="language-go"></code></li><li class="L6"><code class="language-go"><span class="com">//由 main 函数作为程序入口点启动</span></code></li><li class="L7"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-go"><span class="pln">  std</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"package new name"</span><span class="pun">)</span></code></li><li class="L9"><code class="language-go"><span class="pln">  </span></code></li><li class="L0"><code class="language-go"><span class="pln">  </span><span class="kwd">var</span><span class="pln"> i int8 </span><span class="com">//变量声明</span></code></li><li class="L1"><code class="language-go"><span class="pln">  i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">10</span><span class="pln">     </span><span class="com">//变量的赋值</span></code></li><li class="L2"><code class="language-go"><span class="pln"> </span><span class="com">//变量声明的同时又赋值</span></code></li><li class="L3"><code class="language-go"><span class="pln"> </span><span class="kwd">var</span><span class="pln"> j int64 </span><span class="pun">=</span><span class="pln"> </span><span class="lit">100</span></code></li><li class="L4"><code class="language-go"><span class="pln">  </span><span class="kwd">var</span><span class="pln"> c </span><span class="pun">=</span><span class="pln"> </span><span class="lit">100</span><span class="pln"> </span><span class="com">//上行的格式可省略变量类型，由系统推断</span></code></li><li class="L5"><code class="language-go"><span class="pln"> d </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">456</span><span class="pln">    </span><span class="com">//变量声明与赋值的最简写法,要是想省去var</span></code></li><li class="L6"><code class="language-go"><span class="pln">  </span><span class="kwd">var</span><span class="pln"> a</span><span class="pun">,</span><span class="pln">b</span><span class="pun">,</span><span class="pln">c</span><span class="pun">,</span><span class="pln">d </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="lit">2</span><span class="pun">,</span><span class="lit">3</span><span class="pun">,</span><span class="lit">4</span></code></li><li class="L7"><code class="language-go"></code></li><li class="L8"><code class="language-go"><span class="pln"> </span><span class="kwd">var</span><span class="pln"> a float32 </span><span class="pun">=</span><span class="pln"> </span><span class="lit">100.1</span></code></li><li class="L9"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">a</span><span class="pun">)</span><span class="pln"> </span><span class="com">//100.1</span></code></li><li class="L0"><code class="language-go"><span class="pln"> b </span><span class="pun">:=</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">(</span><span class="pln">a</span><span class="pun">)</span><span class="pln">  </span><span class="com">//Go中不存在隐式转换，所有类型转换必须显式声明</span></code></li><li class="L1"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">b</span><span class="pun">)</span><span class="pln"> </span><span class="com">//100</span></code></li><li class="L2"><code class="language-go"></code></li><li class="L3"><code class="language-go"><span class="pln">  </span><span class="kwd">var</span><span class="pln"> a </span><span class="kwd">int</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">65</span></code></li><li class="L4"><code class="language-go"><span class="pln"> b </span><span class="pun">:=</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">(</span><span class="pln">a</span><span class="pun">)</span></code></li><li class="L5"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">b</span><span class="pun">)</span><span class="pln"> </span><span class="com">//A</span></code></li><li class="L6"><code class="language-go"><span class="pln"> c </span><span class="pun">:=</span><span class="pln"> </span><span class="com">/*strconv.*/</span><span class="typ">Itoa</span><span class="pun">(</span><span class="pln">a</span><span class="pun">)</span></code></li><li class="L7"><code class="language-go"><span class="pln"> fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">c</span><span class="pun">)</span><span class="pln"> </span><span class="com">//"65"</span></code></li><li class="L8"><code class="language-go"><span class="pln">  i</span><span class="pun">,</span><span class="pln">err </span><span class="pun">:=</span><span class="pln"> </span><span class="com">/*strconv.*/</span><span class="typ">ParseInt</span><span class="pun">(</span><span class="str">"-42"</span><span class="pun">,</span><span class="lit">10</span><span class="pun">,</span><span class="lit">64</span><span class="pun">)</span></code></li><li class="L9"><code class="language-go"><span class="pln"> fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">i</span><span class="pun">)</span><span class="pln">  </span><span class="com">//-42</span></code></li><li class="L0"><code class="language-go"></code></li><li class="L1"><code class="language-go"></code></li><li class="L2"><code class="language-go"><span class="pln">  a </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">1</span></code></li><li class="L3"><code class="language-go"><span class="pln"> </span><span class="kwd">var</span><span class="pln"> p </span><span class="pun">*</span><span class="kwd">int</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">a</span></code></li><li class="L4"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">p</span><span class="pun">)</span><span class="pln">  </span><span class="com">//0xf840038020 输出p指针地址</span></code></li><li class="L5"><code class="language-go"><span class="pln"> fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(*</span><span class="pln">p</span><span class="pun">)</span><span class="pln"> </span><span class="com">//1  输出p指针指向的值</span></code></li><li class="L6"><code class="language-go"><span class="com">/*</span></code></li><li class="L7"><code class="language-go"><span class="com">Go虽然保留了指针，但与其它编程语言不同的是，在Go当中不支持指针运算以及"-&gt;"运算符，而直接采用"."选择符来操作指针目标对象的成员:</span></code></li><li class="L8"><code class="language-go"><span class="com">操作符"&amp;"取变量地址，使用"*"通过指针间接访问目标对象</span></code></li><li class="L9"><code class="language-go"><span class="com">默认值为 nil 而非 NULL</span></code></li><li class="L0"><code class="language-go"><span class="com">*/</span></code></li><li class="L1"><code class="language-go"></code></li><li class="L2"><code class="language-go"><span class="pln"> a </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">1</span></code></li><li class="L3"><code class="language-go"><span class="pln"> </span><span class="com">//在Go当中，++ 与 -- 是作为语句而并不是作为表达式</span></code></li><li class="L4"><code class="language-go"><span class="pln"> </span><span class="com">//只能放在变量 右边，不能放在变量 左边</span></code></li><li class="L5"><code class="language-go"><span class="pln">  a</span><span class="pun">++</span></code></li><li class="L6"><code class="language-go"><span class="pln">  a</span><span class="pun">--</span></code></li><li class="L7"><code class="language-go"><span class="pln">  </span><span class="com">//fmt.Println(a++) //不可以这样</span></code></li><li class="L8"><code class="language-go"></code></li><li class="L9"><code class="language-go"><span class="pln">  </span><span class="com">//支持一个初始化表达式,;隔开，a只在if内作用</span></code></li><li class="L0"><code class="language-go"><span class="pln">  </span><span class="com">/*if a := 1; a &gt; 1 {</span></code></li><li class="L1"><code class="language-go"><span class="com">  }*/</span></code></li><li class="L2"><code class="language-go"></code></li><li class="L3"><code class="language-go"></code></li><li class="L4"><code class="language-go"><span class="pln"> </span><span class="com">//go利用一个关键字for达到其他语言的for，while,do ...while三种语句作用</span></code></li><li class="L5"><code class="language-go"><span class="pln"> </span><span class="com">/*</span></code></li><li class="L6"><code class="language-go"><span class="com"> a := 1</span></code></li><li class="L7"><code class="language-go"><span class="com">  for {</span></code></li><li class="L8"><code class="language-go"><span class="com">   a++</span></code></li><li class="L9"><code class="language-go"><span class="com">   if a &gt; 3 {</span></code></li><li class="L0"><code class="language-go"><span class="com">     break</span></code></li><li class="L1"><code class="language-go"><span class="com">   }</span></code></li><li class="L2"><code class="language-go"><span class="com">   fmt.Println(a)</span></code></li><li class="L3"><code class="language-go"><span class="com">  }</span></code></li><li class="L4"><code class="language-go"><span class="com"> */</span></code></li><li class="L5"><code class="language-go"><span class="pln">  </span><span class="com">/*</span></code></li><li class="L6"><code class="language-go"><span class="com"> a := 1</span></code></li><li class="L7"><code class="language-go"><span class="com">  for a &lt;= 3 {</span></code></li><li class="L8"><code class="language-go"><span class="com">   a++</span></code></li><li class="L9"><code class="language-go"><span class="com">   fmt.Println(a)</span></code></li><li class="L0"><code class="language-go"><span class="com">  }</span></code></li><li class="L1"><code class="language-go"><span class="com"> */</span></code></li><li class="L2"><code class="language-go"><span class="pln">  </span><span class="com">/*</span></code></li><li class="L3"><code class="language-go"><span class="com"> a := 1</span></code></li><li class="L4"><code class="language-go"><span class="com">  for i := 0; i &lt; 3; i++ {</span></code></li><li class="L5"><code class="language-go"><span class="com">   a++</span></code></li><li class="L6"><code class="language-go"><span class="com">   fmt.Println(a)</span></code></li><li class="L7"><code class="language-go"><span class="com">  }</span></code></li><li class="L8"><code class="language-go"><span class="com"> */</span></code></li><li class="L9"><code class="language-go"></code></li><li class="L0"><code class="language-go"></code></li><li class="L1"><code class="language-go"><span class="pln">  </span><span class="com">//switch</span></code></li><li class="L2"><code class="language-go"><span class="pln"> </span><span class="com">/*</span></code></li><li class="L3"><code class="language-go"><span class="com"> a := 1</span></code></li><li class="L4"><code class="language-go"><span class="com">  switch a { //switch支持表达式</span></code></li><li class="L5"><code class="language-go"><span class="com">  case 0:</span></code></li><li class="L6"><code class="language-go"><span class="com">   fmt.Println("a=0") //不需要写break</span></code></li><li class="L7"><code class="language-go"><span class="com">  case 1:</span></code></li><li class="L8"><code class="language-go"><span class="com">   fmt.Println("a=1")</span></code></li><li class="L9"><code class="language-go"><span class="com">  default:</span></code></li><li class="L0"><code class="language-go"><span class="com">    fmt.Println("None")</span></code></li><li class="L1"><code class="language-go"><span class="com"> }</span></code></li><li class="L2"><code class="language-go"><span class="com"> */</span></code></li><li class="L3"><code class="language-go"><span class="pln">  </span><span class="com">/*</span></code></li><li class="L4"><code class="language-go"><span class="com"> a := 1</span></code></li><li class="L5"><code class="language-go"><span class="com">  switch { //switch没放判断条件，在下面各个放</span></code></li><li class="L6"><code class="language-go"><span class="com">  case a &gt;= 0:</span></code></li><li class="L7"><code class="language-go"><span class="com">   fmt.Println("a=0") //不需要写break</span></code></li><li class="L8"><code class="language-go"><span class="com">    fallthrough        //让继续执行下面case</span></code></li><li class="L9"><code class="language-go"><span class="com">  case a &gt;= 1:</span></code></li><li class="L0"><code class="language-go"><span class="com">   fmt.Println("a=1")</span></code></li><li class="L1"><code class="language-go"><span class="com">  default:</span></code></li><li class="L2"><code class="language-go"><span class="com">    fmt.Println("None")</span></code></li><li class="L3"><code class="language-go"><span class="com"> }</span></code></li><li class="L4"><code class="language-go"><span class="com"> */</span></code></li><li class="L5"><code class="language-go"><span class="pln">  </span><span class="kwd">switch</span><span class="pln"> a </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="com">//switch没放判断条件，在下面各个放</span></code></li><li class="L6"><code class="language-go"><span class="pln">  </span><span class="kwd">case</span><span class="pln"> a </span><span class="pun">&gt;=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">:</span></code></li><li class="L7"><code class="language-go"><span class="pln">   fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"a=0"</span><span class="pun">)</span><span class="pln"> </span><span class="com">//不需要写break</span></code></li><li class="L8"><code class="language-go"><span class="pln">   fallthrough        </span><span class="com">//让继续执行下面case</span></code></li><li class="L9"><code class="language-go"><span class="pln"> </span><span class="kwd">case</span><span class="pln"> a </span><span class="pun">&gt;=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">:</span></code></li><li class="L0"><code class="language-go"><span class="pln">   fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"a=1"</span><span class="pun">)</span></code></li><li class="L1"><code class="language-go"><span class="pln"> </span><span class="kwd">default</span><span class="pun">:</span></code></li><li class="L2"><code class="language-go"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"None"</span><span class="pun">)</span></code></li><li class="L3"><code class="language-go"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L4"><code class="language-go"></code></li><li class="L5"><code class="language-go"></code></li><li class="L6"><code class="language-go"></code></li><li class="L7"><code class="language-go"><span class="pun">}</span></code></li><li class="L8"><code class="language-go"></code></li><li class="L9"><code class="language-go"></code></li><li class="L0"><code class="language-go"><span class="com">/*</span></code></li><li class="L1"><code class="language-go"><span class="com">对于break 标签/continue 标签与goto 标签：</span></code></li><li class="L2"><code class="language-go"><span class="com">goto标签是调整执行位置，与其他两个语句配合标签的结果不相同，使用goto标签，放到循环后面让直接跳出循环。</span></code></li><li class="L3"><code class="language-go"><span class="com"> */</span></code></li><li class="L4"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-go"><span class="pln">LABEL1</span><span class="pun">:</span></code></li><li class="L6"><code class="language-go"><span class="pln"> </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-go"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">10</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-go"><span class="pln">     </span><span class="kwd">if</span><span class="pln"> i </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-go"><span class="pln">        </span><span class="kwd">break</span><span class="pln"> LABEL1 </span><span class="com">//成功跳出n处循环</span></code></li><li class="L0"><code class="language-go"><span class="pln">      </span><span class="pun">}</span></code></li><li class="L1"><code class="language-go"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L2"><code class="language-go"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L3"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"OK"</span><span class="pun">)</span></code></li><li class="L4"><code class="language-go"><span class="pun">}</span></code></li><li class="L5"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-go"><span class="pln"> </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-go"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">10</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-go"><span class="pln">     </span><span class="kwd">if</span><span class="pln"> i </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-go"><span class="pln">        </span><span class="kwd">goto</span><span class="pln"> LABEL1 </span><span class="com">//成功跳出n处循环</span></code></li><li class="L0"><code class="language-go"><span class="pln">     </span><span class="pun">}</span></code></li><li class="L1"><code class="language-go"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L2"><code class="language-go"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L3"><code class="language-go"><span class="pln">LABEL1</span><span class="pun">:</span></code></li><li class="L4"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"OK"</span><span class="pun">)</span></code></li><li class="L5"><code class="language-go"><span class="pun">}</span></code></li><li class="L6"><code class="language-go"><span class="pun">*/</span></code></li><li class="L7"><code class="language-go"></code></li><li class="L8"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-go"><span class="pln">  </span></code></li><li class="L0"><code class="language-go"><span class="pln">  </span><span class="com">//数组</span></code></li><li class="L1"><code class="language-go"><span class="pln"> </span><span class="com">//定义数组</span></code></li><li class="L2"><code class="language-go"><span class="pln"> </span><span class="com">//var a [2]int</span></code></li><li class="L3"><code class="language-go"><span class="pln"> </span><span class="com">//定义数组并初始化</span></code></li><li class="L4"><code class="language-go"><span class="pln"> </span><span class="com">//a := [2]int{1, 2}  //[1 2]</span></code></li><li class="L5"><code class="language-go"><span class="pln"> </span><span class="com">//a := [2]int{1} //[1 0] 剩下值不够，自动补默认值</span></code></li><li class="L6"><code class="language-go"><span class="pln">  </span><span class="com">//如果希望将第20个赋为1</span></code></li><li class="L7"><code class="language-go"><span class="pln"> </span><span class="com">//a := [20]int{19: 1} //[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]</span></code></li><li class="L8"><code class="language-go"><span class="pln">  </span><span class="com">//如果已经知道数组长度，可以不需要指定长度</span></code></li><li class="L9"><code class="language-go"><span class="pln"> </span><span class="com">//a := [...]int{1, 2, 3, 4, 5} //[1 2 3 4 5]</span></code></li><li class="L0"><code class="language-go"><span class="pln"> </span><span class="com">//a := [...]int{10: 1, 12: 3} //[0 0 0 0 0 0 0 0 0 0 1 0 3]  长度为13</span></code></li><li class="L1"><code class="language-go"></code></li><li class="L2"><code class="language-go"><span class="pln">  </span><span class="com">//切片</span></code></li><li class="L3"><code class="language-go"><span class="pln"> </span><span class="com">//其本身并不是数组，它指向底层的数组。作为变长数组的替代方案，可以关联底层数组的局部或全部</span></code></li><li class="L4"><code class="language-go"><span class="pln"> </span><span class="com">//为引用类型</span></code></li><li class="L5"><code class="language-go"><span class="pln">  </span><span class="com">//可以直接创建或从底层数组获取生成,使用len()获取元素个数，cap()获取容量</span></code></li><li class="L6"><code class="language-go"><span class="pln"> </span><span class="com">//直接创建：make([]T, len, cap)    其中cap可以省略，则和len的值相同    len表示存放的元素个数，cap表示容量</span></code></li><li class="L7"><code class="language-go"><span class="pln">  </span><span class="com">//slice声明方法1 和数组区别是没有指定大小</span></code></li><li class="L8"><code class="language-go"><span class="pln">  </span><span class="kwd">var</span><span class="pln"> s1 </span><span class="pun">[]</span><span class="kwd">int</span></code></li><li class="L9"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">s1</span><span class="pun">)</span><span class="pln"> </span><span class="com">//[]</span></code></li><li class="L0"><code class="language-go"><span class="pln"> array </span><span class="pun">:=</span><span class="pln"> </span><span class="pun">[</span><span class="lit">10</span><span class="pun">]</span><span class="kwd">int</span><span class="pun">{</span><span class="lit">5</span><span class="pun">:</span><span class="pln"> </span><span class="lit">1</span><span class="pun">}</span></code></li><li class="L1"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">array</span><span class="pun">)</span><span class="pln"> </span><span class="com">//[0 0 0 0 0 1 0 0 0 0]</span></code></li><li class="L2"><code class="language-go"><span class="pln"> </span><span class="com">//slice 索引为5到最后</span></code></li><li class="L3"><code class="language-go"><span class="pln">  s2 </span><span class="pun">:=</span><span class="pln"> array</span><span class="pun">[</span><span class="lit">5</span><span class="pun">:</span><span class="lit">10</span><span class="pun">]</span><span class="pln"> </span><span class="com">//array[5 6 7 8 9]</span></code></li><li class="L4"><code class="language-go"><span class="pln"> fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">s2</span><span class="pun">)</span><span class="pln">   </span><span class="com">//[1 0 0 0 0]</span></code></li><li class="L5"><code class="language-go"><span class="pln">  </span><span class="com">//取从指定索引到最后还有两种办法</span></code></li><li class="L6"><code class="language-go"><span class="pln">  </span><span class="com">//slice 方法1</span></code></li><li class="L7"><code class="language-go"><span class="pln">  s3 </span><span class="pun">:=</span><span class="pln"> array</span><span class="pun">[</span><span class="lit">5</span><span class="pun">:</span><span class="pln">len</span><span class="pun">(</span><span class="pln">array</span><span class="pun">)]</span><span class="pln"> </span><span class="com">//array[5 6 7 8 9]</span></code></li><li class="L8"><code class="language-go"><span class="pln"> fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">s3</span><span class="pun">)</span><span class="pln">           </span><span class="com">//[1 0 0 0 0]</span></code></li><li class="L9"><code class="language-go"><span class="pln">  </span><span class="com">//slice 方法2</span></code></li><li class="L0"><code class="language-go"><span class="pln">  s4 </span><span class="pun">:=</span><span class="pln"> array</span><span class="pun">[</span><span class="lit">5</span><span class="pun">:]</span><span class="pln"> </span><span class="com">//array[5 6 7 8 9]</span></code></li><li class="L1"><code class="language-go"><span class="pln"> fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">s4</span><span class="pun">)</span><span class="pln"> </span><span class="com">//[1 0 0 0 0]</span></code></li><li class="L2"><code class="language-go"><span class="pln">  </span><span class="com">//slice 我想取数组前5个元素</span></code></li><li class="L3"><code class="language-go"><span class="pln"> s5 </span><span class="pun">:=</span><span class="pln"> array</span><span class="pun">[:</span><span class="lit">5</span><span class="pun">]</span><span class="pln"> </span><span class="com">//array[0 1 2 3 4]</span></code></li><li class="L4"><code class="language-go"><span class="pln"> fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">s5</span><span class="pun">)</span><span class="pln"> </span><span class="com">//[0 0 0 0 0]</span></code></li><li class="L5"><code class="language-go"></code></li><li class="L6"><code class="language-go"><span class="pln"> </span><span class="com">//slice声明方法2</span></code></li><li class="L7"><code class="language-go"><span class="pln"> s6 </span><span class="pun">:=</span><span class="pln"> make</span><span class="pun">([]</span><span class="kwd">int</span><span class="pun">,</span><span class="pln"> </span><span class="lit">3</span><span class="pun">,</span><span class="pln"> </span><span class="lit">10</span><span class="pun">)</span><span class="pln"> </span><span class="com">//指定slice 类型为[]int，包含3个元素,slice初始容量为10，数组，这10个地址是连续的</span></code></li><li class="L8"><code class="language-go"><span class="pln">  </span><span class="com">//slice是一个变长的数组,我指定初始容量为10，即便放了3个元素，后面再添加元素的时候，也不需要new新地址，先占满这10</span></code></li><li class="L9"><code class="language-go"><span class="pln"> </span><span class="com">//个连续地址,如果要添加第11个元素，这时go语言会把这个数组大小变成10*2,20个大小，到第21个，变成20*2，40个大小连续地址块</span></code></li><li class="L0"><code class="language-go"><span class="pln"> </span><span class="com">//如果你事先知道slice大小，应该make时给足初始容量大小。如果不设置初始容量，则初始为元素个数</span></code></li><li class="L1"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">len</span><span class="pun">(</span><span class="pln">s6</span><span class="pun">),</span><span class="pln"> cap</span><span class="pun">(</span><span class="pln">s6</span><span class="pun">))</span><span class="pln"> </span><span class="com">//3 10 len打印slice实际长度  cap打印slice容量</span></code></li><li class="L2"><code class="language-go"><span class="pln">  s7 </span><span class="pun">:=</span><span class="pln"> make</span><span class="pun">([]</span><span class="kwd">int</span><span class="pun">,</span><span class="pln"> </span><span class="lit">3</span><span class="pun">)</span></code></li><li class="L3"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">len</span><span class="pun">(</span><span class="pln">s7</span><span class="pun">),</span><span class="pln"> cap</span><span class="pun">(</span><span class="pln">s7</span><span class="pun">))</span><span class="pln"> </span><span class="com">//3 3</span></code></li><li class="L4"><code class="language-go"></code></li><li class="L5"><code class="language-go"><span class="pln"> s1 </span><span class="pun">:=</span><span class="pln"> </span><span class="pun">[]</span><span class="kwd">int</span><span class="pun">{</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln"> </span><span class="lit">3</span><span class="pun">,</span><span class="pln"> </span><span class="lit">4</span><span class="pun">,</span><span class="pln"> </span><span class="lit">5</span><span class="pun">,</span><span class="pln"> </span><span class="lit">6</span><span class="pun">,</span><span class="pln"> </span><span class="lit">7</span><span class="pun">}</span></code></li><li class="L6"><code class="language-go"><span class="pln"> s2 </span><span class="pun">:=</span><span class="pln"> </span><span class="pun">[]</span><span class="kwd">int</span><span class="pun">{</span><span class="lit">8</span><span class="pun">,</span><span class="pln"> </span><span class="lit">9</span><span class="pun">,</span><span class="pln"> </span><span class="lit">10</span><span class="pun">}</span></code></li><li class="L7"><code class="language-go"><span class="pln">  copy</span><span class="pun">(</span><span class="pln">s2</span><span class="pun">,</span><span class="pln"> s1</span><span class="pun">)</span><span class="pln">    </span><span class="com">//将s1复制到s2中</span></code></li><li class="L8"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">s2</span><span class="pun">)</span><span class="pln"> </span><span class="com">//[[1 2 3]]  只复制了这3位</span></code></li><li class="L9"><code class="language-go"></code></li><li class="L0"><code class="language-go"><span class="pln">  copy</span><span class="pun">(</span><span class="pln">s1</span><span class="pun">[</span><span class="lit">3</span><span class="pun">:</span><span class="lit">5</span><span class="pun">],</span><span class="pln"> s2</span><span class="pun">[</span><span class="lit">1</span><span class="pun">:</span><span class="lit">3</span><span class="pun">])</span><span class="pln"> </span><span class="com">//将s2复制到s1中</span></code></li><li class="L1"><code class="language-go"><span class="pln"> fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">s1</span><span class="pun">)</span><span class="pln">        </span><span class="com">//[1 2 3 9 10 6 7]</span></code></li><li class="L2"><code class="language-go"></code></li><li class="L3"><code class="language-go"><span class="pln"> </span><span class="com">//slice迭代</span></code></li><li class="L4"><code class="language-go"><span class="pln">  arr </span><span class="pun">:=</span><span class="pln"> </span><span class="pun">[]</span><span class="kwd">string</span><span class="pun">{</span><span class="str">"ele1"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"ele2"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"ele3"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"ele4"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"ele5"</span><span class="pun">}</span></code></li><li class="L5"><code class="language-go"><span class="pln">  slice </span><span class="pun">:=</span><span class="pln"> arr</span><span class="pun">[</span><span class="lit">0</span><span class="pun">:]</span><span class="pln"> </span><span class="com">//完全引用数组</span></code></li><li class="L6"><code class="language-go"><span class="pln">  </span><span class="kwd">for</span><span class="pln"> index</span><span class="pun">,</span><span class="pln"> value </span><span class="pun">:=</span><span class="pln"> range slice </span><span class="pun">{</span></code></li><li class="L7"><code class="language-go"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"index=%d,value=%s\n"</span><span class="pun">,</span><span class="pln"> index</span><span class="pun">,</span><span class="pln"> value</span><span class="pun">)</span></code></li><li class="L8"><code class="language-go"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L9"><code class="language-go"></code></li><li class="L0"><code class="language-go"></code></li><li class="L1"><code class="language-go"><span class="pln">  </span><span class="com">//map</span></code></li><li class="L2"><code class="language-go"><span class="pln">  </span><span class="com">//类似其它语言中的哈希表或者字典，以key-value形式存储数据</span></code></li><li class="L3"><code class="language-go"><span class="pln"> </span><span class="com">//Key必须是支持==或!=比较运算的类型，不可以是函数、map或slice</span></code></li><li class="L4"><code class="language-go"><span class="pln">  </span><span class="com">//Map使用make()创建，支持 := 这种简写方式</span></code></li><li class="L5"><code class="language-go"><span class="pln">    </span><span class="com">//make([keyType]valueType, cap)，cap表示容量，可省略，超出容量时会自动扩容，但尽量提供一个合理的初始值，使用len()获取元素个数</span></code></li><li class="L6"><code class="language-go"><span class="pln">  </span><span class="com">//键值对不存在时自动添加，使用delete()删除某键值对</span></code></li><li class="L7"><code class="language-go"><span class="pln"> </span><span class="com">//使用 for range 对map和slice进行迭代操作</span></code></li><li class="L8"><code class="language-go"><span class="pln">  </span><span class="com">//创建集合</span></code></li><li class="L9"><code class="language-go"><span class="pln"> </span><span class="kwd">var</span><span class="pln"> m map</span><span class="pun">[</span><span class="kwd">int</span><span class="pun">]</span><span class="kwd">string</span></code></li><li class="L0"><code class="language-go"><span class="pln">  m </span><span class="pun">=</span><span class="pln"> map</span><span class="pun">[</span><span class="kwd">int</span><span class="pun">]</span><span class="kwd">string</span><span class="pun">{}</span></code></li><li class="L1"><code class="language-go"><span class="pln"> </span><span class="com">//创建集合2</span></code></li><li class="L2"><code class="language-go"><span class="pln">  </span><span class="kwd">var</span><span class="pln"> m2 map</span><span class="pun">[</span><span class="kwd">int</span><span class="pun">]</span><span class="kwd">string</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> make</span><span class="pun">(</span><span class="pln">map</span><span class="pun">[</span><span class="kwd">int</span><span class="pun">]</span><span class="kwd">string</span><span class="pun">)</span></code></li><li class="L3"><code class="language-go"><span class="pln">  </span><span class="com">//也可以使用简写办法</span></code></li><li class="L4"><code class="language-go"><span class="pln">  m3 </span><span class="pun">:=</span><span class="pln"> make</span><span class="pun">(</span><span class="pln">map</span><span class="pun">[</span><span class="kwd">int</span><span class="pun">]</span><span class="kwd">string</span><span class="pun">)</span><span class="pln"> </span><span class="com">//也可以指定map初始大小</span></code></li><li class="L5"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">m</span><span class="pun">)</span><span class="pln">             </span><span class="com">//map[]</span></code></li><li class="L6"><code class="language-go"><span class="pln"> fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">m2</span><span class="pun">)</span><span class="pln">            </span><span class="com">//map[]</span></code></li><li class="L7"><code class="language-go"><span class="pln"> fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">m3</span><span class="pun">)</span><span class="pln">            </span><span class="com">//map[]</span></code></li><li class="L8"><code class="language-go"></code></li><li class="L9"><code class="language-go"><span class="pln">  m </span><span class="pun">:=</span><span class="pln"> make</span><span class="pun">(</span><span class="pln">map</span><span class="pun">[</span><span class="kwd">int</span><span class="pun">]</span><span class="kwd">string</span><span class="pun">)</span></code></li><li class="L0"><code class="language-go"><span class="pln">  m</span><span class="pun">[</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"OK"</span><span class="pln"> </span><span class="com">//添加一个键值对</span></code></li><li class="L1"><code class="language-go"><span class="pln">  m</span><span class="pun">[</span><span class="lit">2</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"OK"</span><span class="pln"> </span><span class="com">//添加一个键值对</span></code></li><li class="L2"><code class="language-go"><span class="pln">  a </span><span class="pun">:=</span><span class="pln"> m</span><span class="pun">[</span><span class="lit">1</span><span class="pun">]</span></code></li><li class="L3"><code class="language-go"><span class="pln">  b </span><span class="pun">:=</span><span class="pln"> m</span><span class="pun">[</span><span class="lit">3</span><span class="pun">]</span><span class="pln">      </span><span class="com">//没有取出来就为空""</span></code></li><li class="L4"><code class="language-go"><span class="pln">  </span><span class="kwd">delete</span><span class="pun">(</span><span class="pln">m</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">)</span><span class="pln">   </span><span class="com">//使用键删除该KV</span></code></li><li class="L5"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">m</span><span class="pun">)</span><span class="pln"> </span><span class="com">//map[1:OK]</span></code></li><li class="L6"><code class="language-go"><span class="pln"> fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">a</span><span class="pun">)</span><span class="pln"> </span><span class="com">//OK</span></code></li><li class="L7"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">b</span><span class="pun">)</span><span class="pln"> </span><span class="com">//</span></code></li><li class="L8"><code class="language-go"></code></li><li class="L9"><code class="language-go"><span class="pln"> </span><span class="com">//map是无序的</span></code></li><li class="L0"><code class="language-go"><span class="pln">  m </span><span class="pun">:=</span><span class="pln"> map</span><span class="pun">[</span><span class="kwd">int</span><span class="pun">]</span><span class="kwd">string</span><span class="pun">{</span></code></li><li class="L1"><code class="language-go"><span class="pln">   </span><span class="lit">1</span><span class="pun">:</span><span class="pln"> </span><span class="str">"a"</span><span class="pun">,</span></code></li><li class="L2"><code class="language-go"><span class="pln">    </span><span class="lit">2</span><span class="pun">:</span><span class="pln"> </span><span class="str">"b"</span><span class="pun">,</span></code></li><li class="L3"><code class="language-go"><span class="pln">    </span><span class="lit">3</span><span class="pun">:</span><span class="pln"> </span><span class="str">"c"</span><span class="pun">,</span></code></li><li class="L4"><code class="language-go"><span class="pln">    </span><span class="lit">4</span><span class="pun">:</span><span class="pln"> </span><span class="str">"d"</span><span class="pun">,</span></code></li><li class="L5"><code class="language-go"><span class="pln">    </span><span class="lit">5</span><span class="pun">:</span><span class="pln"> </span><span class="str">"e"</span><span class="pun">}</span></code></li><li class="L6"><code class="language-go"><span class="pln">  s </span><span class="pun">:=</span><span class="pln"> make</span><span class="pun">([]</span><span class="kwd">int</span><span class="pun">,</span><span class="pln"> len</span><span class="pun">(</span><span class="pln">m</span><span class="pun">))</span></code></li><li class="L7"><code class="language-go"><span class="pln"> i </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">0</span></code></li><li class="L8"><code class="language-go"><span class="pln"> </span><span class="kwd">for</span><span class="pln"> key</span><span class="pun">,</span><span class="pln"> _ </span><span class="pun">:=</span><span class="pln"> range m </span><span class="pun">{</span></code></li><li class="L9"><code class="language-go"><span class="pln">    s</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> key</span></code></li><li class="L0"><code class="language-go"><span class="pln">    i</span><span class="pun">++</span></code></li><li class="L1"><code class="language-go"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L2"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">s</span><span class="pun">)</span><span class="pln"> </span><span class="com">//输出多次，发现每次输出的Key的顺序都不同[4 1 2 5 3]  [2 4 5 3 1]</span></code></li><li class="L3"><code class="language-go"><span class="pln"> </span><span class="com">//讲sort里一个排序方法</span></code></li><li class="L4"><code class="language-go"><span class="pln"> sort</span><span class="pun">.</span><span class="typ">Ints</span><span class="pun">(</span><span class="pln">s</span><span class="pun">)</span></code></li><li class="L5"><code class="language-go"><span class="pln"> fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">s</span><span class="pun">)</span><span class="pln"> </span><span class="com">//[1 2 3 4 5]</span></code></li><li class="L6"><code class="language-go"></code></li><li class="L7"><code class="language-go"><span class="pun">}</span></code></li><li class="L8"><code class="language-go"></code></li><li class="L9"><code class="language-go"><span class="com">/*</span></code></li><li class="L0"><code class="language-go"><span class="com">  定义函数规则：</span></code></li><li class="L1"><code class="language-go"><span class="com">    内部函数首字母小写，外部函数首字母大写</span></code></li><li class="L2"><code class="language-go"><span class="com">  如果函数没参数，直接A()，有参数，先参数名，再参数类型</span></code></li><li class="L3"><code class="language-go"><span class="com">  如果函数没有返回值，则直接func A(参数列表) {，</span></code></li><li class="L4"><code class="language-go"><span class="com">    如果有返回值，在括号内写所有要返回的参数类型,如果只有一个返回值，括号可以省去</span></code></li><li class="L5"><code class="language-go"><span class="com">*/</span></code></li><li class="L6"><code class="language-go"><span class="pln">func A</span><span class="pun">(</span><span class="pln">param1 </span><span class="kwd">int</span><span class="pun">,</span><span class="pln"> param2 </span><span class="kwd">string</span><span class="pun">)</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">bool</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-go"><span class="pun">}</span></code></li><li class="L8"><code class="language-go"></code></li><li class="L9"><code class="language-go"><span class="com">//接收类型相同，不定长长度</span></code></li><li class="L0"><code class="language-go"><span class="com">//f(1,2) f(1,3,4,5)</span></code></li><li class="L1"><code class="language-go"><span class="pln">func f</span><span class="pun">(</span><span class="pln">a </span><span class="pun">...</span><span class="kwd">int</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-go"><span class="pln"> </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">:=</span><span class="pln"> range a </span><span class="pun">{</span></code></li><li class="L3"><code class="language-go"><span class="pln">   fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">a</span><span class="pun">[</span><span class="pln">i</span><span class="pun">])</span></code></li><li class="L4"><code class="language-go"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L5"><code class="language-go"><span class="pln">  a</span><span class="pun">[</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3</span></code></li><li class="L6"><code class="language-go"><span class="pln"> fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">a</span><span class="pun">)</span><span class="pln"> </span><span class="com">//[1 3]</span></code></li><li class="L7"><code class="language-go"><span class="pun">}</span></code></li><li class="L8"><code class="language-go"></code></li><li class="L9"><code class="language-go"></code></li><li class="L0"><code class="language-go"><span class="com">//匿名函数</span></code></li><li class="L1"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-go"><span class="pln">  a </span><span class="pun">:=</span><span class="pln"> func</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="com">//a为这种类型的变量</span></code></li><li class="L3"><code class="language-go"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"func exec"</span><span class="pun">)</span></code></li><li class="L4"><code class="language-go"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L5"><code class="language-go"><span class="pln">  a</span><span class="pun">()</span><span class="pln"> </span><span class="com">//func exec</span></code></li><li class="L6"><code class="language-go"><span class="pun">}</span></code></li><li class="L7"><code class="language-go"></code></li><li class="L8"><code class="language-go"><span class="com">//go语言也支持闭包</span></code></li><li class="L9"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-go"><span class="pln"> c </span><span class="pun">:=</span><span class="pln"> closure</span><span class="pun">(</span><span class="lit">10</span><span class="pun">)</span></code></li><li class="L1"><code class="language-go"><span class="pln"> fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">c</span><span class="pun">(</span><span class="lit">1</span><span class="pun">))</span><span class="pln"> </span><span class="com">//11</span></code></li><li class="L2"><code class="language-go"><span class="pln"> fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">c</span><span class="pun">(</span><span class="lit">2</span><span class="pun">))</span><span class="pln"> </span><span class="com">//12</span></code></li><li class="L3"><code class="language-go"><span class="pun">}</span></code></li><li class="L4"><code class="language-go"><span class="com">//该函数返回函数类型</span></code></li><li class="L5"><code class="language-go"><span class="pln">func closure</span><span class="pun">(</span><span class="pln">x </span><span class="kwd">int</span><span class="pun">)</span><span class="pln"> func</span><span class="pun">(</span><span class="kwd">int</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%p\n"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">x</span><span class="pun">)</span><span class="pln"> </span><span class="com">//0xf840038020  三次地址都一样</span></code></li><li class="L7"><code class="language-go"><span class="pln"> </span><span class="kwd">return</span><span class="pln"> func</span><span class="pun">(</span><span class="pln">y </span><span class="kwd">int</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-go"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%p\n"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">x</span><span class="pun">)</span><span class="pln"> </span><span class="com">//0xf840038020</span></code></li><li class="L9"><code class="language-go"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> x </span><span class="pun">+</span><span class="pln"> y</span></code></li><li class="L0"><code class="language-go"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L1"><code class="language-go"><span class="pun">}</span></code></li><li class="L2"><code class="language-go"></code></li><li class="L3"><code class="language-go"><span class="com">//defer</span></code></li><li class="L4"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-go"><span class="pln"> fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"a"</span><span class="pun">)</span></code></li><li class="L6"><code class="language-go"><span class="pln"> defer fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"b"</span><span class="pun">)</span></code></li><li class="L7"><code class="language-go"><span class="pln"> defer fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"c"</span><span class="pun">)</span></code></li><li class="L8"><code class="language-go"><span class="pln"> </span><span class="com">/*</span></code></li><li class="L9"><code class="language-go"><span class="com">   输出顺序为</span></code></li><li class="L0"><code class="language-go"><span class="com">   a</span></code></li><li class="L1"><code class="language-go"><span class="com">   c</span></code></li><li class="L2"><code class="language-go"><span class="com">   b</span></code></li><li class="L3"><code class="language-go"><span class="com">   defer定义按照调用顺序的相反顺序逐个执行</span></code></li><li class="L4"><code class="language-go"><span class="com">  */</span></code></li><li class="L5"><code class="language-go"><span class="pun">}</span></code></li><li class="L6"><code class="language-go"></code></li><li class="L7"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"a"</span><span class="pun">)</span></code></li><li class="L9"><code class="language-go"><span class="pln"> defer fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"b"</span><span class="pun">)</span></code></li><li class="L0"><code class="language-go"><span class="pln"> defer fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"c"</span><span class="pun">)</span></code></li><li class="L1"><code class="language-go"><span class="pln"> </span><span class="com">/*</span></code></li><li class="L2"><code class="language-go"><span class="com">   输出顺序为</span></code></li><li class="L3"><code class="language-go"><span class="com">   a</span></code></li><li class="L4"><code class="language-go"><span class="com">   c</span></code></li><li class="L5"><code class="language-go"><span class="com">   b</span></code></li><li class="L6"><code class="language-go"><span class="com">   defer定义按照调用顺序的相反顺序逐个执行</span></code></li><li class="L7"><code class="language-go"><span class="com">  */</span></code></li><li class="L8"><code class="language-go"><span class="pun">}</span></code></li><li class="L9"><code class="language-go"></code></li><li class="L0"><code class="language-go"></code></li><li class="L1"><code class="language-go"></code></li><li class="L2"><code class="language-go"><span class="com">//go语言没有try catch，取代这种模式使用的panic、recover模式，Panic 可以在任何地方引发，但recover只有在defer调用的函数中有效</span></code></li><li class="L3"><code class="language-go"></code></li><li class="L4"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-go"><span class="pln">  A</span><span class="pun">()</span></code></li><li class="L6"><code class="language-go"><span class="pln">  B</span><span class="pun">()</span><span class="pln"> </span><span class="com">//B有panic，C函数就不执行了</span></code></li><li class="L7"><code class="language-go"><span class="pln"> C</span><span class="pun">()</span><span class="com">//可以看到A,B执行了，然后就抛出异常了，C没执行</span></code></li><li class="L8"><code class="language-go"><span class="pun">}</span></code></li><li class="L9"><code class="language-go"><span class="pln">func A</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-go"><span class="pln"> fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Func A"</span><span class="pun">)</span></code></li><li class="L1"><code class="language-go"><span class="pun">}</span></code></li><li class="L2"><code class="language-go"><span class="pln">func B</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-go"><span class="pln">  panic</span><span class="pun">(</span><span class="str">"Func B"</span><span class="pun">)</span></code></li><li class="L4"><code class="language-go"><span class="pun">}</span></code></li><li class="L5"><code class="language-go"><span class="pln">func C</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Func C"</span><span class="pun">)</span></code></li><li class="L7"><code class="language-go"><span class="pun">}</span></code></li><li class="L8"><code class="language-go"></code></li><li class="L9"><code class="language-go"></code></li><li class="L0"><code class="language-go"><span class="com">//将程序从panic状态recover到正常状态</span></code></li><li class="L1"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-go"><span class="pln">  A</span><span class="pun">()</span></code></li><li class="L3"><code class="language-go"><span class="pln">  B</span><span class="pun">()</span><span class="pln"> </span><span class="com">//B有panic，C函数就不执行了</span></code></li><li class="L4"><code class="language-go"><span class="pln"> C</span><span class="pun">()</span></code></li><li class="L5"><code class="language-go"><span class="com">/*</span></code></li><li class="L6"><code class="language-go"><span class="com">Func A</span></code></li><li class="L7"><code class="language-go"><span class="com">Recover in B</span></code></li><li class="L8"><code class="language-go"><span class="com">Func C</span></code></li><li class="L9"><code class="language-go"><span class="com"> */</span></code></li><li class="L0"><code class="language-go"></code></li><li class="L1"><code class="language-go"><span class="pln"> </span><span class="pun">*/</span></code></li><li class="L2"><code class="language-go"><span class="pun">}</span></code></li><li class="L3"><code class="language-go"><span class="pln">func A</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Func A"</span><span class="pun">)</span></code></li><li class="L5"><code class="language-go"><span class="pun">}</span></code></li><li class="L6"><code class="language-go"><span class="pln">func B</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-go"><span class="pln">  defer func</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-go"><span class="pln">   </span><span class="kwd">if</span><span class="pln"> err </span><span class="pun">:=</span><span class="pln"> recover</span><span class="pun">();</span><span class="pln"> err </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">nil</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-go"><span class="pln">      fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Recover in B"</span><span class="pun">)</span></code></li><li class="L0"><code class="language-go"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L1"><code class="language-go"><span class="pln">  </span><span class="pun">}()</span></code></li><li class="L2"><code class="language-go"><span class="pln">  panic</span><span class="pun">(</span><span class="str">"Func B"</span><span class="pun">)</span></code></li><li class="L3"><code class="language-go"><span class="pun">}</span></code></li><li class="L4"><code class="language-go"><span class="pln">func C</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Func C"</span><span class="pun">)</span></code></li><li class="L6"><code class="language-go"><span class="pun">}</span></code></li><li class="L7"><code class="language-go"></code></li><li class="L8"><code class="language-go"></code></li><li class="L9"><code class="language-go"><span class="com">//defer必须在panic之前出现，panic在哪个方法内，则停掉执行该方法后的所有。但不影响其他方法调用。这样才能拦截，如果如下，则就不能拦截。</span></code></li><li class="L0"><code class="language-go"></code></li><li class="L1"><code class="language-go"><span class="pln">func main</span><span class="pun">(){</span></code></li><li class="L2"><code class="language-go"><span class="pln">  A</span><span class="pun">()</span></code></li><li class="L3"><code class="language-go"><span class="pln">  B</span><span class="pun">()</span></code></li><li class="L4"><code class="language-go"><span class="pln">  panic</span><span class="pun">(</span><span class="str">"111"</span><span class="pun">)</span></code></li><li class="L5"><code class="language-go"><span class="pln"> C</span><span class="pun">()</span></code></li><li class="L6"><code class="language-go"><span class="pln">  </span><span class="com">/*</span></code></li><li class="L7"><code class="language-go"><span class="com"> 执行结果：</span></code></li><li class="L8"><code class="language-go"><span class="com"> panic: Func B</span></code></li><li class="L9"><code class="language-go"><span class="com"> Func A</span></code></li><li class="L0"><code class="language-go"><span class="com">  </span></code></li><li class="L1"><code class="language-go"><span class="com">  goroutine 1 [running]:</span></code></li><li class="L2"><code class="language-go"><span class="com">  */</span></code></li><li class="L3"><code class="language-go"><span class="pun">}</span></code></li><li class="L4"><code class="language-go"><span class="pln">func A</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Func A"</span><span class="pun">)</span></code></li><li class="L6"><code class="language-go"><span class="pun">}</span></code></li><li class="L7"><code class="language-go"><span class="pln">func B</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-go"><span class="pln">  defer func</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-go"><span class="pln">   </span><span class="kwd">if</span><span class="pln"> err </span><span class="pun">:=</span><span class="pln"> recover</span><span class="pun">();</span><span class="pln"> err </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">nil</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-go"><span class="pln">      fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Recover in B"</span><span class="pun">)</span></code></li><li class="L1"><code class="language-go"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L2"><code class="language-go"><span class="pln">  </span><span class="pun">}()</span></code></li><li class="L3"><code class="language-go"><span class="pun">}</span></code></li><li class="L4"><code class="language-go"><span class="pln">func C</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Func C"</span><span class="pun">)</span></code></li><li class="L6"><code class="language-go"><span class="pun">}</span></code></li><li class="L7"><code class="language-go"></code></li><li class="L8"><code class="language-go"><span class="com">//修改位置</span></code></li><li class="L9"><code class="language-go"></code></li><li class="L0"><code class="language-go"><span class="pln">func main</span><span class="pun">(){</span></code></li><li class="L1"><code class="language-go"><span class="pln">  A</span><span class="pun">()</span></code></li><li class="L2"><code class="language-go"><span class="pln">  B</span><span class="pun">()</span></code></li><li class="L3"><code class="language-go"></code></li><li class="L4"><code class="language-go"><span class="pln"> C</span><span class="pun">()</span></code></li><li class="L5"><code class="language-go"><span class="pln">  </span><span class="com">/*</span></code></li><li class="L6"><code class="language-go"><span class="com"> 执行结果：</span></code></li><li class="L7"><code class="language-go"><span class="com"> Func A</span></code></li><li class="L8"><code class="language-go"><span class="com">  Recover in B</span></code></li><li class="L9"><code class="language-go"><span class="com">  Func C</span></code></li><li class="L0"><code class="language-go"><span class="com">  */</span></code></li><li class="L1"><code class="language-go"><span class="pun">}</span></code></li><li class="L2"><code class="language-go"><span class="pln">func A</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Func A"</span><span class="pun">)</span></code></li><li class="L4"><code class="language-go"><span class="pun">}</span></code></li><li class="L5"><code class="language-go"><span class="pln">func B</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-go"><span class="pln">  defer func</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-go"><span class="pln">   </span><span class="kwd">if</span><span class="pln"> err </span><span class="pun">:=</span><span class="pln"> recover</span><span class="pun">();</span><span class="pln"> err </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">nil</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-go"><span class="pln">      fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Recover in B"</span><span class="pun">)</span></code></li><li class="L9"><code class="language-go"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L0"><code class="language-go"><span class="pln">  </span><span class="pun">}()</span></code></li><li class="L1"><code class="language-go"><span class="pln">  panic</span><span class="pun">(</span><span class="str">"111"</span><span class="pun">)</span></code></li><li class="L2"><code class="language-go"><span class="pun">}</span></code></li><li class="L3"><code class="language-go"><span class="pln">func C</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-go"><span class="pln"> fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Func C"</span><span class="pun">)</span></code></li><li class="L5"><code class="language-go"><span class="pun">}</span></code></li><li class="L6"><code class="language-go"></code></li><li class="L7"><code class="language-go"><span class="com">//或者</span></code></li><li class="L8"><code class="language-go"><span class="pln">func main</span><span class="pun">(){</span></code></li><li class="L9"><code class="language-go"><span class="pln"> A</span><span class="pun">()</span></code></li><li class="L0"><code class="language-go"></code></li><li class="L1"><code class="language-go"><span class="pln"> defer func</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-go"><span class="pln">   </span><span class="kwd">if</span><span class="pln"> err </span><span class="pun">:=</span><span class="pln"> recover</span><span class="pun">();</span><span class="pln"> err </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">nil</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-go"><span class="pln">      fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Recover in B"</span><span class="pun">)</span></code></li><li class="L4"><code class="language-go"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L5"><code class="language-go"><span class="pln">  </span><span class="pun">}()</span></code></li><li class="L6"><code class="language-go"><span class="pln">  B</span><span class="pun">()</span></code></li><li class="L7"><code class="language-go"><span class="pln">  C</span><span class="pun">()</span></code></li><li class="L8"><code class="language-go"><span class="pln">  </span><span class="com">/*</span></code></li><li class="L9"><code class="language-go"><span class="com"> 执行结果：</span></code></li><li class="L0"><code class="language-go"><span class="com"> Func A</span></code></li><li class="L1"><code class="language-go"><span class="com">  Recover in B</span></code></li><li class="L2"><code class="language-go"><span class="com">  */</span></code></li><li class="L3"><code class="language-go"><span class="pun">}</span></code></li><li class="L4"><code class="language-go"><span class="pln">func A</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Func A"</span><span class="pun">)</span></code></li><li class="L6"><code class="language-go"><span class="pun">}</span></code></li><li class="L7"><code class="language-go"><span class="pln">func B</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-go"><span class="pln">  panic</span><span class="pun">(</span><span class="str">"111"</span><span class="pun">)</span></code></li><li class="L9"><code class="language-go"><span class="pun">}</span></code></li><li class="L0"><code class="language-go"><span class="pln">func C</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-go"><span class="pln"> fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Func C"</span><span class="pun">)</span></code></li><li class="L2"><code class="language-go"><span class="pun">}</span></code></li><li class="L3"><code class="language-go"></code></li><li class="L4"><code class="language-go"><span class="com">//练习，看输出什么</span></code></li><li class="L5"><code class="language-go"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L6"><code class="language-go"><span class="pln"> </span></code></li><li class="L7"><code class="language-go"><span class="kwd">import</span><span class="pln"> </span><span class="str">"fmt"</span></code></li><li class="L8"><code class="language-go"><span class="pln"> </span></code></li><li class="L9"><code class="language-go"><span class="pln">func main</span><span class="pun">(){</span></code></li><li class="L0"><code class="language-go"><span class="pln">    defer func</span><span class="pun">(){</span><span class="pln"> </span><span class="com">// 必须要先声明defer，否则不能捕获到panic异常</span></code></li><li class="L1"><code class="language-go"><span class="pln">        fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"c"</span><span class="pun">)</span></code></li><li class="L2"><code class="language-go"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> err</span><span class="pun">:=</span><span class="pln">recover</span><span class="pun">();</span><span class="pln">err</span><span class="pun">!=</span><span class="kwd">nil</span><span class="pun">{</span></code></li><li class="L3"><code class="language-go"><span class="pln">            fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">err</span><span class="pun">)</span><span class="pln"> </span><span class="com">// 这里的err其实就是panic传入的内容，55</span></code></li><li class="L4"><code class="language-go"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L5"><code class="language-go"><span class="pln">        fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"d"</span><span class="pun">)</span></code></li><li class="L6"><code class="language-go"><span class="pln">    </span><span class="pun">}()</span></code></li><li class="L7"><code class="language-go"><span class="pln">    f</span><span class="pun">()</span></code></li><li class="L8"><code class="language-go"><span class="pun">}</span></code></li><li class="L9"><code class="language-go"><span class="pln"> </span></code></li><li class="L0"><code class="language-go"><span class="pln">func f</span><span class="pun">(){</span></code></li><li class="L1"><code class="language-go"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"a"</span><span class="pun">)</span></code></li><li class="L2"><code class="language-go"><span class="pln">    panic</span><span class="pun">(</span><span class="lit">55</span><span class="pun">)</span></code></li><li class="L3"><code class="language-go"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"b"</span><span class="pun">)</span></code></li><li class="L4"><code class="language-go"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"f"</span><span class="pun">)</span></code></li><li class="L5"><code class="language-go"><span class="pun">}</span></code></li><li class="L6"><code class="language-go"><span class="com">/*</span></code></li><li class="L7"><code class="language-go"><span class="com">输出结果：</span></code></li><li class="L8"><code class="language-go"><span class="com">a</span></code></li><li class="L9"><code class="language-go"><span class="com">c</span></code></li><li class="L0"><code class="language-go"><span class="com">55</span></code></li><li class="L1"><code class="language-go"><span class="com">d</span></code></li><li class="L2"><code class="language-go"><span class="com">exit code 0, process exited normally.</span></code></li><li class="L3"><code class="language-go"><span class="com">*/</span></code></li><li class="L4"><code class="language-go"></code></li><li class="L5"><code class="language-go"></code></li><li class="L6"><code class="language-go"></code></li><li class="L7"><code class="language-go"><span class="com">//结构struct</span></code></li><li class="L8"><code class="language-go"><span class="pln">type person </span><span class="kwd">struct</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-go"><span class="pln"> </span><span class="typ">Name</span><span class="pln"> </span><span class="kwd">string</span></code></li><li class="L0"><code class="language-go"><span class="pln">  </span><span class="typ">Age</span><span class="pln">  </span><span class="kwd">int</span></code></li><li class="L1"><code class="language-go"><span class="pun">}</span></code></li><li class="L2"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-go"><span class="pln">  a </span><span class="pun">:=</span><span class="pln"> person</span><span class="pun">{}</span></code></li><li class="L4"><code class="language-go"><span class="pln">  a</span><span class="pun">.</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"joe"</span></code></li><li class="L5"><code class="language-go"><span class="pln">  a</span><span class="pun">.</span><span class="typ">Age</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">13</span></code></li><li class="L6"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">a</span><span class="pun">)</span><span class="pln"> </span><span class="com">//{joe 13}</span></code></li><li class="L7"><code class="language-go"><span class="pun">}</span></code></li><li class="L8"><code class="language-go"><span class="com">//go没有构造方法，但是也提供了简单赋值</span></code></li><li class="L9"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-go"><span class="pln">  a </span><span class="pun">:=</span><span class="pln"> person</span><span class="pun">{</span></code></li><li class="L1"><code class="language-go"><span class="pln">   </span><span class="typ">Name</span><span class="pun">:</span><span class="pln"> </span><span class="str">"joe"</span><span class="pun">,</span></code></li><li class="L2"><code class="language-go"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L3"><code class="language-go"><span class="pln">  a</span><span class="pun">.</span><span class="typ">Age</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">13</span></code></li><li class="L4"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">a</span><span class="pun">)</span><span class="pln"> </span><span class="com">//{joe 13}</span></code></li><li class="L5"><code class="language-go"></code></li><li class="L6"><code class="language-go"><span class="pln"> b </span><span class="pun">:=</span><span class="pln"> person</span><span class="pun">{</span></code></li><li class="L7"><code class="language-go"><span class="pln">   </span><span class="typ">Name</span><span class="pun">:</span><span class="pln"> </span><span class="str">"joe"</span><span class="pun">,</span></code></li><li class="L8"><code class="language-go"><span class="pln">   </span><span class="typ">Age</span><span class="pun">:</span><span class="pln">  </span><span class="lit">13</span><span class="pun">,</span></code></li><li class="L9"><code class="language-go"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L0"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">b</span><span class="pun">)</span><span class="pln"> </span><span class="com">//{joe 13}</span></code></li><li class="L1"><code class="language-go"><span class="pun">}</span></code></li><li class="L2"><code class="language-go"></code></li><li class="L3"><code class="language-go"><span class="com">//go传递的是引用</span></code></li><li class="L4"><code class="language-go"><span class="pln">type person </span><span class="kwd">struct</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-go"><span class="pln"> </span><span class="typ">Name</span><span class="pln"> </span><span class="kwd">string</span></code></li><li class="L6"><code class="language-go"><span class="pln">  </span><span class="typ">Age</span><span class="pln">  </span><span class="kwd">int</span></code></li><li class="L7"><code class="language-go"><span class="pun">}</span></code></li><li class="L8"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-go"><span class="pln">  a </span><span class="pun">:=</span><span class="pln"> person</span><span class="pun">{</span></code></li><li class="L0"><code class="language-go"><span class="pln">   </span><span class="typ">Name</span><span class="pun">:</span><span class="pln"> </span><span class="str">"joe"</span><span class="pun">,</span></code></li><li class="L1"><code class="language-go"><span class="pln">   </span><span class="typ">Age</span><span class="pun">:</span><span class="pln">  </span><span class="lit">13</span><span class="pun">,</span></code></li><li class="L2"><code class="language-go"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L3"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">a</span><span class="pun">)</span><span class="pln"> </span><span class="com">//{joe 13}</span></code></li><li class="L4"><code class="language-go"><span class="pln">  A</span><span class="pun">(</span><span class="pln">a</span><span class="pun">)</span></code></li><li class="L5"><code class="language-go"><span class="pln"> fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">a</span><span class="pun">)</span><span class="pln"> </span><span class="com">//{joe 13}</span></code></li><li class="L6"><code class="language-go"><span class="pln">  B</span><span class="pun">(&amp;</span><span class="pln">a</span><span class="pun">)</span></code></li><li class="L7"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">a</span><span class="pun">)</span><span class="pln"> </span><span class="com">//{joe 21}</span></code></li><li class="L8"><code class="language-go"><span class="pun">}</span></code></li><li class="L9"><code class="language-go"><span class="pln">func A</span><span class="pun">(</span><span class="pln">per person</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-go"><span class="pln">  per</span><span class="pun">.</span><span class="typ">Age</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">20</span></code></li><li class="L1"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"perA"</span><span class="pun">,</span><span class="pln"> per</span><span class="pun">)</span><span class="pln"> </span><span class="com">//perA {joe 20}</span></code></li><li class="L2"><code class="language-go"><span class="pun">}</span></code></li><li class="L3"><code class="language-go"><span class="pln">func B</span><span class="pun">(</span><span class="pln">per </span><span class="pun">*</span><span class="pln">person</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-go"><span class="pln">  per</span><span class="pun">.</span><span class="typ">Age</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">21</span></code></li><li class="L5"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"perB"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">*</span><span class="pln">per</span><span class="pun">)</span><span class="pln"> </span><span class="com">//perB {joe 21}</span></code></li><li class="L6"><code class="language-go"><span class="pun">}</span></code></li><li class="L7"><code class="language-go"></code></li><li class="L8"><code class="language-go"><span class="com">//习惯定义对象直接定义成指针类型，go对指针的使用直接都是.，这样定义方便以后修改</span></code></li><li class="L9"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-go"><span class="pln">  a </span><span class="pun">:=</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">person</span><span class="pun">{</span></code></li><li class="L1"><code class="language-go"><span class="pln">    </span><span class="typ">Name</span><span class="pun">:</span><span class="pln"> </span><span class="str">"joe"</span><span class="pun">,</span></code></li><li class="L2"><code class="language-go"><span class="pln">   </span><span class="typ">Age</span><span class="pun">:</span><span class="pln">  </span><span class="lit">13</span><span class="pun">,</span></code></li><li class="L3"><code class="language-go"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L4"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">a</span><span class="pun">)</span><span class="pln"> </span><span class="com">//&amp;{joe 13}</span></code></li><li class="L5"><code class="language-go"><span class="pln"> B</span><span class="pun">(</span><span class="pln">a</span><span class="pun">)</span></code></li><li class="L6"><code class="language-go"><span class="pln"> fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">a</span><span class="pun">)</span><span class="pln"> </span><span class="com">//&amp;{joe 21}</span></code></li><li class="L7"><code class="language-go"><span class="pun">}</span></code></li><li class="L8"><code class="language-go"><span class="pln">func B</span><span class="pun">(</span><span class="pln">per </span><span class="pun">*</span><span class="pln">person</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-go"><span class="pln">  per</span><span class="pun">.</span><span class="typ">Age</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">21</span></code></li><li class="L0"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"perB"</span><span class="pun">,</span><span class="pln"> per</span><span class="pun">)</span><span class="pln"> </span><span class="com">//perB &amp;{joe 21}</span></code></li><li class="L1"><code class="language-go"><span class="pun">}</span></code></li><li class="L2"><code class="language-go"></code></li><li class="L3"><code class="language-go"><span class="com">//匿名结构</span></code></li><li class="L4"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-go"><span class="pln">  per </span><span class="pun">:=</span><span class="pln"> </span><span class="pun">&amp;</span><span class="kwd">struct</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="com">//定义结构</span></code></li><li class="L6"><code class="language-go"><span class="pln">   </span><span class="typ">Name</span><span class="pln"> </span><span class="kwd">string</span></code></li><li class="L7"><code class="language-go"><span class="pln">    </span><span class="typ">Age</span><span class="pln">  </span><span class="kwd">int</span></code></li><li class="L8"><code class="language-go"><span class="pln"> </span><span class="pun">}{</span><span class="pln"> </span><span class="com">//初始化结构</span></code></li><li class="L9"><code class="language-go"><span class="pln">   </span><span class="typ">Name</span><span class="pun">:</span><span class="pln"> </span><span class="str">"Joe"</span><span class="pun">,</span></code></li><li class="L0"><code class="language-go"><span class="pln">   </span><span class="typ">Age</span><span class="pun">:</span><span class="pln">  </span><span class="lit">12</span><span class="pun">,</span></code></li><li class="L1"><code class="language-go"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L2"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">per</span><span class="pun">)</span></code></li><li class="L3"><code class="language-go"><span class="pun">}</span></code></li><li class="L4"><code class="language-go"></code></li><li class="L5"><code class="language-go"><span class="com">//匿名字段</span></code></li><li class="L6"><code class="language-go"><span class="pln">type </span><span class="typ">Person</span><span class="pln"> </span><span class="kwd">struct</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-go"><span class="pln">  </span><span class="com">//匿名字段</span></code></li><li class="L8"><code class="language-go"><span class="pln"> </span><span class="kwd">string</span></code></li><li class="L9"><code class="language-go"><span class="pln"> </span><span class="kwd">int</span></code></li><li class="L0"><code class="language-go"><span class="pun">}</span></code></li><li class="L1"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-go"><span class="pln"> a </span><span class="pun">:=</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">(</span><span class="str">"joe"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">19</span><span class="pun">)</span><span class="pln"> </span><span class="com">//初始化时按照匿名字段定义顺序赋值</span></code></li><li class="L3"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">a</span><span class="pun">)</span></code></li><li class="L4"><code class="language-go"><span class="pun">}</span></code></li><li class="L5"><code class="language-go"><span class="com">//匿名结构</span></code></li><li class="L6"><code class="language-go"><span class="pln">type </span><span class="typ">Person</span><span class="pln"> </span><span class="kwd">struct</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-go"><span class="pln"> </span><span class="typ">Name</span><span class="pln">    </span><span class="kwd">string</span></code></li><li class="L8"><code class="language-go"><span class="pln"> </span><span class="typ">Age</span><span class="pln">     </span><span class="kwd">int</span></code></li><li class="L9"><code class="language-go"><span class="pln">  </span><span class="typ">Contact</span><span class="pln"> </span><span class="kwd">struct</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-go"><span class="pln">   </span><span class="com">/*</span></code></li><li class="L1"><code class="language-go"><span class="com">     Phone string</span></code></li><li class="L2"><code class="language-go"><span class="com">      City  string</span></code></li><li class="L3"><code class="language-go"><span class="com">    */</span></code></li><li class="L4"><code class="language-go"><span class="pln">    </span><span class="com">//类型相同，可以省略之写一次类型</span></code></li><li class="L5"><code class="language-go"><span class="pln">    </span><span class="typ">Phone</span><span class="pun">,</span><span class="pln"> </span><span class="typ">City</span><span class="pln"> </span><span class="kwd">string</span></code></li><li class="L6"><code class="language-go"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L7"><code class="language-go"><span class="pun">}</span></code></li><li class="L8"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-go"><span class="pln"> person </span><span class="pun">:=</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">{</span></code></li><li class="L0"><code class="language-go"><span class="pln">   </span><span class="typ">Name</span><span class="pun">:</span><span class="pln"> </span><span class="str">"Joe"</span><span class="pun">,</span></code></li><li class="L1"><code class="language-go"><span class="pln">   </span><span class="typ">Age</span><span class="pun">:</span><span class="pln">  </span><span class="lit">19</span><span class="pun">,</span></code></li><li class="L2"><code class="language-go"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L3"><code class="language-go"><span class="pln">  </span><span class="com">//Contact是个类型</span></code></li><li class="L4"><code class="language-go"><span class="pln">  person</span><span class="pun">.</span><span class="typ">Contact</span><span class="pun">.</span><span class="typ">Phone</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"2143423"</span></code></li><li class="L5"><code class="language-go"><span class="pln">  person</span><span class="pun">.</span><span class="typ">Contact</span><span class="pun">.</span><span class="typ">City</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Beijing"</span></code></li><li class="L6"><code class="language-go"><span class="pln"> fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">person</span><span class="pun">)</span></code></li><li class="L7"><code class="language-go"><span class="pun">}</span></code></li><li class="L8"><code class="language-go"></code></li><li class="L9"><code class="language-go"><span class="pln">type A </span><span class="kwd">struct</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-go"><span class="pln">  B</span></code></li><li class="L1"><code class="language-go"><span class="pln"> C</span></code></li><li class="L2"><code class="language-go"><span class="pun">}</span></code></li><li class="L3"><code class="language-go"><span class="pln">type B </span><span class="kwd">struct</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-go"><span class="pln">  </span><span class="typ">Name</span><span class="pln"> </span><span class="kwd">string</span></code></li><li class="L5"><code class="language-go"><span class="pln">  </span><span class="typ">Sex</span><span class="pln">  </span><span class="kwd">int</span></code></li><li class="L6"><code class="language-go"><span class="pun">}</span></code></li><li class="L7"><code class="language-go"><span class="pln">type C </span><span class="kwd">struct</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-go"><span class="pln">  </span><span class="typ">Name</span><span class="pln"> </span><span class="kwd">string</span></code></li><li class="L9"><code class="language-go"><span class="pun">}</span></code></li><li class="L0"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-go"><span class="pln"> a </span><span class="pun">:=</span><span class="pln"> A</span><span class="pun">{</span><span class="pln">B</span><span class="pun">:</span><span class="pln"> B</span><span class="pun">{</span><span class="typ">Name</span><span class="pun">:</span><span class="pln"> </span><span class="str">"B"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Sex</span><span class="pun">:</span><span class="pln"> </span><span class="lit">12</span><span class="pun">},</span><span class="pln"> C</span><span class="pun">:</span><span class="pln"> C</span><span class="pun">{</span><span class="typ">Name</span><span class="pun">:</span><span class="pln"> </span><span class="str">"C"</span><span class="pun">}}</span></code></li><li class="L2"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">a</span><span class="pun">.</span><span class="typ">Sex</span><span class="pun">,</span><span class="pln"> a</span><span class="pun">.</span><span class="pln">B</span><span class="pun">.</span><span class="typ">Sex</span><span class="pun">)</span><span class="pln"> </span><span class="com">//12 12</span></code></li><li class="L3"><code class="language-go"><span class="pln">  </span><span class="com">//fmt.Println(a.Name)  //编译器无法确认获取B还是C的，这时会报错</span></code></li><li class="L4"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">a</span><span class="pun">.</span><span class="pln">B</span><span class="pun">.</span><span class="typ">Name</span><span class="pun">,</span><span class="pln"> a</span><span class="pun">.</span><span class="pln">C</span><span class="pun">.</span><span class="typ">Name</span><span class="pun">)</span><span class="pln"> </span><span class="com">//B  C</span></code></li><li class="L5"><code class="language-go"><span class="pun">}</span></code></li><li class="L6"><code class="language-go"></code></li><li class="L7"><code class="language-go"></code></li><li class="L8"><code class="language-go"><span class="com">//go中method</span></code></li><li class="L9"><code class="language-go"><span class="com">//Go 中虽没有class，但依旧有method。通过显示说明receiver来实现与某个类型的组合，如扩展系统提供的哪些类型下方法</span></code></li><li class="L0"><code class="language-go"><span class="pln">type A </span><span class="kwd">struct</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-go"><span class="pln">  </span><span class="typ">Name</span><span class="pln"> </span><span class="kwd">string</span></code></li><li class="L2"><code class="language-go"><span class="pun">}</span></code></li><li class="L3"><code class="language-go"><span class="pln">type B </span><span class="kwd">struct</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-go"><span class="pln"> </span><span class="typ">Name</span><span class="pln"> </span><span class="kwd">string</span></code></li><li class="L5"><code class="language-go"><span class="pun">}</span></code></li><li class="L6"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-go"><span class="pln"> a </span><span class="pun">:=</span><span class="pln"> A</span><span class="pun">{}</span></code></li><li class="L8"><code class="language-go"><span class="pln"> </span><span class="com">//调用A结构的方法</span></code></li><li class="L9"><code class="language-go"><span class="pln"> a</span><span class="pun">.</span><span class="typ">Print</span><span class="pun">()</span></code></li><li class="L0"><code class="language-go"><span class="pun">}</span></code></li><li class="L1"><code class="language-go"><span class="com">//定义接收者规则</span></code></li><li class="L2"><code class="language-go"><span class="com">//还是func关键字 (变量 接收者类型) 方法名称(方法参数) {}</span></code></li><li class="L3"><code class="language-go"><span class="com">//这样这个方法就和A结构链在了一起</span></code></li><li class="L4"><code class="language-go"><span class="pln">func </span><span class="pun">(</span><span class="pln">a A</span><span class="pun">)</span><span class="pln"> </span><span class="typ">Print</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"A"</span><span class="pun">)</span></code></li><li class="L6"><code class="language-go"><span class="pun">}</span></code></li><li class="L7"><code class="language-go"></code></li><li class="L8"><code class="language-go"><span class="com">//别名定义</span></code></li><li class="L9"><code class="language-go"><span class="pln">type TZ </span><span class="kwd">int</span></code></li><li class="L0"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-go"><span class="pln"> </span><span class="kwd">var</span><span class="pln"> a TZ</span></code></li><li class="L2"><code class="language-go"><span class="pln">  a</span><span class="pun">.</span><span class="typ">Print</span><span class="pun">()</span><span class="pln"> </span><span class="com">//TZ</span></code></li><li class="L3"><code class="language-go"><span class="pun">}</span></code></li><li class="L4"><code class="language-go"><span class="pln">func </span><span class="pun">(</span><span class="pln">a </span><span class="pun">*</span><span class="pln">TZ</span><span class="pun">)</span><span class="pln"> </span><span class="typ">Print</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"TZ"</span><span class="pun">)</span></code></li><li class="L6"><code class="language-go"><span class="pun">}</span></code></li><li class="L7"><code class="language-go"></code></li><li class="L8"><code class="language-go"><span class="com">//如上面，如果大家对int类型由一个更高级的操作，更高级的封装，就可以把int先作为底层类型，然后在对自定义类型做方法的绑定，操作，即可以实现更高级的操作。而且更加方便。</span></code></li><li class="L9"><code class="language-go"></code></li><li class="L0"><code class="language-go"></code></li><li class="L1"><code class="language-go"><span class="com">//Method Value方式和Method Expression方式一样</span></code></li><li class="L2"><code class="language-go"><span class="pln">type TZ </span><span class="kwd">int</span></code></li><li class="L3"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-go"><span class="pln">  </span><span class="kwd">var</span><span class="pln"> a TZ</span></code></li><li class="L5"><code class="language-go"><span class="pln">  </span><span class="com">//这是Method Value方式</span></code></li><li class="L6"><code class="language-go"><span class="pln"> a</span><span class="pun">.</span><span class="typ">Print</span><span class="pun">()</span><span class="pln"> </span><span class="com">//TZ</span></code></li><li class="L7"><code class="language-go"><span class="pln"> </span><span class="com">//receiver是指针类型</span></code></li><li class="L8"><code class="language-go"><span class="pln">  </span><span class="com">//这是Method Expression方式  这两种方式一样</span></code></li><li class="L9"><code class="language-go"><span class="pln"> </span><span class="pun">(*</span><span class="pln">TZ</span><span class="pun">).</span><span class="typ">Print</span><span class="pun">(&amp;</span><span class="pln">a</span><span class="pun">)</span><span class="pln"> </span><span class="com">//TZ</span></code></li><li class="L0"><code class="language-go"><span class="pun">}</span></code></li><li class="L1"><code class="language-go"><span class="pln">func </span><span class="pun">(</span><span class="pln">a </span><span class="pun">*</span><span class="pln">TZ</span><span class="pun">)</span><span class="pln"> </span><span class="typ">Print</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"TZ"</span><span class="pun">)</span></code></li><li class="L3"><code class="language-go"><span class="pun">}</span></code></li><li class="L4"><code class="language-go"></code></li><li class="L5"><code class="language-go"></code></li><li class="L6"><code class="language-go"></code></li><li class="L7"><code class="language-go"><span class="com">//接口</span></code></li><li class="L8"><code class="language-go"><span class="com">//只要某个类型拥有该接口的所有方法签名，即算实现该接口，无需显示</span></code></li><li class="L9"><code class="language-go"><span class="com">//定义接口</span></code></li><li class="L0"><code class="language-go"><span class="pln">type USB </span><span class="kwd">interface</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-go"><span class="pln">  </span><span class="typ">Name</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">string</span></code></li><li class="L2"><code class="language-go"><span class="pln"> </span><span class="typ">Connect</span><span class="pun">()</span></code></li><li class="L3"><code class="language-go"><span class="pun">}</span></code></li><li class="L4"><code class="language-go"><span class="com">//定义实现接口的结构</span></code></li><li class="L5"><code class="language-go"><span class="pln">type </span><span class="typ">PhoneConnector</span><span class="pln"> </span><span class="kwd">struct</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-go"><span class="pln">  name </span><span class="kwd">string</span></code></li><li class="L7"><code class="language-go"><span class="pun">}</span></code></li><li class="L8"><code class="language-go"><span class="com">//定义结构实现接口方法</span></code></li><li class="L9"><code class="language-go"><span class="pln">func </span><span class="pun">(</span><span class="pln">pc </span><span class="typ">PhoneConnector</span><span class="pun">)</span><span class="pln"> </span><span class="typ">Name</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-go"><span class="pln">  </span><span class="kwd">return</span><span class="pln"> pc</span><span class="pun">.</span><span class="pln">name</span></code></li><li class="L1"><code class="language-go"><span class="pun">}</span></code></li><li class="L2"><code class="language-go"><span class="pln">func </span><span class="pun">(</span><span class="pln">pc </span><span class="typ">PhoneConnector</span><span class="pun">)</span><span class="pln"> </span><span class="typ">Connect</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Connect:"</span><span class="pun">,</span><span class="pln"> pc</span><span class="pun">.</span><span class="pln">name</span><span class="pun">)</span></code></li><li class="L4"><code class="language-go"><span class="pun">}</span></code></li><li class="L5"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-go"><span class="pln">  </span><span class="com">//可以看到PhoneConnector实现了USB接口</span></code></li><li class="L7"><code class="language-go"><span class="pln"> </span><span class="kwd">var</span><span class="pln"> a USB</span></code></li><li class="L8"><code class="language-go"><span class="pln"> a </span><span class="pun">=</span><span class="pln"> </span><span class="typ">PhoneConnector</span><span class="pun">{</span><span class="str">"PhoneConnector"</span><span class="pun">}</span></code></li><li class="L9"><code class="language-go"><span class="pln">  a</span><span class="pun">.</span><span class="typ">Connect</span><span class="pun">()</span><span class="pln">   </span><span class="com">//Connect: PhoneConnector</span></code></li><li class="L0"><code class="language-go"><span class="pln">  </span><span class="typ">Disconnect</span><span class="pun">(</span><span class="pln">a</span><span class="pun">)</span><span class="pln"> </span><span class="com">//Disconnected.</span></code></li><li class="L1"><code class="language-go"><span class="pun">}</span></code></li><li class="L2"><code class="language-go"><span class="pln">func </span><span class="typ">Disconnect</span><span class="pun">(</span><span class="pln">usb USB</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Disconnected."</span><span class="pun">)</span></code></li><li class="L4"><code class="language-go"><span class="pun">}</span></code></li><li class="L5"><code class="language-go"></code></li><li class="L6"><code class="language-go"><span class="com">//定义接口</span></code></li><li class="L7"><code class="language-go"><span class="pln">type USB </span><span class="kwd">interface</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-go"><span class="pln">  </span><span class="typ">Name</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">string</span></code></li><li class="L9"><code class="language-go"><span class="pln"> </span><span class="typ">Connector</span><span class="pln"> </span><span class="com">//嵌入接口</span></code></li><li class="L0"><code class="language-go"><span class="pun">}</span></code></li><li class="L1"><code class="language-go"><span class="pln">type </span><span class="typ">Connector</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-go"><span class="pln"> </span><span class="typ">Connect</span><span class="pun">()</span></code></li><li class="L3"><code class="language-go"><span class="pun">}</span></code></li><li class="L4"><code class="language-go"></code></li><li class="L5"><code class="language-go"></code></li><li class="L6"><code class="language-go"></code></li><li class="L7"><code class="language-go"><span class="com">//其他语言中任何类都有父类Object，go没有继承概念，但是也存在顶级父类</span></code></li><li class="L8"><code class="language-go"><span class="com">//go语言不需要你显示指定实现了哪个接口，而只需要实现接口的所有方法，只要实现类实现的方法和接口定义方法签名相同，它就认为你实现了这个接口。</span></code></li><li class="L9"><code class="language-go"><span class="pln">type empty </span><span class="kwd">interface</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-go"><span class="pun">}</span></code></li><li class="L1"><code class="language-go"><span class="com">//定义接口</span></code></li><li class="L2"><code class="language-go"><span class="pln">type USB </span><span class="kwd">interface</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-go"><span class="pln">  </span><span class="typ">Name</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">string</span></code></li><li class="L4"><code class="language-go"><span class="pln"> </span><span class="typ">Connector</span><span class="pln"> </span><span class="com">//嵌入接口</span></code></li><li class="L5"><code class="language-go"><span class="pun">}</span></code></li><li class="L6"><code class="language-go"><span class="pln">type </span><span class="typ">Connector</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-go"><span class="pln"> </span><span class="typ">Connect</span><span class="pun">()</span></code></li><li class="L8"><code class="language-go"><span class="pun">}</span></code></li><li class="L9"><code class="language-go"><span class="com">//定义实现接口的结构</span></code></li><li class="L0"><code class="language-go"><span class="pln">type </span><span class="typ">PhoneConnector</span><span class="pln"> </span><span class="kwd">struct</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-go"><span class="pln">  name </span><span class="kwd">string</span></code></li><li class="L2"><code class="language-go"><span class="pun">}</span></code></li><li class="L3"><code class="language-go"><span class="com">//定义结构实现接口方法</span></code></li><li class="L4"><code class="language-go"><span class="pln">func </span><span class="pun">(</span><span class="pln">pc </span><span class="typ">PhoneConnector</span><span class="pun">)</span><span class="pln"> </span><span class="typ">Name</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-go"><span class="pln">  </span><span class="kwd">return</span><span class="pln"> pc</span><span class="pun">.</span><span class="pln">name</span></code></li><li class="L6"><code class="language-go"><span class="pun">}</span></code></li><li class="L7"><code class="language-go"><span class="pln">func </span><span class="pun">(</span><span class="pln">pc </span><span class="typ">PhoneConnector</span><span class="pun">)</span><span class="pln"> </span><span class="typ">Connect</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Connect:"</span><span class="pun">,</span><span class="pln"> pc</span><span class="pun">.</span><span class="pln">name</span><span class="pun">)</span></code></li><li class="L9"><code class="language-go"><span class="pun">}</span></code></li><li class="L0"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-go"><span class="pln">  </span><span class="com">//可以看到PhoneConnector实现了USB接口</span></code></li><li class="L2"><code class="language-go"><span class="pln"> </span><span class="kwd">var</span><span class="pln"> a USB</span></code></li><li class="L3"><code class="language-go"><span class="pln"> a </span><span class="pun">=</span><span class="pln"> </span><span class="typ">PhoneConnector</span><span class="pun">{</span><span class="str">"PhoneConnector"</span><span class="pun">}</span></code></li><li class="L4"><code class="language-go"><span class="pln">  a</span><span class="pun">.</span><span class="typ">Connect</span><span class="pun">()</span><span class="pln">   </span><span class="com">//Connect: PhoneConnector</span></code></li><li class="L5"><code class="language-go"><span class="pln">  </span><span class="typ">Disconnect</span><span class="pun">(</span><span class="pln">a</span><span class="pun">)</span><span class="pln"> </span><span class="com">//Disconnected:PhoneConnector</span></code></li><li class="L6"><code class="language-go"><span class="pun">}</span></code></li><li class="L7"><code class="language-go"><span class="pln">func </span><span class="typ">Disconnect</span><span class="pun">(</span><span class="pln">usb USB</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-go"><span class="pln">  </span><span class="com">//判断usb到底是哪个具体类型方法</span></code></li><li class="L9"><code class="language-go"><span class="pln"> </span><span class="kwd">if</span><span class="pln"> pc</span><span class="pun">,</span><span class="pln"> ok </span><span class="pun">:=</span><span class="pln"> usb</span><span class="pun">.(</span><span class="typ">PhoneConnector</span><span class="pun">);</span><span class="pln"> ok </span><span class="pun">{</span></code></li><li class="L0"><code class="language-go"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Disconnected:"</span><span class="pun">,</span><span class="pln"> pc</span><span class="pun">.</span><span class="pln">name</span><span class="pun">)</span></code></li><li class="L1"><code class="language-go"><span class="pln">    </span><span class="kwd">return</span></code></li><li class="L2"><code class="language-go"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L3"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Unknown device."</span><span class="pun">)</span></code></li><li class="L4"><code class="language-go"><span class="pun">}</span></code></li><li class="L5"><code class="language-go"><span class="pln">func </span><span class="typ">Disconnect</span><span class="pun">(</span><span class="pln">usb </span><span class="kwd">interface</span><span class="pun">{})</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="com">//该办法可以传递任何的实现类进来，但是如果你明确实现那个接口，最好写清楚哪个</span></code></li><li class="L6"><code class="language-go"><span class="pln"> </span><span class="com">//判断usb到底是哪个具体类型方法,使用这个办法代码有点复杂，go提供更简便办法</span></code></li><li class="L7"><code class="language-go"><span class="pln">  </span><span class="com">/*</span></code></li><li class="L8"><code class="language-go"><span class="com">   if pc, ok := usb.(PhoneConnector); ok {</span></code></li><li class="L9"><code class="language-go"><span class="com">     fmt.Println("Disconnected:", pc.name)</span></code></li><li class="L0"><code class="language-go"><span class="com">     return</span></code></li><li class="L1"><code class="language-go"><span class="com">    }</span></code></li><li class="L2"><code class="language-go"><span class="com"> */</span></code></li><li class="L3"><code class="language-go"><span class="pln">  </span><span class="com">//go提供的简便的判断类型方法 type，让系统去判断类型</span></code></li><li class="L4"><code class="language-go"><span class="pln"> </span><span class="kwd">switch</span><span class="pln"> v </span><span class="pun">:=</span><span class="pln"> usb</span><span class="pun">.(</span><span class="pln">type</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-go"><span class="pln"> </span><span class="kwd">case</span><span class="pln"> </span><span class="typ">PhoneConnector</span><span class="pun">:</span></code></li><li class="L6"><code class="language-go"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Disconnected:"</span><span class="pun">,</span><span class="pln"> v</span><span class="pun">.</span><span class="pln">name</span><span class="pun">)</span></code></li><li class="L7"><code class="language-go"><span class="pln"> </span><span class="kwd">default</span><span class="pun">:</span></code></li><li class="L8"><code class="language-go"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Unknown device."</span><span class="pun">)</span></code></li><li class="L9"><code class="language-go"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L0"><code class="language-go"><span class="pln">  </span><span class="com">//使用switch这种类型经常用在接收空接口时候,参数烈面interface{}是可以换成哪个接口名的</span></code></li><li class="L1"><code class="language-go"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></div><div><div style="line-height: 24.2667px;">go专门提供了reflect库专门用来实现反射的。</div><div style="line-height: 24.2667px;"><br></div><div><div><span style="line-height: 24.2667px;">并发主要由切换时间片来实现“同时”运行，而并行则是直接利用多核实现多线程的运行，但 Go 可以设置使用核数，以发挥多核计算机的能力。</span></div><div><span style="line-height: 24.2667px;">Goroutine 奉行通过通信来共享内存，而不是共享内存来通信。</span></div></div><div><div style="line-height: 24.2667px;"><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-go"><span class="pln"> </span><span class="com">//运行goroutine</span></code></li><li class="L2"><code class="language-go"><span class="pln">  go </span><span class="typ">Go</span><span class="pun">()</span></code></li><li class="L3"><code class="language-go"><span class="pln"> time</span><span class="pun">.</span><span class="typ">Sleep</span><span class="pun">(</span><span class="lit">2</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> time</span><span class="pun">.</span><span class="typ">Second</span><span class="pun">)</span><span class="pln"> </span><span class="com">//休息2s，注意请使用go提供的表示单位</span></code></li><li class="L4"><code class="language-go"><span class="pun">}</span></code></li><li class="L5"><code class="language-go"><span class="pln">func </span><span class="typ">Go</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-go"><span class="pln"> fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Go Go Go!!!"</span><span class="pun">)</span></code></li><li class="L7"><code class="language-go"><span class="pun">}</span></code></li><li class="L8"><code class="language-go"></code></li><li class="L9"><code class="language-go"></code></li><li class="L0"><code class="language-go"></code></li><li class="L1"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-go"><span class="pln"> </span><span class="com">//让主线程等待子线程执行完毕在退出</span></code></li><li class="L3"><code class="language-go"><span class="pln"> c </span><span class="pun">:=</span><span class="pln"> make</span><span class="pun">(</span><span class="pln">chan </span><span class="kwd">bool</span><span class="pun">)</span></code></li><li class="L4"><code class="language-go"><span class="pln">  </span><span class="com">//运行goroutine</span></code></li><li class="L5"><code class="language-go"><span class="pln">  go func</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-go"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Go Go Go!!!"</span><span class="pun">)</span></code></li><li class="L7"><code class="language-go"><span class="pln">   c </span><span class="pun">&lt;-</span><span class="pln"> </span><span class="kwd">true</span><span class="pln"> </span><span class="com">//上面channel定义成bool类型，所以这里返回bool true/false都可以</span></code></li><li class="L8"><code class="language-go"><span class="pln"> </span><span class="pun">}()</span></code></li><li class="L9"><code class="language-go"><span class="pln">  </span><span class="pun">&lt;-</span><span class="pln">c </span><span class="com">//当执行goroutine时，就会阻塞在这一行，等子线程内发出结束消息</span></code></li><li class="L0"><code class="language-go"><span class="pln">  </span><span class="com">//程序非常简单，退出程序时候就自动释放了，不需要close关闭</span></code></li><li class="L1"><code class="language-go"><span class="pun">}</span></code></li><li class="L2"><code class="language-go"></code></li><li class="L3"><code class="language-go"></code></li><li class="L4"><code class="language-go"><span class="com">//可以使用 for range 来迭代不断操作 channel</span></code></li><li class="L5"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-go"><span class="pln">  </span><span class="com">//让主线程等待子线程执行完毕在退出</span></code></li><li class="L7"><code class="language-go"><span class="pln"> c </span><span class="pun">:=</span><span class="pln"> make</span><span class="pun">(</span><span class="pln">chan </span><span class="kwd">bool</span><span class="pun">)</span></code></li><li class="L8"><code class="language-go"><span class="pln">  </span><span class="com">//运行goroutine</span></code></li><li class="L9"><code class="language-go"><span class="pln">  go func</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-go"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Go Go Go!!!"</span><span class="pun">)</span></code></li><li class="L1"><code class="language-go"><span class="pln">   c </span><span class="pun">&lt;-</span><span class="pln"> </span><span class="kwd">true</span><span class="pln"> </span><span class="com">//上面channel定义成bool类型，所以这里返回bool true/false都可以</span></code></li><li class="L2"><code class="language-go"><span class="pln">   time</span><span class="pun">.</span><span class="typ">Sleep</span><span class="pun">(</span><span class="lit">2</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> time</span><span class="pun">.</span><span class="typ">Second</span><span class="pun">)</span></code></li><li class="L3"><code class="language-go"><span class="pln">   c </span><span class="pun">&lt;-</span><span class="pln"> </span><span class="kwd">false</span></code></li><li class="L4"><code class="language-go"><span class="pln">    close</span><span class="pun">(</span><span class="pln">c</span><span class="pun">)</span></code></li><li class="L5"><code class="language-go"><span class="pln"> </span><span class="pun">}()</span></code></li><li class="L6"><code class="language-go"><span class="pln">  </span><span class="kwd">for</span><span class="pln"> v </span><span class="pun">:=</span><span class="pln"> range c </span><span class="pun">{</span></code></li><li class="L7"><code class="language-go"><span class="pln">   fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">v</span><span class="pun">)</span></code></li><li class="L8"><code class="language-go"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L9"><code class="language-go"><span class="pln">  fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"Exit!"</span><span class="pun">)</span></code></li><li class="L0"><code class="language-go"><span class="pln"> </span><span class="com">/*</span></code></li><li class="L1"><code class="language-go"><span class="com">   首先主线程在迭代处等待，子线程输出了GO GO GO!!!，然后往channel中放入true，主线程跌打处输出channel信息，</span></code></li><li class="L2"><code class="language-go"><span class="com">    此时主线程并没有退出，一直等待关闭channel</span></code></li><li class="L3"><code class="language-go"><span class="com">  */</span></code></li><li class="L4"><code class="language-go"><span class="pun">}</span></code></li></ol></pre></div><div><div><span style="line-height: 24.2667px;">go锁（和Qt一样）</span></div><div><span style="line-height: 24.2667px;">互斥锁</span></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-go"><span class="kwd">var</span><span class="pln"> mutex sync</span><span class="pun">.</span><span class="typ">Mutex</span></code></li><li class="L1"><code class="language-go"><span class="pln">mutex</span><span class="pun">.</span><span class="typ">Lock</span><span class="pun">()</span></code></li></ol></pre></div></div><div><span style="line-height: 24.2667px;">读写锁</span></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-go"><span class="kwd">var</span><span class="pln"> rwMutex sync</span><span class="pun">.</span><span class="typ">RWMutex</span></code></li><li class="L1"><code class="language-go"><span class="pln">rwMutex</span><span class="pun">.</span><span class="typ">Lock</span><span class="pun">()</span></code></li><li class="L2"><code class="language-go"><span class="pln">rwMutex</span><span class="pun">.</span><span class="typ">Unlock</span><span class="pun">()</span></code></li></ol></pre></div><div><br></div></div></div></div></div></div><div style="line-height: 24.2667px;"><br></div><h2 style="line-height: 24.2667px;">Golang Web</h2></div><div style="line-height: 24.2667px;"><b>以类型形式</b></div><div style="line-height: 24.2667px;"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-go"><span class="com">// http</span></code></li><li class="L1"><code class="language-go"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L2"><code class="language-go"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-go"><span class="pln"> </span><span class="str">"net/http"</span></code></li><li class="L4"><code class="language-go"><span class="pun">)</span></code></li><li class="L5"><code class="language-go"><span class="pln">type </span><span class="typ">SingleHost</span><span class="pln"> </span><span class="kwd">struct</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-go"><span class="pln"> handler   http</span><span class="pun">.</span><span class="typ">Handler</span></code></li><li class="L7"><code class="language-go"><span class="pln">  allowhost </span><span class="kwd">string</span></code></li><li class="L8"><code class="language-go"><span class="pun">}</span></code></li><li class="L9"><code class="language-go"><span class="pln">func </span><span class="pun">(</span><span class="kwd">this</span><span class="pln"> </span><span class="pun">*</span><span class="typ">SingleHost</span><span class="pun">)</span><span class="pln"> </span><span class="typ">ServeHTTP</span><span class="pun">(</span><span class="pln">w http</span><span class="pun">.</span><span class="typ">ResponseWriter</span><span class="pun">,</span><span class="pln"> r </span><span class="pun">*</span><span class="pln">http</span><span class="pun">.</span><span class="typ">Request</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-go"><span class="pln">  println</span><span class="pun">(</span><span class="pln">r</span><span class="pun">.</span><span class="typ">Host</span><span class="pun">)</span></code></li><li class="L1"><code class="language-go"><span class="pln">  </span><span class="kwd">if</span><span class="pln"> r</span><span class="pun">.</span><span class="typ">Host</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">allowhost </span><span class="pun">{</span></code></li><li class="L2"><code class="language-go"><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">handler</span><span class="pun">.</span><span class="typ">ServeHTTP</span><span class="pun">(</span><span class="pln">w</span><span class="pun">,</span><span class="pln"> r</span><span class="pun">)</span></code></li><li class="L3"><code class="language-go"><span class="pln">  </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-go"><span class="pln">   w</span><span class="pun">.</span><span class="typ">WriteHeader</span><span class="pun">(</span><span class="lit">403</span><span class="pun">)</span></code></li><li class="L5"><code class="language-go"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L6"><code class="language-go"><span class="pun">}</span></code></li><li class="L7"><code class="language-go"><span class="pln">func myHandler</span><span class="pun">(</span><span class="pln">w http</span><span class="pun">.</span><span class="typ">ResponseWriter</span><span class="pun">,</span><span class="pln"> r </span><span class="pun">*</span><span class="pln">http</span><span class="pun">.</span><span class="typ">Request</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-go"><span class="pln">  w</span><span class="pun">.</span><span class="typ">Write</span><span class="pun">([]</span><span class="kwd">byte</span><span class="pun">(</span><span class="str">"hello world"</span><span class="pun">))</span></code></li><li class="L9"><code class="language-go"><span class="pun">}</span></code></li><li class="L0"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-go"><span class="pln">  single </span><span class="pun">:=</span><span class="pln"> </span><span class="pun">&amp;</span><span class="typ">SingleHost</span><span class="pun">{</span></code></li><li class="L2"><code class="language-go"><span class="pln">   handler</span><span class="pun">:</span><span class="pln">   http</span><span class="pun">.</span><span class="typ">HandlerFunc</span><span class="pun">(</span><span class="pln">myHandler</span><span class="pun">),</span></code></li><li class="L3"><code class="language-go"><span class="pln">    allowhost</span><span class="pun">:</span><span class="pln"> </span><span class="str">"localhost:8080"</span><span class="pun">,</span></code></li><li class="L4"><code class="language-go"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L5"><code class="language-go"><span class="pln">  http</span><span class="pun">.</span><span class="typ">ListenAndServe</span><span class="pun">(</span><span class="str">":8080"</span><span class="pun">,</span><span class="pln"> single</span><span class="pun">)</span></code></li><li class="L6"><code class="language-go"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN" style="font-family: 黑体;"><b>以函数形式</b></span></w:sdt></span></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN" style="font-family: 黑体;"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-go"><span class="com">// http</span></code></li><li class="L1"><code class="language-go"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L2"><code class="language-go"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-go"><span class="pln">  </span><span class="str">"net/http"</span></code></li><li class="L4"><code class="language-go"><span class="pun">)</span></code></li><li class="L5"><code class="language-go"><span class="pln">func </span><span class="typ">SingleHost</span><span class="pun">(</span><span class="pln">handler http</span><span class="pun">.</span><span class="typ">Handler</span><span class="pun">,</span><span class="pln"> allowhost </span><span class="kwd">string</span><span class="pun">)</span><span class="pln"> http</span><span class="pun">.</span><span class="typ">Handler</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-go"><span class="pln">  fn </span><span class="pun">:=</span><span class="pln"> func</span><span class="pun">(</span><span class="pln">w http</span><span class="pun">.</span><span class="typ">ResponseWriter</span><span class="pun">,</span><span class="pln"> r </span><span class="pun">*</span><span class="pln">http</span><span class="pun">.</span><span class="typ">Request</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-go"><span class="pln">   println</span><span class="pun">(</span><span class="pln">r</span><span class="pun">.</span><span class="typ">Host</span><span class="pun">)</span></code></li><li class="L8"><code class="language-go"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> r</span><span class="pun">.</span><span class="typ">Host</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> allowhost </span><span class="pun">{</span></code></li><li class="L9"><code class="language-go"><span class="pln">      handler</span><span class="pun">.</span><span class="typ">ServeHTTP</span><span class="pun">(</span><span class="pln">w</span><span class="pun">,</span><span class="pln"> r</span><span class="pun">)</span></code></li><li class="L0"><code class="language-go"><span class="pln">    </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-go"><span class="pln">     w</span><span class="pun">.</span><span class="typ">WriteHeader</span><span class="pun">(</span><span class="lit">403</span><span class="pun">)</span></code></li><li class="L2"><code class="language-go"><span class="pln">   </span><span class="pun">}</span></code></li><li class="L3"><code class="language-go"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L4"><code class="language-go"><span class="pln">  </span><span class="kwd">return</span><span class="pln"> http</span><span class="pun">.</span><span class="typ">HandlerFunc</span><span class="pun">(</span><span class="pln">fn</span><span class="pun">)</span></code></li><li class="L5"><code class="language-go"><span class="pun">}</span></code></li><li class="L6"><code class="language-go"><span class="pln">func myHandler</span><span class="pun">(</span><span class="pln">w http</span><span class="pun">.</span><span class="typ">ResponseWriter</span><span class="pun">,</span><span class="pln"> r </span><span class="pun">*</span><span class="pln">http</span><span class="pun">.</span><span class="typ">Request</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-go"><span class="pln">  w</span><span class="pun">.</span><span class="typ">Write</span><span class="pun">([]</span><span class="kwd">byte</span><span class="pun">(</span><span class="str">"hello world"</span><span class="pun">))</span></code></li><li class="L8"><code class="language-go"><span class="pun">}</span></code></li><li class="L9"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-go"><span class="pln">  single </span><span class="pun">:=</span><span class="pln"> </span><span class="typ">SingleHost</span><span class="pun">(</span><span class="pln">http</span><span class="pun">.</span><span class="typ">HandlerFunc</span><span class="pun">(</span><span class="pln">myHandler</span><span class="pun">),</span><span class="pln"> </span><span class="str">"localhost:8080"</span><span class="pun">)</span></code></li><li class="L1"><code class="language-go"><span class="pln">  http</span><span class="pun">.</span><span class="typ">ListenAndServe</span><span class="pun">(</span><span class="str">":8080"</span><span class="pun">,</span><span class="pln"> single</span><span class="pun">)</span></code></li><li class="L2"><code class="language-go"><span class="pun">}</span></code></li></ol></pre></div></span></w:sdt></span></div><div style="line-height: 24.2667px;"><font face="黑体"><br></font></div><div style="line-height: 24.2667px;"><font face="黑体"><b>对Handler自定义</b></font></div><div style="line-height: 24.2667px;"><font face="黑体"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-go"><span class="com">// http</span></code></li><li class="L1"><code class="language-go"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L2"><code class="language-go"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-go"><span class="pln">  </span><span class="str">"net/http"</span></code></li><li class="L4"><code class="language-go"><span class="pln"> </span><span class="str">"net/http/httptest"</span></code></li><li class="L5"><code class="language-go"><span class="pun">)</span></code></li><li class="L6"><code class="language-go"><span class="pln">type </span><span class="typ">ModifierMiddleware</span><span class="pln"> </span><span class="kwd">struct</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-go"><span class="pln">  handler http</span><span class="pun">.</span><span class="typ">Handler</span></code></li><li class="L8"><code class="language-go"><span class="pun">}</span></code></li><li class="L9"><code class="language-go"><span class="pln">func </span><span class="pun">(</span><span class="kwd">this</span><span class="pln"> </span><span class="pun">*</span><span class="typ">ModifierMiddleware</span><span class="pun">)</span><span class="pln"> </span><span class="typ">ServeHTTP</span><span class="pun">(</span><span class="pln">w http</span><span class="pun">.</span><span class="typ">ResponseWriter</span><span class="pun">,</span><span class="pln"> r </span><span class="pun">*</span><span class="pln">http</span><span class="pun">.</span><span class="typ">Request</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-go"><span class="pln"> </span><span class="com">//自定义Handler ，自定义返回Header和内容</span></code></li><li class="L1"><code class="language-go"><span class="pln"> rec </span><span class="pun">:=</span><span class="pln"> httptest</span><span class="pun">.</span><span class="typ">NewRecorder</span><span class="pun">()</span></code></li><li class="L2"><code class="language-go"><span class="pln">  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">handler</span><span class="pun">.</span><span class="typ">ServeHTTP</span><span class="pun">(</span><span class="pln">rec</span><span class="pun">,</span><span class="pln"> r</span><span class="pun">)</span></code></li><li class="L3"><code class="language-go"><span class="pln">  </span><span class="kwd">for</span><span class="pln"> k</span><span class="pun">,</span><span class="pln"> v </span><span class="pun">:=</span><span class="pln"> range rec</span><span class="pun">.</span><span class="typ">Header</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-go"><span class="pln">   w</span><span class="pun">.</span><span class="typ">Header</span><span class="pun">()[</span><span class="pln">k</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> v</span></code></li><li class="L5"><code class="language-go"><span class="pln"> </span><span class="pun">}</span></code></li><li class="L6"><code class="language-go"><span class="pln">  w</span><span class="pun">.</span><span class="typ">Header</span><span class="pun">().</span><span class="typ">Set</span><span class="pun">(</span><span class="str">"go-web-foundation"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"vip"</span><span class="pun">)</span></code></li><li class="L7"><code class="language-go"><span class="pln">  w</span><span class="pun">.</span><span class="typ">WriteHeader</span><span class="pun">(</span><span class="lit">418</span><span class="pun">)</span></code></li><li class="L8"><code class="language-go"><span class="pln"> w</span><span class="pun">.</span><span class="typ">Write</span><span class="pun">([]</span><span class="kwd">byte</span><span class="pun">(</span><span class="str">"hey,this is middleware!"</span><span class="pun">))</span></code></li><li class="L9"><code class="language-go"><span class="pln"> w</span><span class="pun">.</span><span class="typ">Write</span><span class="pun">(</span><span class="pln">rec</span><span class="pun">.</span><span class="typ">Body</span><span class="pun">.</span><span class="typ">Bytes</span><span class="pun">())</span></code></li><li class="L0"><code class="language-go"><span class="pun">}</span></code></li><li class="L1"><code class="language-go"><span class="pln">func myHandler</span><span class="pun">(</span><span class="pln">w http</span><span class="pun">.</span><span class="typ">ResponseWriter</span><span class="pun">,</span><span class="pln"> r </span><span class="pun">*</span><span class="pln">http</span><span class="pun">.</span><span class="typ">Request</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-go"><span class="pln">  w</span><span class="pun">.</span><span class="typ">Write</span><span class="pun">([]</span><span class="kwd">byte</span><span class="pun">(</span><span class="str">"hello world"</span><span class="pun">))</span></code></li><li class="L3"><code class="language-go"><span class="pun">}</span></code></li><li class="L4"><code class="language-go"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-go"><span class="pln">  single </span><span class="pun">:=</span><span class="pln"> </span><span class="pun">&amp;</span><span class="typ">ModifierMiddleware</span><span class="pun">{</span></code></li><li class="L6"><code class="language-go"><span class="pln">   handler</span><span class="pun">:</span><span class="pln"> http</span><span class="pun">.</span><span class="typ">HandlerFunc</span><span class="pun">(</span><span class="pln">myHandler</span><span class="pun">),</span></code></li><li class="L7"><code class="language-go"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L8"><code class="language-go"><span class="pln">  http</span><span class="pun">.</span><span class="typ">ListenAndServe</span><span class="pun">(</span><span class="str">":8080"</span><span class="pun">,</span><span class="pln"> single</span><span class="pun">)</span></code></li><li class="L9"><code class="language-go"><span class="pun">}</span></code></li></ol></pre></div></font></div></div></div><div><span lang="EN-GB"><br></span></div><h1 style="line-height: 70.4px;"><span style="font-size: 36px;"><font color="#9d45b8"><span data-wiz-span="data-wiz-span" style="font-size: 3.2rem;">三 &nbsp;In Container</span></font></span></h1><div><span lang="EN-GB"><div><br class="Apple-interchange-newline"><br></div><div><div style="border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>Docker</h2></div><div style="line-height: 24.2667px;"><h3>Docker基础</h3><p>Docker子命令简单分类：</p><p></p><div class="wiz-table-container" style="position: relative; padding: 15px 0px 5px;"><div class="wiz-table-body"><table style="width: 804px;"><tbody><tr><td align="left" valign="middle" class="" style="width: 167px;">子命令分类</td><td align="left" valign="middle" class="" style="width: 636px;">子命令</td></tr><tr><td align="left" valign="middle" class="" style="width: 167px;">Docker环境信息</td><td align="left" valign="middle" class="" style="width: 636px;">info、version</td></tr><tr><td align="left" valign="middle" class="" style="width: 167px;">容器生命周期管理</td><td align="left" valign="middle" class="" style="width: 636px;">create、exec、kill、pause、restart、rm、run、start、stop、unpause</td></tr><tr><td align="left" valign="middle" class="" style="width: 167px;">镜像仓库命令</td><td align="left" valign="middle" class="" style="width: 636px;">login、logout、pull、push、search</td></tr><tr><td align="left" valign="middle" class="" style="width: 167px;">镜像管理</td><td align="left" valign="middle" class="" style="width: 636px;">build、images、import、load、rmi、save、tag、commit</td></tr><tr><td align="left" valign="middle" class="" style="width: 167px;">容器运维操作</td><td align="left" valign="middle" class="" style="width: 636px;">attach、export、inspect、port、ps、rename、stats、top、wait、cp、diff、update</td></tr><tr><td align="left" valign="middle" class="" style="width: 167px;">容器资源管理</td><td align="left" valign="middle" class="" style="width: 636px;">volume、network</td></tr><tr><td align="left" valign="middle" class="" style="width: 167px;">系统日志管理</td><td align="left" valign="middle" class="" style="width: 636px;">events、history、logs</td></tr></tbody></table></div></div></div></div><div style="line-height: 24.2667px;"><div>比较有意思的几个命令：</div><div><span style="line-height: 1.6;">（1）容器从生到死整个生命周期</span></div><div><span style="line-height: 1.6;"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># docker create --name web31 training/webapp python app.py  #创建名字为 web31 的容器</span></code></li><li class="L1"><code class="language-c"><span class="lit">7465f4cb7c49555af32929bd1bc4213f5e72643c0116450e495b71c7ec128502</span></code></li><li class="L2"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># docker inspect --format='{{.State.Status}}' web31 #其状态为 created</span></code></li><li class="L3"><code class="language-c"><span class="pln">created</span></code></li><li class="L4"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># docker start web31 #启动容器</span></code></li><li class="L5"><code class="language-c"><span class="pln">web31</span></code></li><li class="L6"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># docker inspect --format='{{.State.Status}}' web31 #其状态为 running</span></code></li><li class="L7"><code class="language-c"><span class="pln">running</span></code></li><li class="L8"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># docker pause web31 #暂停容器</span></code></li><li class="L9"><code class="language-c"><span class="pln">web31</span></code></li><li class="L0"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># docker inspect --format='{{.State.Status}}' web31</span></code></li><li class="L1"><code class="language-c"><span class="pln">paused</span></code></li><li class="L2"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># docker unpause web31 #继续容器</span></code></li><li class="L3"><code class="language-c"><span class="pln">web31</span></code></li><li class="L4"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># docker inspect --format='{{.State.Status}}' web31</span></code></li><li class="L5"><code class="language-c"><span class="pln">running</span></code></li><li class="L6"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># docker rename web31 newweb31 #重命名</span></code></li><li class="L7"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># docker inspect --format='{{.State.Status}}' newweb31</span></code></li><li class="L8"><code class="language-c"><span class="pln">running</span></code></li><li class="L9"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># docker top newweb31 #在容器中运行 top 命令</span></code></li><li class="L0"><code class="language-c"><span class="pln">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span></code></li><li class="L1"><code class="language-c"><span class="pln">root                </span><span class="lit">5009</span><span class="pln">                </span><span class="lit">4979</span><span class="pln">                </span><span class="lit">0</span><span class="pln">                   </span><span class="lit">16</span><span class="pun">:</span><span class="lit">28</span><span class="pln">               </span><span class="pun">?</span><span class="pln">                   </span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pln">            python app</span><span class="pun">.</span><span class="pln">py</span></code></li><li class="L2"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># docker logs newweb31 #获取容器的日志</span></code></li><li class="L3"><code class="language-c"><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="typ">Running</span><span class="pln"> on http</span><span class="pun">:</span><span class="com">//0.0.0.0:5000/ (Press CTRL+C to quit)</span></code></li><li class="L4"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># docker stop newweb31 #停止容器</span></code></li><li class="L5"><code class="language-c"><span class="pln">newweb31</span></code></li><li class="L6"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># docker inspect --format='{{.State.Status}}' newweb31</span></code></li><li class="L7"><code class="language-c"><span class="pln">exited</span></code></li><li class="L8"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># docker rm newweb31 #删除容器</span></code></li><li class="L9"><code class="language-c"><span class="pln">newweb31</span></code></li><li class="L0"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># docker inspect --format='{{.State.Status}}' newweb31</span></code></li><li class="L1"><code class="language-c"><span class="typ">Error</span><span class="pun">:</span><span class="pln"> </span><span class="typ">No</span><span class="pln"> such image</span><span class="pun">,</span><span class="pln"> container or task</span><span class="pun">:</span><span class="pln"> newweb31</span></code></li></ol></pre></div><div><div>（2）docker stop 和 docker kill</div><div>docker stop 命令执行的时候，会先向容器中PID为1的进程发送系统信号 SIGTERM，然后等待容器中的应用程序终止执行，如果等待时间达到设定的超时时间（默认为 10秒，用户可以指定特定超时时长），会继续发送SIGKILL的系统信号强行kill掉进程。在容器中的应用程序，可以选择忽略和不处理SIGTERM信号，不过一旦达到超时时间，程序就会被系统强行kill掉，因为SIGKILL信号是直接发往系统内核的，应用程序没有机会去处理它。</div></div><div>docker kill 命令会直接发出SIGKILL的系统信号，以强行终止容器中程序的运行。<br></div><div>3）使用 docker cp 在 host 和 container 之间拷贝文件或者目录<br></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># docker cp /home/sammy/mydockerbuild/Dockerfile web5:/webapp #从 host 拷贝文件到 container 里面</span></code></li><li class="L1"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com">#</span></code></li><li class="L2"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># docker cp web5:/webapp/Dockerfile /home/sammy/Dockerfile #从 container 里面拷贝文件到 host 上</span></code></li><li class="L3"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># ls /home/sammy</span></code></li><li class="L4"><code class="language-c"><span class="pln">chroot  devstack  </span><span class="typ">Dockerfile</span><span class="pln">  mongodbdocker  mydockerbuild  webapp</span></code></li></ol></pre></div><div><div>（4）可以使用 docker rm $(docker ps -q -a) 一次性删除所有的容器，docker rmi $(docker images -q) 一次性删除所有的镜像。<br></div><div>（5）docker export+import和docker save+load区别：</div></div></div><div><div><font color="#ff0000"><b>save只能对image用，产生的文件需要用load来生成image；export的对象是container，产生的文件需要用import来生成image。</b></font><br></div><div><div>Export命令用于持久化容器（不是镜像）</div><div>Save命令用于持久化镜像（不是容器）</div></div></div><div><div>二者区别：</div><div>导出（Export）后再导入（Import）(exported-imported)的镜像会丢失所有的历史，而保存（Save）后再加载（Load）（saveed-loaded）的镜像没有丢失历史和层(layer)。这意味着使用导出后再导入的方式，你将无法回滚到之前的层(layer)，同时，使用<span style="line-height: 1.6;">保存（Save）后再加载（Load）</span><span style="line-height: 1.6;">的方式持久化整个镜像，就可以做到层回滚（可以执行docker tag &lt;LAYER ID&gt; &lt;IMAGE NAME&gt;来回滚之前的层）。</span></div></div><div><span style="line-height: 1.6;"><br></span></div><div><span style="line-height: 1.6;"><div>镜像(image)是动态的容器的静态表示（specification），包括容器所要运行的应用代码以及运行时的配置。Docker 镜像包括一个或者多个只读层（ read-only layers ），因此，镜像一旦被创建就再也不能被修改了。一个运行着的Docker 容器是一个镜像的实例（ instantiation ）。从同一个镜像中运行的容器包含有相同的应用代码和运行时依赖。但是不像镜像是静态的，每个运行着的容器都有一个可写层（ writable layer ，也成为容器层 container layer），它位于底下的若干只读层之上。运行时的所有变化，包括对数据和文件的写和更新，都会保存在这个层中。因此，从同一个镜像运行的多个容器包含了不同的容器层。</div><div>&nbsp;Docker 有两种方式来创建一个容器镜像：</div><div><ul style="margin-bottom: 0px;"><li><span style="line-height: 1.6;">创建一个容器，运行若干命令，再使用 docker commit 来生成一个新的镜像。不建议使用这种方案。</span></li><li><span style="line-height: 1.6;">创建一个 Dockerfile 然后再使用 docker build 来创建一个镜像。大多人会使用 Dockerfile 来创建镜像。</span></li></ul><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="pun">/</span><span class="pln">ntponubuntu</span><span class="com"># docker commit -a 'Lynzabo' -m 'Lynzabo nginx' commit_test lynzabo/commit_test</span></code></li><li class="L1"><code class="language-c"><span class="pun">使用</span><span class="pln"> docker history </span><span class="pun">命令查看该镜像中每一层的信息</span></code></li><li class="L2"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="pun">/</span><span class="pln">ntponubuntu</span><span class="com"># docker history af678df648bc</span></code></li><li class="L3"><code class="language-c"><span class="pln">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</span></code></li><li class="L4"><code class="language-c"><span class="pln">af678df648bc        </span><span class="lit">16</span><span class="pln"> hours ago        </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">sh </span><span class="pun">-</span><span class="pln">c </span><span class="com">#(nop)  CMD ["/usr/sbin/ntpd"]       0 B</span></code></li><li class="L5"><code class="language-c"><span class="pln">f5c96137bec9        </span><span class="lit">16</span><span class="pln"> hours ago        </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">sh </span><span class="pun">-</span><span class="pln">c </span><span class="com">#(nop)  EXPOSE 5555/tcp              0 B</span></code></li><li class="L6"><code class="language-c"><span class="lit">9cc05cf6f48d</span><span class="pln">        </span><span class="lit">16</span><span class="pln"> hours ago        </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">sh </span><span class="pun">-</span><span class="pln">c apt</span><span class="pun">-</span><span class="pln">get </span><span class="pun">-</span><span class="pln">y install ntp               </span><span class="lit">2.679</span><span class="pln"> MB</span></code></li><li class="L7"><code class="language-c"><span class="lit">694a19d54103</span><span class="pln">        </span><span class="lit">16</span><span class="pln"> hours ago        </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">sh </span><span class="pun">-</span><span class="pln">c apt</span><span class="pun">-</span><span class="pln">get update                       </span><span class="lit">22.17</span><span class="pln"> MB</span></code></li><li class="L8"><code class="language-c"><span class="pln">c4299e3f774c        </span><span class="lit">17</span><span class="pln"> hours ago        </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">sh </span><span class="pun">-</span><span class="pln">c </span><span class="com">#(nop)  MAINTAINER sammy "sammy@sa   0 B</span></code></li><li class="L9"><code class="language-c"><span class="lit">4a725d3b3b1c</span><span class="pln">        </span><span class="lit">3</span><span class="pln"> weeks ago         </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">sh </span><span class="pun">-</span><span class="pln">c </span><span class="com">#(nop) CMD ["/bin/bash"]             0 B</span></code></li><li class="L0"><code class="language-c"><span class="str">&lt;missing&gt;</span><span class="pln">           </span><span class="lit">3</span><span class="pln"> weeks ago         </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">sh </span><span class="pun">-</span><span class="pln">c mkdir </span><span class="pun">-</span><span class="pln">p </span><span class="pun">/</span><span class="pln">run</span><span class="pun">/</span><span class="pln">systemd </span><span class="pun">&amp;&amp;</span><span class="pln"> echo </span><span class="str">'</span><span class="pln">doc   </span><span class="lit">7</span><span class="pln"> B</span></code></li><li class="L1"><code class="language-c"><span class="str">&lt;missing&gt;</span><span class="pln">           </span><span class="lit">3</span><span class="pln"> weeks ago         </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">sh </span><span class="pun">-</span><span class="pln">c sed </span><span class="pun">-</span><span class="pln">i </span><span class="str">'</span><span class="pln">s</span><span class="pun">/^#</span><span class="pln">\s</span><span class="pun">*</span><span class="pln">\(deb</span><span class="pun">.*</span><span class="pln">universe\)$</span><span class="pun">/</span><span class="pln">   </span><span class="lit">1.895</span><span class="pln"> kB</span></code></li><li class="L2"><code class="language-c"><span class="str">&lt;missing&gt;</span><span class="pln">           </span><span class="lit">3</span><span class="pln"> weeks ago         </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">sh </span><span class="pun">-</span><span class="pln">c rm </span><span class="pun">-</span><span class="pln">rf </span><span class="pun">/</span><span class="pln">var</span><span class="pun">/</span><span class="pln">lib</span><span class="pun">/</span><span class="pln">apt</span><span class="pun">/</span><span class="pln">lists</span><span class="com">/*          0 B</span></code></li><li class="L3"><code class="language-c"><span class="com">&lt;missing&gt;           3 weeks ago         /bin/sh -c set -xe   &amp;&amp; echo '#!/bin/sh' &gt; /u   194.6 kB</span></code></li><li class="L4"><code class="language-c"><span class="com">&lt;missing&gt;           3 weeks ago         /bin/sh -c #(nop) ADD file:ada91758a31d8de3c7   187.8 MB</span></code></li></ol></pre></div><div><br></div></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">docker build </span><span class="pun">-</span><span class="pln">t ubuntu</span><span class="pun">/</span><span class="pln">dockerfile</span><span class="pun">-</span><span class="pln">user</span><span class="pun">-</span><span class="lit">1000</span><span class="pln"> </span><span class="pun">.</span></code></li></ol></pre></div><div>CMD和ENTRYPOINT：在容器被创建后执行的命令（启动容器时执行的命令），和 RUN 不同，它是在构造容器时候所执行的命令。<br></div></div><div><div>CMD和ENTRYPOINT区别：</div><div><div>这两个指令都指定了运行容器时所运行的命令。以下是它们共存的一些规则：</div><div><ul style="margin-bottom: 0px;"><li><span style="line-height: 1.6;">一个Dockerfile里只能有一个CMD，如果有多个，只有最后一个生效。</span></li><li><span style="line-height: 1.6;">CMD 可以用来指定 ENTRYPOINT 指令的参数</span></li></ul></div></div></div></span></div><div><div>同时有 CMD 和 ENTRYPOINT</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">FROM ubuntu</span><span class="pun">:</span><span class="lit">14.04</span></code></li><li class="L1"><code class="language-c"><span class="pln">MAINTAINER </span><span class="typ">Sammy</span><span class="pln"> </span><span class="typ">Liu</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">sammy</span><span class="pun">.</span><span class="pln">liu@unknow</span><span class="pun">.</span><span class="pln">com</span><span class="pun">&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">CMD top</span></code></li><li class="L3"><code class="language-c"><span class="pln">ENTRYPOINT ps</span></code></li></ol></pre></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">此时会运行的指令为</span><span class="pln"> </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">sh </span><span class="pun">-</span><span class="pln">c ps </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">sh </span><span class="pun">-</span><span class="pln">c top</span></code></li></ol></pre></div><div>CMD 作为 ENTRYPOINT 的参数<br></div></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">FROM ubuntu</span><span class="pun">:</span><span class="lit">14.04</span></code></li><li class="L1"><code class="language-c"><span class="pln">MAINTAINER </span><span class="typ">Sammy</span><span class="pln"> </span><span class="typ">Liu</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">sammy</span><span class="pun">.</span><span class="pln">liu@unknow</span><span class="pun">.</span><span class="pln">com</span><span class="pun">&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">CMD </span><span class="pun">[</span><span class="str">"-n"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"10"</span><span class="pun">]</span></code></li><li class="L3"><code class="language-c"><span class="pln">ENTRYPOINT top</span></code></li></ol></pre></div><div>启动容器后运行的命令为 /bin/sh -c top -n 10。<br></div></div><div><br></div><div><div>Dockerfile的EXPOSE或者--expose只是为其他命令提供所需信息的元数据，或者只是告诉容器操作人员有哪些已知选择。它只是作为记录机制，也就是告诉用户哪些端口会提供服务。它保存在容器的元数据中。</div><div>使用 -p 发布特定端口。如果该端口已经被 exposed，则发布它；如果它还没有被 exposed，则它会被 exposed 和 published。Docker 不会检查容器端口的正确性。-p 16060:8080</div><div>使用 -P 时 Docker 会自动将所有已经被 exposed 的端口映射到主机随机端口。</div></div><div><br></div><h3>namespace</h3><div><div>Docker容器本质上是宿主机上的进程。Docker通过namespace实现了资源隔离，通过cgroups实现了资源限制，通过写时复制机制（copy-on-write）实现了高效的文件操作。</div></div><div>namespace包括6种namespace支持：Mount namespace、UTS namespace、IPC namespace、PID namespace、Network namespace、docker 1.10支持了User namespace。</div><div>可以在/proc/[pid]/ns目录下，看到当前进程的6大namespace。</div><div><ul><li>UTS namespace，提供了主机名和域名的隔离，使得容器拥有独立的主机名和域名，在网络上可视作一个独立的节点。</li><li>IPC namespace，设计常见的信号量、消息队列和共享内存。同一个IPC namespace下的进程彼此可见，不同IPC namespace下的进程则互相不可见。</li><li>PID namespace隔离是对进程PID重新标号，即两个不同namespace下的进程可以有相同的PID。每个PID namespace中的第一个进程“PID 1”，都会像传统Linux中的init进程一样拥有特权，起特殊作用。</li></ul></div><div><div>我们能看到同一个进程，在容器内外的 PID 是不同的：</div><div><ul><li>在容器内 PID 是 1，PPID 是 0。</li><li>在容器外 PID 是 10817， PPID 是 10809 即 docker-containerd-shim 进程。</li></ul></div></div><div>关于 containerd，containerd-shim 和 container 的关系，如下图说明（后面详讲）：<br></div><div><div><img border="0" src="All in_files/39397654.png"></div></div><div><div><ul style="margin-bottom: 0px;"><li><span style="line-height: 1.6;">Docker Engine管理着镜像，然后移交给 containerd 运行，containerd 再使用 runC 运行容器。</span></li><li><span style="line-height: 1.6;">Containerd 是一个简单的守护进程，它可以使用 runC 管理容器，使用 gRPC 暴露容器的其他功能。它管理容器的开始，停止，暂停和销毁。由于容器运行时是孤立的引擎，引擎最终能够启动和升级而无需重新启动容器。</span></li><li><span style="line-height: 1.6;">runC是一个轻量级的工具，它是用来运行容器的，只用来做这一件事，并且这一件事要做好。runC基本上是一个小命令行工具且它可以不用通过Docker引擎，直接就可以使用容器。</span></li></ul></div><div><br></div><div><div>因此，容器中的主应用在 host 上的父进程是 containerd-shim，是它通过工具 runC 来启动这些进程的。</div><div>这也能看出来，pid namespace 通过将 host 上 PID（不是PPID哈） 映射为容器内的 PID， 使得容器内的进程看起来有个独立的 PID 空间。</div></div></div><div><ul><li>mount namespace通过隔离文件系统挂载点对隔离文件系统提供支持，不同mount namespace中的文件结构发生变化也互不影响。<br></li><li>network namespace主要提供了关于网络资源的隔离，包括网络设备、IPv4和IPv6协议栈、IP路由表、防火墙、/proc/net目录，/sys/class/net目录、套接字（socket）等。<br></li></ul></div><div>容器里通过veth设备对实现不同网络命名空间间通信。</div></div><div><br></div><div>默认情况下，当 docker 实例被创建出来后，使用 ip netns &nbsp;命令无法看到容器实例对应的 network namespace。这是因为 ip netns 命令是从 /var/run/netns 文件夹中读取内容的。<br></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">步骤：</span></code></li><li class="L1"><code class="language-c"><span class="lit">1.</span><span class="pun">找到容器的主进程</span><span class="pln"> ID</span></code></li><li class="L2"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># docker inspect --format '{{.State.Pid}}' web5</span></code></li><li class="L3"><code class="language-c"><span class="lit">2704</span></code></li><li class="L4"><code class="language-c"><span class="lit">2.</span><span class="pun">创建/</span><span class="pln">var</span><span class="pun">/</span><span class="pln">run</span><span class="pun">/</span><span class="pln">netns </span><span class="pun">目录以及符号连接</span></code></li><li class="L5"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># mkdir /var/run/netns</span></code></li><li class="L6"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># ln -s /proc/2704/ns/net /var/run/netns/web5</span></code></li><li class="L7"><code class="language-c"><span class="lit">3.</span><span class="pun">此时可以使用</span><span class="pln"> ip netns </span><span class="pun">命令了</span></code></li><li class="L8"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># ip netns</span></code></li><li class="L9"><code class="language-c"><span class="pln">web5</span></code></li><li class="L0"><code class="language-c"><span class="pln">root@devstack</span><span class="pun">:/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">sammy</span><span class="com"># ip netns exec web5 ip addr</span></code></li><li class="L1"><code class="language-c"><span class="lit">1</span><span class="pun">:</span><span class="pln"> lo</span><span class="pun">:</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">LOOPBACK</span><span class="pun">,</span><span class="pln">UP</span><span class="pun">,</span><span class="pln">LOWER_UP</span><span class="pun">&gt;</span><span class="pln"> mtu </span><span class="lit">65536</span><span class="pln"> qdisc noqueue state UNKNOWN group </span><span class="kwd">default</span></code></li><li class="L2"><code class="language-c"><span class="pln">  link</span><span class="pun">/</span><span class="pln">loopback </span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pln"> brd </span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span></code></li><li class="L3"><code class="language-c"><span class="pln">  inet </span><span class="lit">127.0</span><span class="pun">.</span><span class="lit">0.1</span><span class="pun">/</span><span class="lit">8</span><span class="pln"> scope host lo</span></code></li><li class="L4"><code class="language-c"><span class="pln">  valid_lft forever preferred_lft forever</span></code></li><li class="L5"><code class="language-c"><span class="pln">  inet6 </span><span class="pun">::</span><span class="lit">1</span><span class="pun">/</span><span class="lit">128</span><span class="pln"> scope host</span></code></li><li class="L6"><code class="language-c"><span class="pln">  valid_lft forever preferred_lft forever</span></code></li><li class="L7"><code class="language-c"><span class="lit">15</span><span class="pun">:</span><span class="pln"> eth0</span><span class="pun">:</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">BROADCAST</span><span class="pun">,</span><span class="pln">MULTICAST</span><span class="pun">,</span><span class="pln">UP</span><span class="pun">,</span><span class="pln">LOWER_UP</span><span class="pun">&gt;</span><span class="pln"> mtu </span><span class="lit">1500</span><span class="pln"> qdisc noqueue state UP group </span><span class="kwd">default</span></code></li><li class="L8"><code class="language-c"><span class="pln">  link</span><span class="pun">/</span><span class="pln">ether </span><span class="lit">02</span><span class="pun">:</span><span class="lit">42</span><span class="pun">:</span><span class="pln">ac</span><span class="pun">:</span><span class="lit">11</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">03</span><span class="pln"> brd ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span></code></li><li class="L9"><code class="language-c"><span class="pln">  inet </span><span class="lit">172.17</span><span class="pun">.</span><span class="lit">0.3</span><span class="pun">/</span><span class="lit">16</span><span class="pln"> scope global eth0</span></code></li><li class="L0"><code class="language-c"><span class="pln">  valid_lft forever preferred_lft forever</span></code></li><li class="L1"><code class="language-c"><span class="pln">  inet6 fe80</span><span class="pun">::</span><span class="lit">42</span><span class="pun">:</span><span class="pln">acff</span><span class="pun">:</span><span class="pln">fe11</span><span class="pun">:</span><span class="lit">3</span><span class="pun">/</span><span class="lit">64</span><span class="pln"> scope link</span></code></li><li class="L2"><code class="language-c"><span class="pln">  valid_lft forever preferred_lft forever</span></code></li></ol></pre></div><div><ul><li>user namespace主要隔离了安全相关的标识符（identifier）和属性（attribute），包括用户ID、用户组ID、root目录、key（指密钥）以及特殊权限。<br></li></ul></div></div><div><div>一个普通用户的进程通过clone()创建的新进程在新user namespace中可以拥有不同的用户和用户组。这意味着一个进程在容器外属于一个没有特权的普通用户，但是它创建的容器进程却属于所有权限的超级用户。</div></div><div><div><br></div><div>在 Docker 1.10 版本之前，Docker 是不支持 user namespace。也就是说，默认地，容器内的进程的运行用户就是 host 上的 root 用户，这样的话，当 host 上的文件或者目录作为 volume 被映射到容器以后，容器内的进程其实是有 root 的几乎所有权限去修改这些 host 上的目录的，这会有很大的安全问题。</div><div>举例：</div><div>启动一个容器：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">docker run </span><span class="pun">-</span><span class="pln">d </span><span class="pun">-</span><span class="pln">v </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">:/</span><span class="pln">host</span><span class="pun">/</span><span class="pln">bin </span><span class="pun">--</span><span class="pln">name web34 training</span><span class="pun">/</span><span class="pln">webapp python app</span><span class="pun">.</span><span class="pln">py</span></code></li></ol></pre></div></div><div>此时进程的用户在容器内和外都是root，它在容器内可以对 host 上的 /bin 目录做任意修改。</div></div><div><br></div><div>Docker在1.10版本中对user namespace进行了支持。只要用户在启动Docker daemon的时候指定了--userns-remap，那么当用户运行容器时，容器内部的root用户并不等于宿主机内的root用户，而是映射到宿主机上的普通用户。<br></div><div><br></div><h3>cgroups</h3><div></div><div>cgroups的实现本质上是给任务挂上钩子，当任务运行的过程中涉及某种资源时，就会触发钩子上所附带的子系统进行检测，根据资源类别的不同，使用对应的技术进行资源限制和优先级分配你。<br></div><div>Linux中cgroup的实现形式表现为一个文件系统，因此需要mount这个文件系统才能够使用（也有可能已经mount好了），挂载成功后，就能看到各类子系统。<br></div><div>在/sys/fs/cgroup路径。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> mount </span><span class="pun">-</span><span class="pln">t cgroup</span></code></li><li class="L1"><code class="language-c"><span class="pln">cgroup on </span><span class="pun">/</span><span class="pln">sys</span><span class="pun">/</span><span class="pln">fs</span><span class="pun">/</span><span class="pln">cgroup</span><span class="pun">/</span><span class="pln">systemd type cgroup </span><span class="pun">(</span><span class="pln">rw</span><span class="pun">,</span><span class="pln">nosuid</span><span class="pun">,</span><span class="pln">nodev</span><span class="pun">,</span><span class="pln">noexec</span><span class="pun">,</span><span class="pln">relatime</span><span class="pun">,</span><span class="pln">xattr</span><span class="pun">,</span><span class="pln">release_agent</span><span class="pun">=/</span><span class="pln">usr</span><span class="pun">/</span><span class="pln">lib</span><span class="pun">/</span><span class="pln">systemd</span><span class="pun">/</span><span class="pln">systemd</span><span class="pun">-</span><span class="pln">cgroups</span><span class="pun">-</span><span class="pln">agent</span><span class="pun">,</span><span class="pln">name</span><span class="pun">=</span><span class="pln">systemd</span><span class="pun">)</span></code></li><li class="L2"><code class="language-c"><span class="pln">cgroup on </span><span class="pun">/</span><span class="pln">sys</span><span class="pun">/</span><span class="pln">fs</span><span class="pun">/</span><span class="pln">cgroup</span><span class="pun">/</span><span class="pln">devices type cgroup </span><span class="pun">(</span><span class="pln">rw</span><span class="pun">,</span><span class="pln">nosuid</span><span class="pun">,</span><span class="pln">nodev</span><span class="pun">,</span><span class="pln">noexec</span><span class="pun">,</span><span class="pln">relatime</span><span class="pun">,</span><span class="pln">devices</span><span class="pun">)</span></code></li><li class="L3"><code class="language-c"><span class="pln">cgroup on </span><span class="pun">/</span><span class="pln">sys</span><span class="pun">/</span><span class="pln">fs</span><span class="pun">/</span><span class="pln">cgroup</span><span class="pun">/</span><span class="pln">cpu</span><span class="pun">,</span><span class="pln">cpuacct type cgroup </span><span class="pun">(</span><span class="pln">rw</span><span class="pun">,</span><span class="pln">nosuid</span><span class="pun">,</span><span class="pln">nodev</span><span class="pun">,</span><span class="pln">noexec</span><span class="pun">,</span><span class="pln">relatime</span><span class="pun">,</span><span class="pln">cpuacct</span><span class="pun">,</span><span class="pln">cpu</span><span class="pun">)</span></code></li><li class="L4"><code class="language-c"><span class="pln">cgroup on </span><span class="pun">/</span><span class="pln">sys</span><span class="pun">/</span><span class="pln">fs</span><span class="pun">/</span><span class="pln">cgroup</span><span class="pun">/</span><span class="pln">net_cls</span><span class="pun">,</span><span class="pln">net_prio type cgroup </span><span class="pun">(</span><span class="pln">rw</span><span class="pun">,</span><span class="pln">nosuid</span><span class="pun">,</span><span class="pln">nodev</span><span class="pun">,</span><span class="pln">noexec</span><span class="pun">,</span><span class="pln">relatime</span><span class="pun">,</span><span class="pln">net_prio</span><span class="pun">,</span><span class="pln">net_cls</span><span class="pun">)</span></code></li><li class="L5"><code class="language-c"><span class="pln">cgroup on </span><span class="pun">/</span><span class="pln">sys</span><span class="pun">/</span><span class="pln">fs</span><span class="pun">/</span><span class="pln">cgroup</span><span class="pun">/</span><span class="pln">cpuset type cgroup </span><span class="pun">(</span><span class="pln">rw</span><span class="pun">,</span><span class="pln">nosuid</span><span class="pun">,</span><span class="pln">nodev</span><span class="pun">,</span><span class="pln">noexec</span><span class="pun">,</span><span class="pln">relatime</span><span class="pun">,</span><span class="pln">cpuset</span><span class="pun">)</span></code></li><li class="L6"><code class="language-c"><span class="pln">cgroup on </span><span class="pun">/</span><span class="pln">sys</span><span class="pun">/</span><span class="pln">fs</span><span class="pun">/</span><span class="pln">cgroup</span><span class="pun">/</span><span class="pln">perf_event type cgroup </span><span class="pun">(</span><span class="pln">rw</span><span class="pun">,</span><span class="pln">nosuid</span><span class="pun">,</span><span class="pln">nodev</span><span class="pun">,</span><span class="pln">noexec</span><span class="pun">,</span><span class="pln">relatime</span><span class="pun">,</span><span class="pln">perf_event</span><span class="pun">)</span></code></li><li class="L7"><code class="language-c"><span class="pln">cgroup on </span><span class="pun">/</span><span class="pln">sys</span><span class="pun">/</span><span class="pln">fs</span><span class="pun">/</span><span class="pln">cgroup</span><span class="pun">/</span><span class="pln">freezer type cgroup </span><span class="pun">(</span><span class="pln">rw</span><span class="pun">,</span><span class="pln">nosuid</span><span class="pun">,</span><span class="pln">nodev</span><span class="pun">,</span><span class="pln">noexec</span><span class="pun">,</span><span class="pln">relatime</span><span class="pun">,</span><span class="pln">freezer</span><span class="pun">)</span></code></li><li class="L8"><code class="language-c"><span class="pln">cgroup on </span><span class="pun">/</span><span class="pln">sys</span><span class="pun">/</span><span class="pln">fs</span><span class="pun">/</span><span class="pln">cgroup</span><span class="pun">/</span><span class="pln">memory type cgroup </span><span class="pun">(</span><span class="pln">rw</span><span class="pun">,</span><span class="pln">nosuid</span><span class="pun">,</span><span class="pln">nodev</span><span class="pun">,</span><span class="pln">noexec</span><span class="pun">,</span><span class="pln">relatime</span><span class="pun">,</span><span class="pln">memory</span><span class="pun">)</span></code></li><li class="L9"><code class="language-c"><span class="pln">cgroup on </span><span class="pun">/</span><span class="pln">sys</span><span class="pun">/</span><span class="pln">fs</span><span class="pun">/</span><span class="pln">cgroup</span><span class="pun">/</span><span class="pln">hugetlb type cgroup </span><span class="pun">(</span><span class="pln">rw</span><span class="pun">,</span><span class="pln">nosuid</span><span class="pun">,</span><span class="pln">nodev</span><span class="pun">,</span><span class="pln">noexec</span><span class="pun">,</span><span class="pln">relatime</span><span class="pun">,</span><span class="pln">hugetlb</span><span class="pun">)</span></code></li><li class="L0"><code class="language-c"><span class="pln">cgroup on </span><span class="pun">/</span><span class="pln">sys</span><span class="pun">/</span><span class="pln">fs</span><span class="pun">/</span><span class="pln">cgroup</span><span class="pun">/</span><span class="pln">pids type cgroup </span><span class="pun">(</span><span class="pln">rw</span><span class="pun">,</span><span class="pln">nosuid</span><span class="pun">,</span><span class="pln">nodev</span><span class="pun">,</span><span class="pln">noexec</span><span class="pun">,</span><span class="pln">relatime</span><span class="pun">,</span><span class="pln">pids</span><span class="pun">)</span></code></li><li class="L1"><code class="language-c"><span class="pln">cgroup on </span><span class="pun">/</span><span class="pln">sys</span><span class="pun">/</span><span class="pln">fs</span><span class="pun">/</span><span class="pln">cgroup</span><span class="pun">/</span><span class="pln">blkio type cgroup </span><span class="pun">(</span><span class="pln">rw</span><span class="pun">,</span><span class="pln">nosuid</span><span class="pun">,</span><span class="pln">nodev</span><span class="pun">,</span><span class="pln">noexec</span><span class="pun">,</span><span class="pln">relatime</span><span class="pun">,</span><span class="pln">blkio</span><span class="pun">)</span></code></li><li class="L2"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span></code></li></ol></pre></div><div><br></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost cgroup</span><span class="pun">]#</span><span class="pln"> ls </span><span class="pun">/</span><span class="pln">sys</span><span class="pun">/</span><span class="pln">fs</span><span class="pun">/</span><span class="pln">cgroup</span><span class="pun">/</span><span class="pln"> </span><span class="pun">-</span><span class="pln">l</span></code></li><li class="L1"><code class="language-c"><span class="pln">total </span><span class="lit">0</span></code></li><li class="L2"><code class="language-c"><span class="pln">drwxr</span><span class="pun">-</span><span class="pln">xr</span><span class="pun">-</span><span class="pln">x</span><span class="pun">.</span><span class="pln"> </span><span class="lit">5</span><span class="pln"> root root  </span><span class="lit">0</span><span class="pln"> </span><span class="typ">Jun</span><span class="pln">  </span><span class="lit">8</span><span class="pln"> </span><span class="lit">02</span><span class="pun">:</span><span class="lit">26</span><span class="pln"> blkio</span></code></li><li class="L3"><code class="language-c"><span class="pln">lrwxrwxrwx</span><span class="pun">.</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> root root </span><span class="lit">11</span><span class="pln"> </span><span class="typ">Jun</span><span class="pln">  </span><span class="lit">8</span><span class="pln"> </span><span class="lit">02</span><span class="pun">:</span><span class="lit">26</span><span class="pln"> cpu </span><span class="pun">-&gt;</span><span class="pln"> cpu</span><span class="pun">,</span><span class="pln">cpuacct</span></code></li><li class="L4"><code class="language-c"><span class="pln">lrwxrwxrwx</span><span class="pun">.</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> root root </span><span class="lit">11</span><span class="pln"> </span><span class="typ">Jun</span><span class="pln">  </span><span class="lit">8</span><span class="pln"> </span><span class="lit">02</span><span class="pun">:</span><span class="lit">26</span><span class="pln"> cpuacct </span><span class="pun">-&gt;</span><span class="pln"> cpu</span><span class="pun">,</span><span class="pln">cpuacct</span></code></li><li class="L5"><code class="language-c"><span class="pln">drwxr</span><span class="pun">-</span><span class="pln">xr</span><span class="pun">-</span><span class="pln">x</span><span class="pun">.</span><span class="pln"> </span><span class="lit">6</span><span class="pln"> root root  </span><span class="lit">0</span><span class="pln"> </span><span class="typ">Jun</span><span class="pln">  </span><span class="lit">8</span><span class="pln"> </span><span class="lit">02</span><span class="pun">:</span><span class="lit">26</span><span class="pln"> cpu</span><span class="pun">,</span><span class="pln">cpuacct</span></code></li><li class="L6"><code class="language-c"><span class="pln">drwxr</span><span class="pun">-</span><span class="pln">xr</span><span class="pun">-</span><span class="pln">x</span><span class="pun">.</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> root root  </span><span class="lit">0</span><span class="pln"> </span><span class="typ">Jun</span><span class="pln">  </span><span class="lit">8</span><span class="pln"> </span><span class="lit">02</span><span class="pun">:</span><span class="lit">26</span><span class="pln"> cpuset</span></code></li><li class="L7"><code class="language-c"><span class="pln">drwxr</span><span class="pun">-</span><span class="pln">xr</span><span class="pun">-</span><span class="pln">x</span><span class="pun">.</span><span class="pln"> </span><span class="lit">5</span><span class="pln"> root root  </span><span class="lit">0</span><span class="pln"> </span><span class="typ">Jun</span><span class="pln">  </span><span class="lit">8</span><span class="pln"> </span><span class="lit">02</span><span class="pun">:</span><span class="lit">26</span><span class="pln"> devices</span></code></li><li class="L8"><code class="language-c"><span class="pln">drwxr</span><span class="pun">-</span><span class="pln">xr</span><span class="pun">-</span><span class="pln">x</span><span class="pun">.</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> root root  </span><span class="lit">0</span><span class="pln"> </span><span class="typ">Jun</span><span class="pln">  </span><span class="lit">8</span><span class="pln"> </span><span class="lit">02</span><span class="pun">:</span><span class="lit">26</span><span class="pln"> freezer</span></code></li><li class="L9"><code class="language-c"><span class="pln">drwxr</span><span class="pun">-</span><span class="pln">xr</span><span class="pun">-</span><span class="pln">x</span><span class="pun">.</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> root root  </span><span class="lit">0</span><span class="pln"> </span><span class="typ">Jun</span><span class="pln">  </span><span class="lit">8</span><span class="pln"> </span><span class="lit">02</span><span class="pun">:</span><span class="lit">26</span><span class="pln"> hugetlb</span></code></li><li class="L0"><code class="language-c"><span class="pln">drwxr</span><span class="pun">-</span><span class="pln">xr</span><span class="pun">-</span><span class="pln">x</span><span class="pun">.</span><span class="pln"> </span><span class="lit">5</span><span class="pln"> root root  </span><span class="lit">0</span><span class="pln"> </span><span class="typ">Jun</span><span class="pln">  </span><span class="lit">8</span><span class="pln"> </span><span class="lit">02</span><span class="pun">:</span><span class="lit">26</span><span class="pln"> memory</span></code></li><li class="L1"><code class="language-c"><span class="pln">lrwxrwxrwx</span><span class="pun">.</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> root root </span><span class="lit">16</span><span class="pln"> </span><span class="typ">Jun</span><span class="pln">  </span><span class="lit">8</span><span class="pln"> </span><span class="lit">02</span><span class="pun">:</span><span class="lit">26</span><span class="pln"> net_cls </span><span class="pun">-&gt;</span><span class="pln"> net_cls</span><span class="pun">,</span><span class="pln">net_prio</span></code></li><li class="L2"><code class="language-c"><span class="pln">drwxr</span><span class="pun">-</span><span class="pln">xr</span><span class="pun">-</span><span class="pln">x</span><span class="pun">.</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> root root  </span><span class="lit">0</span><span class="pln"> </span><span class="typ">Jun</span><span class="pln">  </span><span class="lit">8</span><span class="pln"> </span><span class="lit">02</span><span class="pun">:</span><span class="lit">26</span><span class="pln"> net_cls</span><span class="pun">,</span><span class="pln">net_prio</span></code></li><li class="L3"><code class="language-c"><span class="pln">lrwxrwxrwx</span><span class="pun">.</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> root root </span><span class="lit">16</span><span class="pln"> </span><span class="typ">Jun</span><span class="pln">  </span><span class="lit">8</span><span class="pln"> </span><span class="lit">02</span><span class="pun">:</span><span class="lit">26</span><span class="pln"> net_prio </span><span class="pun">-&gt;</span><span class="pln"> net_cls</span><span class="pun">,</span><span class="pln">net_prio</span></code></li><li class="L4"><code class="language-c"><span class="pln">drwxr</span><span class="pun">-</span><span class="pln">xr</span><span class="pun">-</span><span class="pln">x</span><span class="pun">.</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> root root  </span><span class="lit">0</span><span class="pln"> </span><span class="typ">Jun</span><span class="pln">  </span><span class="lit">8</span><span class="pln"> </span><span class="lit">02</span><span class="pun">:</span><span class="lit">26</span><span class="pln"> perf_event</span></code></li><li class="L5"><code class="language-c"><span class="pln">drwxr</span><span class="pun">-</span><span class="pln">xr</span><span class="pun">-</span><span class="pln">x</span><span class="pun">.</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> root root  </span><span class="lit">0</span><span class="pln"> </span><span class="typ">Jun</span><span class="pln">  </span><span class="lit">8</span><span class="pln"> </span><span class="lit">02</span><span class="pun">:</span><span class="lit">26</span><span class="pln"> pids</span></code></li><li class="L6"><code class="language-c"><span class="pln">drwxr</span><span class="pun">-</span><span class="pln">xr</span><span class="pun">-</span><span class="pln">x</span><span class="pun">.</span><span class="pln"> </span><span class="lit">5</span><span class="pln"> root root  </span><span class="lit">0</span><span class="pln"> </span><span class="typ">Jun</span><span class="pln">  </span><span class="lit">8</span><span class="pln"> </span><span class="lit">02</span><span class="pun">:</span><span class="lit">26</span><span class="pln"> systemd</span></code></li><li class="L7"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost cgroup</span><span class="pun">]#</span></code></li></ol></pre></div><div>如在/sys/fs/cgroup的cpu子目录下创建控制组，控制组目录创建成后，它下面自动回有如下文件了。</div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost cpu</span><span class="pun">]#</span><span class="pln"> ls</span></code></li><li class="L1"><code class="language-c"><span class="pln">cgroup</span><span class="pun">.</span><span class="pln">clone_children  cpuacct</span><span class="pun">.</span><span class="pln">stat          cpu</span><span class="pun">.</span><span class="pln">cfs_quota_us   cpu</span><span class="pun">.</span><span class="pln">stat</span></code></li><li class="L2"><code class="language-c"><span class="pln">cgroup</span><span class="pun">.</span><span class="pln">event_control   cpuacct</span><span class="pun">.</span><span class="pln">usage         cpu</span><span class="pun">.</span><span class="pln">rt_period_us   notify_on_release</span></code></li><li class="L3"><code class="language-c"><span class="pln">cgroup</span><span class="pun">.</span><span class="pln">procs           cpuacct</span><span class="pun">.</span><span class="pln">usage_percpu  cpu</span><span class="pun">.</span><span class="pln">rt_runtime_us  release_agent</span></code></li><li class="L4"><code class="language-c"><span class="pln">cgroup</span><span class="pun">.</span><span class="pln">sane_behavior   cpu</span><span class="pun">.</span><span class="pln">cfs_period_us     cpu</span><span class="pun">.</span><span class="pln">shares         tasks</span></code></li><li class="L5"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost cpu</span><span class="pun">]#</span><span class="pln"> mkdir cg1</span></code></li><li class="L6"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost cpu</span><span class="pun">]#</span><span class="pln"> ls cg1</span></code></li><li class="L7"><code class="language-c"><span class="pln">cgroup</span><span class="pun">.</span><span class="pln">clone_children  cpuacct</span><span class="pun">.</span><span class="pln">stat          cpu</span><span class="pun">.</span><span class="pln">cfs_period_us  cpu</span><span class="pun">.</span><span class="pln">rt_runtime_us  notify_on_release</span></code></li><li class="L8"><code class="language-c"><span class="pln">cgroup</span><span class="pun">.</span><span class="pln">event_control   cpuacct</span><span class="pun">.</span><span class="pln">usage         cpu</span><span class="pun">.</span><span class="pln">cfs_quota_us   cpu</span><span class="pun">.</span><span class="pln">shares         tasks</span></code></li><li class="L9"><code class="language-c"><span class="pln">cgroup</span><span class="pun">.</span><span class="pln">procs           cpuacct</span><span class="pun">.</span><span class="pln">usage_percpu  cpu</span><span class="pun">.</span><span class="pln">rt_period_us   cpu</span><span class="pun">.</span><span class="pln">stat</span></code></li><li class="L0"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost cpu</span><span class="pun">]#</span></code></li></ol></pre></div><div><div>下面展示了如何限制PID为11292的进程的CPU使用配额：</div><div>hello.c</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="typ">int</span><span class="pln"> main</span><span class="pun">(</span><span class="kwd">void</span><span class="pun">)</span></code></li><li class="L1"><code class="language-c"><span class="pun">{</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="typ">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="kwd">for</span><span class="pun">(;;)</span><span class="pln"> i</span><span class="pun">++;</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span></code></li><li class="L5"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div></div><div>编译并运行：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost kernel_test</span><span class="pun">]#</span><span class="pln"> vim hello</span><span class="pun">.</span><span class="pln">c</span></code></li><li class="L1"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost kernel_test</span><span class="pun">]#</span><span class="pln"> gcc hello</span><span class="pun">.</span><span class="pln">c </span><span class="pun">-</span><span class="pln">o hello </span><span class="pun">&amp;&amp;</span><span class="pln"> </span><span class="pun">./</span><span class="pln">hello </span><span class="pun">&amp;</span></code></li><li class="L2"><code class="language-c"><span class="pun">[</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="lit">11286</span></code></li><li class="L3"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost kernel_test</span><span class="pun">]#</span><span class="pln"> ps </span><span class="pun">-</span><span class="pln">ef</span><span class="pun">|</span><span class="pln">grep hello</span></code></li><li class="L4"><code class="language-c"><span class="pln">root     </span><span class="lit">11292</span><span class="pln"> </span><span class="lit">11286</span><span class="pln"> </span><span class="lit">99</span><span class="pln"> </span><span class="lit">02</span><span class="pun">:</span><span class="lit">39</span><span class="pln"> pts</span><span class="pun">/</span><span class="lit">0</span><span class="pln">    </span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">08</span><span class="pln"> </span><span class="pun">./</span><span class="pln">hello</span></code></li><li class="L5"><code class="language-c"><span class="pln">root     </span><span class="lit">11294</span><span class="pln"> </span><span class="lit">11202</span><span class="pln">  </span><span class="lit">0</span><span class="pln"> </span><span class="lit">02</span><span class="pun">:</span><span class="lit">39</span><span class="pln"> pts</span><span class="pun">/</span><span class="lit">0</span><span class="pln">    </span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pln"> grep </span><span class="pun">--</span><span class="pln">color</span><span class="pun">=</span><span class="kwd">auto</span><span class="pln"> hello</span></code></li><li class="L6"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost kernel_test</span><span class="pun">]#</span></code></li></ol></pre></div></div><div>查看PID为11292该进程占用CPU，看到占用CPU一直是99%以上。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost kernel_test</span><span class="pun">]#</span><span class="pln"> top</span></code></li><li class="L1"><code class="language-c"><span class="pln">top </span><span class="pun">-</span><span class="pln"> </span><span class="lit">02</span><span class="pun">:</span><span class="lit">42</span><span class="pun">:</span><span class="lit">08</span><span class="pln"> up </span><span class="lit">15</span><span class="pln"> min</span><span class="pun">,</span><span class="pln">  </span><span class="lit">1</span><span class="pln"> user</span><span class="pun">,</span><span class="pln">  load average</span><span class="pun">:</span><span class="pln"> </span><span class="lit">0.96</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0.41</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0.19</span></code></li><li class="L2"><code class="language-c"><span class="typ">Tasks</span><span class="pun">:</span><span class="pln">  </span><span class="lit">87</span><span class="pln"> total</span><span class="pun">,</span><span class="pln">   </span><span class="lit">2</span><span class="pln"> running</span><span class="pun">,</span><span class="pln">  </span><span class="lit">85</span><span class="pln"> sleeping</span><span class="pun">,</span><span class="pln">   </span><span class="lit">0</span><span class="pln"> stopped</span><span class="pun">,</span><span class="pln">   </span><span class="lit">0</span><span class="pln"> zombie</span></code></li><li class="L3"><code class="language-c"><span class="pun">%</span><span class="typ">Cpu</span><span class="pun">(</span><span class="pln">s</span><span class="pun">):</span><span class="pln"> </span><span class="lit">99.5</span><span class="pln"> us</span><span class="pun">,</span><span class="pln">  </span><span class="lit">0.0</span><span class="pln"> sy</span><span class="pun">,</span><span class="pln">  </span><span class="lit">0.0</span><span class="pln"> ni</span><span class="pun">,</span><span class="pln">  </span><span class="lit">0.0</span><span class="pln"> id</span><span class="pun">,</span><span class="pln">  </span><span class="lit">0.0</span><span class="pln"> wa</span><span class="pun">,</span><span class="pln">  </span><span class="lit">0.0</span><span class="pln"> hi</span><span class="pun">,</span><span class="pln">  </span><span class="lit">0.5</span><span class="pln"> si</span><span class="pun">,</span><span class="pln">  </span><span class="lit">0.0</span><span class="pln"> st</span></code></li><li class="L4"><code class="language-c"><span class="typ">KiB</span><span class="pln"> </span><span class="typ">Mem</span><span class="pln"> </span><span class="pun">:</span><span class="pln">   </span><span class="lit">500380</span><span class="pln"> total</span><span class="pun">,</span><span class="pln">   </span><span class="lit">153324</span><span class="pln"> free</span><span class="pun">,</span><span class="pln">    </span><span class="lit">73464</span><span class="pln"> used</span><span class="pun">,</span><span class="pln">   </span><span class="lit">273592</span><span class="pln"> buff</span><span class="pun">/</span><span class="pln">cache</span></code></li><li class="L5"><code class="language-c"><span class="typ">KiB</span><span class="pln"> </span><span class="typ">Swap</span><span class="pun">:</span><span class="pln">  </span><span class="lit">1572860</span><span class="pln"> total</span><span class="pun">,</span><span class="pln">  </span><span class="lit">1572860</span><span class="pln"> free</span><span class="pun">,</span><span class="pln">        </span><span class="lit">0</span><span class="pln"> used</span><span class="pun">.</span><span class="pln">   </span><span class="lit">386328</span><span class="pln"> avail </span><span class="typ">Mem</span></code></li><li class="L6"><code class="language-c"><span class="pln">  PID USER      PR  NI    VIRT    RES    SHR S </span><span class="pun">%</span><span class="pln">CPU </span><span class="pun">%</span><span class="pln">MEM     TIME</span><span class="pun">+</span><span class="pln"> COMMAND</span></code></li><li class="L7"><code class="language-c"><span class="lit">11292</span><span class="pln"> root      </span><span class="lit">20</span><span class="pln">   </span><span class="lit">0</span><span class="pln">    </span><span class="lit">4156</span><span class="pln">    </span><span class="lit">340</span><span class="pln">    </span><span class="lit">272</span><span class="pln"> R </span><span class="lit">99.7</span><span class="pln">  </span><span class="lit">0.1</span><span class="pln">   </span><span class="lit">2</span><span class="pun">:</span><span class="lit">18.54</span><span class="pln"> hello</span></code></li><li class="L8"><code class="language-c"><span class="pln">  </span><span class="lit">388</span><span class="pln"> root      </span><span class="lit">20</span><span class="pln">   </span><span class="lit">0</span><span class="pln">       </span><span class="lit">0</span><span class="pln">      </span><span class="lit">0</span><span class="pln">      </span><span class="lit">0</span><span class="pln"> S  </span><span class="lit">0.3</span><span class="pln">  </span><span class="lit">0.0</span><span class="pln">   </span><span class="lit">0</span><span class="pun">:</span><span class="lit">00.14</span><span class="pln"> xfsaild</span><span class="pun">/</span><span class="pln">dm</span><span class="pun">-</span><span class="lit">0</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="lit">1</span><span class="pln"> root      </span><span class="lit">20</span><span class="pln">   </span><span class="lit">0</span><span class="pln">  </span><span class="lit">128100</span><span class="pln">   </span><span class="lit">6724</span><span class="pln">   </span><span class="lit">3968</span><span class="pln"> S  </span><span class="lit">0.0</span><span class="pln">  </span><span class="lit">1.3</span><span class="pln">   </span><span class="lit">0</span><span class="pun">:</span><span class="lit">00.97</span><span class="pln"> systemd</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="lit">2</span><span class="pln"> root      </span><span class="lit">20</span><span class="pln">   </span><span class="lit">0</span><span class="pln">       </span><span class="lit">0</span><span class="pln">      </span><span class="lit">0</span><span class="pln">      </span><span class="lit">0</span><span class="pln"> S  </span><span class="lit">0.0</span><span class="pln">  </span><span class="lit">0.0</span><span class="pln">   </span><span class="lit">0</span><span class="pun">:</span><span class="lit">00.00</span><span class="pln"> kthreadd</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="lit">3</span><span class="pln"> root      </span><span class="lit">20</span><span class="pln">   </span><span class="lit">0</span><span class="pln">       </span><span class="lit">0</span><span class="pln">      </span><span class="lit">0</span><span class="pln">      </span><span class="lit">0</span><span class="pln"> S  </span><span class="lit">0.0</span><span class="pln">  </span><span class="lit">0.0</span><span class="pln">   </span><span class="lit">0</span><span class="pun">:</span><span class="lit">00.03</span><span class="pln"> ksoftirqd</span><span class="pun">/</span><span class="lit">0</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="lit">6</span><span class="pln"> root      </span><span class="lit">20</span><span class="pln">   </span><span class="lit">0</span><span class="pln">       </span><span class="lit">0</span><span class="pln">      </span><span class="lit">0</span><span class="pln">      </span><span class="lit">0</span><span class="pln"> S  </span><span class="lit">0.0</span><span class="pln">  </span><span class="lit">0.0</span><span class="pln">   </span><span class="lit">0</span><span class="pun">:</span><span class="lit">00.03</span><span class="pln"> kworker</span><span class="pun">/</span><span class="pln">u2</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L3"><code class="language-c"><span class="pln">   </span><span class="lit">37</span><span class="pln"> root      </span><span class="lit">20</span><span class="pln">   </span><span class="lit">0</span><span class="pln">       </span><span class="lit">0</span><span class="pln">      </span><span class="lit">0</span><span class="pln">      </span><span class="lit">0</span><span class="pln"> S  </span><span class="lit">0.0</span><span class="pln">  </span><span class="lit">0.0</span><span class="pln">   </span><span class="lit">0</span><span class="pun">:</span><span class="lit">00.00</span><span class="pln"> kworker</span><span class="pun">/</span><span class="pln">u2</span><span class="pun">:</span><span class="lit">1</span></code></li></ol></pre></div></div><div>下面限制PID为11292这个进程的CPU</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost kernel_test</span><span class="pun">]#</span><span class="pln"> cd </span><span class="pun">/</span><span class="pln">sys</span><span class="pun">/</span><span class="pln">fs</span><span class="pun">/</span><span class="pln">cgroup</span><span class="pun">/</span><span class="pln">cpu</span><span class="pun">/</span><span class="pln">cg1</span><span class="pun">/</span></code></li><li class="L1"><code class="language-c"><span class="com"># 限制11292进程</span></code></li><li class="L2"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost cg1</span><span class="pun">]#</span><span class="pln"> echo </span><span class="lit">11292</span><span class="pln"> </span><span class="pun">&gt;&gt;</span><span class="pln"> </span><span class="pun">/</span><span class="pln">sys</span><span class="pun">/</span><span class="pln">fs</span><span class="pun">/</span><span class="pln">cgroup</span><span class="pun">/</span><span class="pln">cpu</span><span class="pun">/</span><span class="pln">cg1</span><span class="pun">/</span><span class="pln">tasks</span></code></li><li class="L3"><code class="language-c"><span class="com"># 将CPU限制为最高使用20%</span></code></li><li class="L4"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost cg1</span><span class="pun">]#</span><span class="pln"> echo </span><span class="lit">20000</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">/</span><span class="pln">sys</span><span class="pun">/</span><span class="pln">fs</span><span class="pun">/</span><span class="pln">cgroup</span><span class="pun">/</span><span class="pln">cpu</span><span class="pun">/</span><span class="pln">cg1</span><span class="pun">/</span><span class="pln">cpu</span><span class="pun">.</span><span class="pln">cfs_quota_us</span></code></li><li class="L5"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost cg1</span><span class="pun">]#</span></code></li></ol></pre></div></div><div>现在查看CPU占用,确实最多20%。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost cg1</span><span class="pun">]#</span><span class="pln"> top</span></code></li><li class="L1"><code class="language-c"><span class="pln">top </span><span class="pun">-</span><span class="pln"> </span><span class="lit">02</span><span class="pun">:</span><span class="lit">45</span><span class="pun">:</span><span class="lit">22</span><span class="pln"> up </span><span class="lit">19</span><span class="pln"> min</span><span class="pun">,</span><span class="pln">  </span><span class="lit">1</span><span class="pln"> user</span><span class="pun">,</span><span class="pln">  load average</span><span class="pun">:</span><span class="pln"> </span><span class="lit">0.50</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0.56</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0.30</span></code></li><li class="L2"><code class="language-c"><span class="typ">Tasks</span><span class="pun">:</span><span class="pln">  </span><span class="lit">88</span><span class="pln"> total</span><span class="pun">,</span><span class="pln">   </span><span class="lit">2</span><span class="pln"> running</span><span class="pun">,</span><span class="pln">  </span><span class="lit">86</span><span class="pln"> sleeping</span><span class="pun">,</span><span class="pln">   </span><span class="lit">0</span><span class="pln"> stopped</span><span class="pun">,</span><span class="pln">   </span><span class="lit">0</span><span class="pln"> zombie</span></code></li><li class="L3"><code class="language-c"><span class="pun">%</span><span class="typ">Cpu</span><span class="pun">(</span><span class="pln">s</span><span class="pun">):</span><span class="pln"> </span><span class="lit">14.3</span><span class="pln"> us</span><span class="pun">,</span><span class="pln">  </span><span class="lit">0.0</span><span class="pln"> sy</span><span class="pun">,</span><span class="pln">  </span><span class="lit">0.0</span><span class="pln"> ni</span><span class="pun">,</span><span class="pln"> </span><span class="lit">85.7</span><span class="pln"> id</span><span class="pun">,</span><span class="pln">  </span><span class="lit">0.0</span><span class="pln"> wa</span><span class="pun">,</span><span class="pln">  </span><span class="lit">0.0</span><span class="pln"> hi</span><span class="pun">,</span><span class="pln">  </span><span class="lit">0.0</span><span class="pln"> si</span><span class="pun">,</span><span class="pln">  </span><span class="lit">0.0</span><span class="pln"> st</span></code></li><li class="L4"><code class="language-c"><span class="typ">KiB</span><span class="pln"> </span><span class="typ">Mem</span><span class="pln"> </span><span class="pun">:</span><span class="pln">   </span><span class="lit">500380</span><span class="pln"> total</span><span class="pun">,</span><span class="pln">   </span><span class="lit">153204</span><span class="pln"> free</span><span class="pun">,</span><span class="pln">    </span><span class="lit">73584</span><span class="pln"> used</span><span class="pun">,</span><span class="pln">   </span><span class="lit">273592</span><span class="pln"> buff</span><span class="pun">/</span><span class="pln">cache</span></code></li><li class="L5"><code class="language-c"><span class="typ">KiB</span><span class="pln"> </span><span class="typ">Swap</span><span class="pun">:</span><span class="pln">  </span><span class="lit">1572860</span><span class="pln"> total</span><span class="pun">,</span><span class="pln">  </span><span class="lit">1572860</span><span class="pln"> free</span><span class="pun">,</span><span class="pln">        </span><span class="lit">0</span><span class="pln"> used</span><span class="pun">.</span><span class="pln">   </span><span class="lit">386208</span><span class="pln"> avail </span><span class="typ">Mem</span></code></li><li class="L6"><code class="language-c"><span class="pln">  PID USER      PR  NI    VIRT    RES    SHR S </span><span class="pun">%</span><span class="pln">CPU </span><span class="pun">%</span><span class="pln">MEM     TIME</span><span class="pun">+</span><span class="pln"> COMMAND</span></code></li><li class="L7"><code class="language-c"><span class="lit">11292</span><span class="pln"> root      </span><span class="lit">20</span><span class="pln">   </span><span class="lit">0</span><span class="pln">    </span><span class="lit">4156</span><span class="pln">    </span><span class="lit">340</span><span class="pln">    </span><span class="lit">272</span><span class="pln"> R </span><span class="lit">20.0</span><span class="pln">  </span><span class="lit">0.1</span><span class="pln">   </span><span class="lit">4</span><span class="pun">:</span><span class="lit">33.58</span><span class="pln"> hello</span></code></li><li class="L8"><code class="language-c"><span class="lit">11244</span><span class="pln"> root      </span><span class="lit">20</span><span class="pln">   </span><span class="lit">0</span><span class="pln">       </span><span class="lit">0</span><span class="pln">      </span><span class="lit">0</span><span class="pln">      </span><span class="lit">0</span><span class="pln"> S  </span><span class="lit">0.3</span><span class="pln">  </span><span class="lit">0.0</span><span class="pln">   </span><span class="lit">0</span><span class="pun">:</span><span class="lit">00.13</span><span class="pln"> kworker</span><span class="pun">/</span><span class="lit">0</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="lit">1</span><span class="pln"> root      </span><span class="lit">20</span><span class="pln">   </span><span class="lit">0</span><span class="pln">  </span><span class="lit">128100</span><span class="pln">   </span><span class="lit">6724</span><span class="pln">   </span><span class="lit">3968</span><span class="pln"> S  </span><span class="lit">0.0</span><span class="pln">  </span><span class="lit">1.3</span><span class="pln">   </span><span class="lit">0</span><span class="pun">:</span><span class="lit">00.97</span><span class="pln"> systemd</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="lit">2</span><span class="pln"> root      </span><span class="lit">20</span><span class="pln">   </span><span class="lit">0</span><span class="pln">       </span><span class="lit">0</span><span class="pln">      </span><span class="lit">0</span><span class="pln">      </span><span class="lit">0</span><span class="pln"> S  </span><span class="lit">0.0</span><span class="pln">  </span><span class="lit">0.0</span><span class="pln">   </span><span class="lit">0</span><span class="pun">:</span><span class="lit">00.00</span><span class="pln"> kthreadd</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="lit">3</span><span class="pln"> root      </span><span class="lit">20</span><span class="pln">   </span><span class="lit">0</span><span class="pln">       </span><span class="lit">0</span><span class="pln">      </span><span class="lit">0</span><span class="pln">      </span><span class="lit">0</span><span class="pln"> S  </span><span class="lit">0.0</span><span class="pln">  </span><span class="lit">0.0</span><span class="pln">   </span><span class="lit">0</span><span class="pun">:</span><span class="lit">00.03</span><span class="pln"> ksoftirqd</span><span class="pun">/</span><span class="lit">0</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="lit">6</span><span class="pln"> root      </span><span class="lit">20</span><span class="pln">   </span><span class="lit">0</span><span class="pln">       </span><span class="lit">0</span><span class="pln">      </span><span class="lit">0</span><span class="pln">      </span><span class="lit">0</span><span class="pln"> S  </span><span class="lit">0.0</span><span class="pln">  </span><span class="lit">0.0</span><span class="pln">   </span><span class="lit">0</span><span class="pun">:</span><span class="lit">00.03</span><span class="pln"> kworker</span><span class="pun">/</span><span class="pln">u2</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L3"><code class="language-c"><span class="pln">   </span><span class="lit">36</span><span class="pln"> root       </span><span class="lit">0</span><span class="pln"> </span><span class="pun">-</span><span class="lit">20</span><span class="pln">       </span><span class="lit">0</span><span class="pln">      </span><span class="lit">0</span><span class="pln">      </span><span class="lit">0</span><span class="pln"> S  </span><span class="lit">0.0</span><span class="pln">  </span><span class="lit">0.0</span><span class="pln">   </span><span class="lit">0</span><span class="pun">:</span><span class="lit">00.00</span><span class="pln"> kthrotld</span></code></li><li class="L4"><code class="language-c"><span class="pln">   </span><span class="lit">37</span><span class="pln"> root      </span><span class="lit">20</span><span class="pln">   </span><span class="lit">0</span><span class="pln">       </span><span class="lit">0</span><span class="pln">      </span><span class="lit">0</span><span class="pln">      </span><span class="lit">0</span><span class="pln"> S  </span><span class="lit">0.0</span><span class="pln">  </span><span class="lit">0.0</span><span class="pln">   </span><span class="lit">0</span><span class="pun">:</span><span class="lit">00.00</span><span class="pln"> kworker</span><span class="pun">/</span><span class="pln">u2</span><span class="pun">:</span><span class="lit">1</span></code></li></ol></pre></div><div><br></div></div></div></div><div>在Docker的实现中，Docker daemon会在单独挂载了每一个子系统的控制组目录（比如/sys/fs/cgroup/cpu）下创建一个名为docker的控制组，然后在docker控制组里面，再为每个容器创建一个以容器ID为名称的容器控制组，这个容器里的所有进程的进程号都会写到该控制组tasks中，并且在控制文件（比如cpu.cfs_quota_us）中写入预设的限制参数值。<br></div><div>如CPU控制组下docker控制组的层级结构如下：</div><div><div><img border="0" class="" src="All in_files/41294316.png"></div></div><div><div><img border="0" src="All in_files/41308437.png"></div></div><div>Docker 会将容器中的进程的 ID 加入到各个资源对应的 tasks 文件中。<br></div><div><br></div><h4>Docker支持的容器资源配额（重点,Lynzabo）</h4><h5>CPU</h5><div><ul><li>CPU份额控制：<br></li></ul></div><div><div>docker提供了–cpu-shares参数，在创建容器时指定容器所使用的CPU份额值。</div><div>cpu-shares的值不能保证可以获得1个cpu或者多少GHz的CPU资源，仅仅只是一个弹性的加权值。默认情况下，每个docker容器的cpu份额都是1024。单独一个容器的份额是没有意义的，只有在同时运行多个容器时，容器的cpu加权的效果才能体现出来。例如，两个容器A、B的cpu份额分别为1000和500，在cpu进行时间片分配的时候，容器A比容器B多一倍的机会获得CPU的时间片，但分配的结果取决于当时主机和其他容器的运行状态，实际上也无法保证容器A一定能获得CPU时间片。比如容器A的进程一直是空闲的，那么容器B是可以获取比容器A更多的CPU时间片的。极端情况下，比如说主机上只运行了一个容器，即使它的cpu份额只有50，它也可以独占整个主机的cpu资源。</div><div><br></div><div>cgroups只在容器分配的资源紧缺时，也就是说在需要对容器使用的资源进行限制时，才会生效。因此，无法单纯根据某个容器的cpu份额来确定有多少cpu资源分配给它，资源分配结果取决于同时运行的其他容器的cpu分配和容器中进程运行情况。</div></div><div><br></div><div><div>使用示例：</div><div>使用下面命令创建容器：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">docker run </span><span class="pun">-</span><span class="pln">tid </span><span class="pun">–</span><span class="pln">cpu</span><span class="pun">-</span><span class="pln">shares </span><span class="lit">100</span><span class="pln"> ubuntu</span><span class="pun">:</span><span class="pln">stress</span></code></li></ol></pre></div></div><div>则最终生成的cgroup的cpu份额配置可以下面的文件中找到：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">root@ubuntu</span><span class="pun">:~#</span><span class="pln"> cat </span><span class="pun">/</span><span class="pln">sys</span><span class="pun">/</span><span class="pln">fs</span><span class="pun">/</span><span class="pln">cgroup</span><span class="pun">/</span><span class="pln">cpu</span><span class="pun">/</span><span class="pln">docker</span><span class="pun">/&lt;容器的完整长</span><span class="pln">ID</span><span class="pun">&gt;/</span><span class="pln">cpu</span><span class="pun">.</span><span class="pln">shares</span></code></li><li class="L1"><code class="language-c"><span class="lit">100</span></code></li></ol></pre></div><div><div><ul><li>CPU周期控制<br></li></ul></div><div>docker提供了–cpu-period、–cpu-quota两个参数控制容器可以分配到的CPU时钟周期。–cpu-period是用来指定容器对CPU的使用要在多长时间内做一次重新分配，而–cpu-quota是用来指定在这个周期内，最多可以有多少时间用来跑这个容器。跟–cpu-shares不同的是这种配置是指定一个绝对值，而且没有弹性在里面，容器对CPU资源的使用绝对不会超过配置的值。</div><div>cpu-period和cpu-quota的单位为微秒（μs）。cpu-period的最小值为1000微秒，最大值为1秒（10^6 μs），默认值为0.1秒（100000 μs）。cpu-quota的值默认为-1，表示不做控制。</div><div>举个例子，如果容器进程需要每1秒使用单个CPU的0.2秒时间，可以将cpu-period设置为1000000（即1秒），cpu-quota设置为200000（0.2秒）。当然，在多核情况下，如果允许容器进程需要完全占用两个CPU，则可以将cpu-period设置为100000（即0.1秒），cpu-quota设置为200000（0.2秒）。</div><div>使用示例：</div><div>使用下面命令创建容器，</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">docker run </span><span class="pun">-</span><span class="pln">tid </span><span class="pun">–</span><span class="pln">cpu</span><span class="pun">-</span><span class="pln">period </span><span class="lit">100000</span><span class="pln"> </span><span class="pun">–</span><span class="pln">cpu</span><span class="pun">-</span><span class="pln">quota </span><span class="lit">200000</span><span class="pln"> ubuntu</span></code></li></ol></pre></div></div><div>则最终生成的cgroup的cpu周期配置可以下面的文件中找到：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">root@ubuntu</span><span class="pun">:~#</span><span class="pln"> cat </span><span class="pun">/</span><span class="pln">sys</span><span class="pun">/</span><span class="pln">fs</span><span class="pun">/</span><span class="pln">cgroup</span><span class="pun">/</span><span class="pln">cpu</span><span class="pun">/</span><span class="pln">docker</span><span class="pun">/&lt;容器的完整长</span><span class="pln">ID</span><span class="pun">&gt;/</span><span class="pln">cpu</span><span class="pun">.</span><span class="pln">cfs_period_us</span></code></li><li class="L1"><code class="language-c"><span class="lit">100000</span></code></li><li class="L2"><code class="language-c"><span class="pln">root@ubuntu</span><span class="pun">:~#</span><span class="pln"> cat </span><span class="pun">/</span><span class="pln">sys</span><span class="pun">/</span><span class="pln">fs</span><span class="pun">/</span><span class="pln">cgroup</span><span class="pun">/</span><span class="pln">cpu</span><span class="pun">/</span><span class="pln">docker</span><span class="pun">/&lt;容器的完整长</span><span class="pln">ID</span><span class="pun">&gt;/</span><span class="pln">cpu</span><span class="pun">.</span><span class="pln">cfs_quota_us</span></code></li><li class="L3"><code class="language-c"><span class="lit">200000</span></code></li></ol></pre></div></div><div><div><ul><li>CPU core控制<br></li></ul></div><div>对多核CPU的服务器，docker还可以控制容器运行限定使用哪些cpu内核和内存节点，即使用–cpuset-cpus和–cpuset-mems参数。如果服务器只有一个内存节点，则–cpuset-mems的配置基本上不会有明显效果。</div><div>使用示例：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">docker run </span><span class="pun">-</span><span class="pln">tid </span><span class="pun">–</span><span class="pln">name cpu1 </span><span class="pun">–</span><span class="pln">cpuset</span><span class="pun">-</span><span class="pln">cpus </span><span class="lit">0</span><span class="pun">-</span><span class="lit">2</span><span class="pln"> ubuntu</span></code></li></ol></pre></div></div><div>表示创建的容器只能用0、1、2这三个内核。最终生成的cgroup的cpu内核配置如下：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">root@ubuntu</span><span class="pun">:~#</span><span class="pln"> cat </span><span class="pun">/</span><span class="pln">sys</span><span class="pun">/</span><span class="pln">fs</span><span class="pun">/</span><span class="pln">cgroup</span><span class="pun">/</span><span class="pln">cpuset</span><span class="pun">/</span><span class="pln">docker</span><span class="pun">/&lt;容器的完整长</span><span class="pln">ID</span><span class="pun">&gt;/</span><span class="pln">cpuset</span><span class="pun">.</span><span class="pln">cpus</span></code></li><li class="L1"><code class="language-c"><span class="lit">0</span><span class="pun">-</span><span class="lit">2</span></code></li></ol></pre></div></div><div>通过</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">docker exec </span><span class="pun">&lt;容器</span><span class="pln">ID</span><span class="pun">&gt;</span><span class="pln"> taskset </span><span class="pun">-</span><span class="pln">c </span><span class="pun">-</span><span class="pln">p </span><span class="lit">1</span></code></li></ol></pre></div></div><div>(容器内部第一个进程编号一般为1)，可以看到容器中进程与CPU内核的绑定关系，可以认为达到了绑定CPU内核的目的。</div></div></div></div></div><div><div><br></div><div>上面可以混合着使用。</div><div><ul><li>cpu-shares控制只发生在容器竞争同一个内核的时间片时。</li><li>cpuset-cpus指定容器A使用内核0，容器B只使用内核1，在主机上只有这两个容器使用对应内核的情况，它们各自占用全部的内核资源。</li><li>cpu-period、cpu-quota这两个参数一般联合使用，在单核情况或者通过cpuset-cpus强制容器使用一个cpu内核的情况下，当cpu-quota超过cpu-period，也不会使容器使用更多的CPU资源。</li></ul></div><div><br></div><div>下面命令创建测试：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">docker run </span><span class="pun">-</span><span class="pln">tid </span><span class="pun">–</span><span class="pln">name cpu2 </span><span class="pun">–</span><span class="pln">cpuset</span><span class="pun">-</span><span class="pln">cpus </span><span class="lit">3</span><span class="pln"> </span><span class="pun">–</span><span class="pln">cpu</span><span class="pun">-</span><span class="pln">shares </span><span class="lit">512</span><span class="pln"> ubuntu</span><span class="pun">:</span><span class="pln">stress stress </span><span class="pun">-</span><span class="pln">c </span><span class="lit">10</span></code></li><li class="L1"><code class="language-c"><span class="pln">docker run </span><span class="pun">-</span><span class="pln">tid </span><span class="pun">–</span><span class="pln">name cpu3 </span><span class="pun">–</span><span class="pln">cpuset</span><span class="pun">-</span><span class="pln">cpus </span><span class="lit">3</span><span class="pln"> </span><span class="pun">–</span><span class="pln">cpu</span><span class="pun">-</span><span class="pln">shares </span><span class="lit">1024</span><span class="pln"> ubuntu</span><span class="pun">:</span><span class="pln">stress stress </span><span class="pun">-</span><span class="pln">c </span><span class="lit">10</span></code></li></ol></pre></div></div><div>上面的ubuntu:stress镜像安装了stress工具来测试CPU和内存的负载。两个容器的命令stress -c 10&amp;，这个命令将会给系统一个随机负载，产生10个进程，每个进程都反复不停的计算由rand()产生随机数的平方根，直到资源耗尽。</div><div>观察到宿主机上的CPU试用率如下图所示，第三个内核的使用率接近100%，并且一批进程的CPU使用率明显存在2:1的使用比例的对比：</div></div><div><div><img border="0" class="" src="All in_files/50090219.png"></div></div><div><div>容器cpu2的CPU使用如下所示：</div></div><div><div><div><img border="0" src="All in_files/50132443.png"></div></div><div>容器cpu3的CPU使用如下所示：</div></div><div><div><img border="0" src="All in_files/50141702.png"></div></div><h5>Memory</h5><div><div>docker也提供了若干参数来控制容器的内存使用配额，可以控制容器的swap大小、可用内存大小等各种内存方面的控制。主要有以下参数：</div><div><ul><li>–memory:设置容器使用的最大内存上限。默认单位为byte，可以使用K、G、M等带单位的字符串。</li><li>–memory-reservation：启用弹性的内存共享，当宿主机资源充足时，允许容器尽量多地使用内存，当检测到内存竞争或者低内存时，强制将容器的内存降低到memory-reservation所指定的内存大小。按照官方说法，不设置此选项时，有可能出现某些容器长时间占用大量内存，导致性能上的损失。</li><li>–memory-swap：等于内存和swap分区大小的总和，设置为-1时，表示swap分区的大小是无限的。默认单位为byte，可以使用K、G、M等带单位的字符串。</li></ul></div><div>默认情况下，容器可以使用主机上的所有空闲内存。</div><div>与CPU的cgroups配置类似，docker会自动为容器在目录/sys/fs/cgroup/memory/docker/&lt;容器的完整长ID&gt;中创建相应cgroup配置文件。</div></div><div><div>设置容器的内存上限，参考命令如下所示：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">docker run </span><span class="pun">-</span><span class="pln">tid </span><span class="pun">—</span><span class="pln">name mem1 </span><span class="pun">—</span><span class="pln">memory </span><span class="lit">128m</span><span class="pln"> ubuntu</span><span class="pun">:</span><span class="pln">stress </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">bash</span></code></li></ol></pre></div></div><div>默认情况下，除了–memory指定的内存大小以外，docker还为容器分配了同样大小的swap分区，也就是说，上面的命令创建出的容器实际上最多可以使用256MB内存，而不是128MB内存。如果需要自定义swap分区大小，则可以通过联合使用–memory–swap参数来实现控制。</div><div>对上面的命令创建的容器，可以查看到在cgroups的配置文件中，查看到容器的内存大小为128MB (128×1024×1024=134217728B)，内存和swap加起来大小为256MB (256×1024×1024=268435456B)。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">cat </span><span class="pun">/</span><span class="pln">sys</span><span class="pun">/</span><span class="pln">fs</span><span class="pun">/</span><span class="pln">cgroup</span><span class="pun">/</span><span class="pln">memory</span><span class="pun">/</span><span class="pln">docker</span><span class="pun">/&lt;容器的完整</span><span class="pln">ID</span><span class="pun">&gt;/</span><span class="pln">memory</span><span class="pun">.</span><span class="pln">limit_in_bytes</span></code></li><li class="L1"><code class="language-c"><span class="lit">134217728</span></code></li><li class="L2"><code class="language-c"><span class="pln">cat </span><span class="pun">/</span><span class="pln">sys</span><span class="pun">/</span><span class="pln">fs</span><span class="pun">/</span><span class="pln">cgroup</span><span class="pun">/</span><span class="pln">memory</span><span class="pun">/</span><span class="pln">docker</span><span class="pun">/&lt;容器的完整</span><span class="pln">ID</span><span class="pun">&gt;/</span><span class="pln">memory</span><span class="pun">.</span><span class="pln">memsw</span><span class="pun">.</span><span class="pln">limit_in_bytes</span></code></li><li class="L3"><code class="language-c"><span class="lit">268435456</span></code></li></ol></pre></div><div><br></div></div></div><h5>磁盘IO</h5><div><div>docker对磁盘IO的控制主要包括以下参数：</div><div><ul><li>–device-read-bps：限制此设备上的读速度（bytes per second），单位可以是kb、mb或者gb。</li><li>–device-read-iops：通过每秒读IO次数来限制指定设备的读速度。</li><li>–device-write-bps ：限制此设备上的写速度（bytes per second），单位可以是kb、mb或者gb。</li><li>–device-write-iops：通过每秒写IO次数来限制指定设备的写速度。</li><li>–blkio-weight：容器默认磁盘IO的加权值，有效值范围为10-100。</li></ul></div><div>磁盘IO配额控制示例</div><div>要使–blkio-weight生效，需要保证IO的调度算法为CFQ。可以使用下面的方式查看：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">root@ubuntu</span><span class="pun">:~#</span><span class="pln"> cat </span><span class="pun">/</span><span class="pln">sys</span><span class="pun">/</span><span class="pln">block</span><span class="pun">/</span><span class="pln">sda</span><span class="pun">/</span><span class="typ">queue</span><span class="pun">/</span><span class="pln">scheduler</span></code></li><li class="L1"><code class="language-c"><span class="pln">noop </span><span class="pun">[</span><span class="pln">deadline</span><span class="pun">]</span><span class="pln"> cfq</span></code></li></ol></pre></div></div><div>使用下面的命令创建两个–blkio-weight值不同的容器：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">docker run </span><span class="pun">-</span><span class="pln">ti </span><span class="pun">–</span><span class="pln">rm </span><span class="pun">–</span><span class="pln">blkio</span><span class="pun">-</span><span class="pln">weight </span><span class="lit">100</span><span class="pln"> ubuntu</span><span class="pun">:</span><span class="pln">stress</span></code></li><li class="L1"><code class="language-c"><span class="pln">docker run </span><span class="pun">-</span><span class="pln">ti </span><span class="pun">–</span><span class="pln">rm </span><span class="pun">–</span><span class="pln">blkio</span><span class="pun">-</span><span class="pln">weight </span><span class="lit">1000</span><span class="pln"> ubuntu</span><span class="pun">:</span><span class="pln">stress</span></code></li></ol></pre></div></div><div>在容器中同时执行下面的dd命令，进行测试：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">time dd </span><span class="kwd">if</span><span class="pun">=/</span><span class="pln">dev</span><span class="pun">/</span><span class="pln">zero of</span><span class="pun">=</span><span class="pln">test</span><span class="pun">.</span><span class="pln">out bs</span><span class="pun">=</span><span class="lit">1M</span><span class="pln"> count</span><span class="pun">=</span><span class="lit">1024</span><span class="pln"> oflag</span><span class="pun">=</span><span class="pln">direct</span></code></li></ol></pre></div></div><div><br></div><div>使用下面的命令创建容器，并执行命令验证写速度的限制。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">docker run </span><span class="pun">-</span><span class="pln">tid </span><span class="pun">–</span><span class="pln">name disk1 </span><span class="pun">–</span><span class="pln">device</span><span class="pun">-</span><span class="pln">write</span><span class="pun">-</span><span class="pln">bps </span><span class="pun">/</span><span class="pln">dev</span><span class="pun">/</span><span class="pln">sda</span><span class="pun">:</span><span class="lit">1mb</span><span class="pln"> ubuntu</span><span class="pun">:</span><span class="pln">stress</span></code></li></ol></pre></div></div><div>通过dd来验证写速度，可以看到容器的写磁盘速度被成功地限制到了1MB/s。device-read-bps等其他磁盘IO限制参数可以使用类似的方式进行验证。</div><div><br></div><div><ul><li>容器空间大小限制<br></li></ul></div><div><br></div><div>在docker使用devicemapper作为存储驱动时，默认每个容器和镜像的最大大小为10G。如果需要调整，可以在daemon启动参数中，使用dm.basesize来指定，但需要注意的是，修改这个值，<b>不仅仅需要重启docker daemon服务，还会导致宿主机上的所有本地镜像和容器都被清理掉。</b></div><div>使用aufs或者overlay等其他存储驱动时，没有这个限制。</div></div><h5>网络带宽</h5><div><div>tc对veth限额实现容器的网络限额控制：</div><div>1. 找到容器的vethname</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="com">#!/bin/bash  </span></code></li><li class="L1"><code class="language-c"><span class="com">#filename:getveth.sh  </span></code></li><li class="L2"><code class="language-c"><span class="com">#author:wade  </span></code></li><li class="L3"><code class="language-c"><span class="pln">container_name</span><span class="pun">=</span><span class="pln">$1  </span></code></li><li class="L4"><code class="language-c"><span class="kwd">if</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="pun">-</span><span class="pln">z $1 </span><span class="pun">]</span><span class="pln"> </span><span class="pun">;</span><span class="pln"> then  </span></code></li><li class="L5"><code class="language-c"><span class="pln">    echo </span><span class="str">"Usage: ./getveth.sh container_name"</span><span class="pln">  </span></code></li><li class="L6"><code class="language-c"><span class="pln">    exit </span><span class="lit">1</span><span class="pln">  </span></code></li><li class="L7"><code class="language-c"><span class="pln">fi  </span></code></li><li class="L8"><code class="language-c"><span class="pln">  </span></code></li><li class="L9"><code class="language-c"><span class="kwd">if</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="pun">`</span><span class="pln">docker inspect </span><span class="pun">-</span><span class="pln">f </span><span class="str">"{{.State.Pid}}"</span><span class="pln"> $</span><span class="pun">{</span><span class="pln">container_name</span><span class="pun">}</span><span class="pln"> </span><span class="pun">&amp;&gt;&gt;/</span><span class="pln">dev</span><span class="pun">/</span><span class="pln">null </span><span class="pun">&amp;&amp;</span><span class="pln"> echo </span><span class="lit">0</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> echo </span><span class="lit">1</span><span class="pun">`</span><span class="pln"> </span><span class="pun">-</span><span class="pln">eq </span><span class="lit">1</span><span class="pln"> </span><span class="pun">];</span><span class="pln">then  </span></code></li><li class="L0"><code class="language-c"><span class="pln">echo </span><span class="str">"no this container:${container_name}"</span><span class="pln">  </span></code></li><li class="L1"><code class="language-c"><span class="pln">exit </span><span class="lit">1</span><span class="pln">  </span></code></li><li class="L2"><code class="language-c"><span class="pln">fi  </span></code></li><li class="L3"><code class="language-c"><span class="pln">pid</span><span class="pun">=`</span><span class="pln">docker inspect </span><span class="pun">-</span><span class="pln">f </span><span class="str">"{{.State.Pid}}"</span><span class="pln"> $</span><span class="pun">{</span><span class="pln">container_name</span><span class="pun">}`</span><span class="pln">  </span></code></li><li class="L4"><code class="language-c"><span class="pln">mkdir </span><span class="pun">-</span><span class="pln">p </span><span class="pun">/</span><span class="pln">var</span><span class="pun">/</span><span class="pln">run</span><span class="pun">/</span><span class="pln">netns  </span></code></li><li class="L5"><code class="language-c"><span class="pln">ln </span><span class="pun">-</span><span class="pln">sf </span><span class="pun">/</span><span class="pln">proc</span><span class="pun">/</span><span class="pln">$pid</span><span class="pun">/</span><span class="pln">ns</span><span class="pun">/</span><span class="pln">net </span><span class="str">"/var/run/netns/${container_name}"</span><span class="pln">  </span></code></li><li class="L6"><code class="language-c"><span class="pln">index</span><span class="pun">=`</span><span class="pln">ip netns exec </span><span class="str">"${container_name}"</span><span class="pln"> ip link show eth0 </span><span class="pun">|</span><span class="pln"> head </span><span class="pun">-</span><span class="pln">n1 </span><span class="pun">|</span><span class="pln"> sed s</span><span class="pun">/:.*</span><span class="com">//`  </span></code></li><li class="L7"><code class="language-c"><span class="pln">let index</span><span class="pun">=</span><span class="pln">index</span><span class="pun">+</span><span class="lit">1</span><span class="pln">  </span></code></li><li class="L8"><code class="language-c"><span class="pln">vethname</span><span class="pun">=`</span><span class="pln">ip link show </span><span class="pun">|</span><span class="pln"> grep </span><span class="str">"^${index}:"</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> sed </span><span class="str">"s/${index}: .*:.*/\1/"</span><span class="pun">`</span><span class="pln">  </span></code></li><li class="L9"><code class="language-c"><span class="pln">echo $vethname  </span></code></li><li class="L0"><code class="language-c"><span class="pln">rm </span><span class="pun">-</span><span class="pln">f </span><span class="str">"/var/run/netns/${container_name}"</span></code></li></ol></pre></div></div><div>2. docker容器下载流量限额</div><div>在node节点上用tc设置对应veth的流量带宽</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">tc qdisc add dev vethname root  tbf rate </span><span class="lit">10mbit</span><span class="pln"> latency </span><span class="lit">50ms</span><span class="pln"> burst </span><span class="lit">10000</span><span class="pln"> mpu </span><span class="lit">64</span><span class="pln"> mtu </span><span class="lit">15000</span><span class="pln"> </span></code></li></ol></pre></div></div><div>3. docker容器上传流量限额</div><div>在容器内使用tc设置eth0设备的流量带宽</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">tc qdisc add dev eth0 root  tbf rate </span><span class="lit">10mbit</span><span class="pln"> latency </span><span class="lit">50ms</span><span class="pln"> burst </span><span class="lit">10000</span><span class="pln"> mpu </span><span class="lit">64</span><span class="pln"> mtu </span><span class="lit">15000</span></code></li></ol></pre></div><div><br></div></div></div><h4>Docker架构</h4><div>Docker使用了传统的client-server架构模式，总架构图如下，用户通过Docker client与Docker daemon建立通信，并将请求发送给后者。而Docker的后者是松耦合结构，不同模块各司其职，有机组合，完成用户的请求。<br></div><div><div><img border="0" class="" src="All in_files/51600364.png"></div></div><div><div>Docker daemon是Docker架构中的主要用户接口。首先，它提供了API Server用于接收来自Docker client的请求，其后根据不同的请求分发给Docker daemon的不同模块执行相应的工作，其中对容器运行时、volume、镜像以及网络方面的具体实现已经放在daemon以外的模块或项目中。Docker一直致力于将其自己进一步解耦，削减Docker daemon的功能，这是docker新版本的变化。<br></div><div>Docker通过driver模块来实现对Docker容器执行环境的创建和管理。</div><div><ul style="margin-bottom: 0px;"><li>当需要创建Docker容器时，可通过镜像管理（image management）部分的distribution和registry模块从Docker registry中下载镜像，并通过镜像管理的image、reference和layer存储镜像的元数据，通过镜像存储驱动graphdriver将镜像文件存储于具体的文件系统中；<br></li><li><span style="line-height: 1.6;">当需要为Docker容器创建网络环境时，通过网络管理模块network调用libnetwork创建并配置Docker容器的网络环境；</span></li><li><span style="line-height: 1.6;">当需要为容器创建数据卷volume时，则通过volume模块调用某个具体的volumedriver，来创建一个数据卷并负责后续的挂载操作；</span></li><li><span style="line-height: 1.6;">当需要限制Docker容器运行资源或执行用户指令等操作时，则通过execdriver来完成。libcontainer是对cgroups和namespace的二次封装，execdriver是通过libcontainer来实现对容器的具体管理，包括利用UTS、IPC、PID、Network、Mount、User等namespace实现容器之间的资源隔离和利用cgroup实现对容器的资源隔离。</span></li></ul><div>当运行容器的命令执行完毕后，一个实际的容器就处于运行状态，该容器拥有独立的文件系统、相对安全且相互隔离的运行环境。</div></div></div><div>详细看看上面各个模块：</div><div><ul><li>Docker daemon &nbsp; &nbsp;Docker daemon是Docker最核心后台进程，负责响应来自Docker client的请求，然后将这些请求翻译成系统调用完成容器管理操作。该进程会在后台启动一个AP Server，负责接收由Docker client发送的请求；接收到的请求将通过Docker daemon分发调度，再由具体的函数来执行请求。</li><li>Docker client &nbsp; &nbsp;用来向Docker daemon发起请求，有很多种类，java、go等语言的都有，甚至还有Angular库编写的WebUI格式的客户端。</li><li>镜像管理 &nbsp; &nbsp;Docker通过distribution、registry、layer、image、reference等模块实现了Docker镜像的管理，我们将这些模块同城为镜像管理（image management）。在Docker 1.10以前的版本中，这一功能是通过graph组件来完成的。下面进行简单介绍，具体细节在镜像管理会详细说明。</li><ul><li>distribution负责与Docker registry交互，上传下载镜像以及存储与v2 registry有关的元数据。</li><li>registry模块负责与Docker registry有关的身份验证、镜像查找、镜像验证以及管理registry mirror等交互操作。</li><li>image模块负责与镜像元数据有关的存储、查找，镜像层的索引、查找以及镜像tar包有关的导入、导出等操作。</li><li>reference负责存储本地所有镜像的repository和tag名，并维护与镜像ID之间的映射关系。</li><li>layer模块负责与镜像层和容器层元数据有关的增删改查，并负责将镜像层的增删查改操作映射到实际存储镜像层文件系统的grapdriver模块。</li></ul><li>execdriver、volumedriver、grapdriver&nbsp; &nbsp;&nbsp;Docker daemon负责将用户请求转移成系统调用，进而创建和管理容器。而在具体实现过程中，为了将这些系统调用抽象成为统一的操作接口方便调用者使用，Docker把这些操作分成了容器执行驱动execdriver、volume存储驱动volumedriver、镜像存储驱动graphdriver &nbsp;3种。</li><ul><li>execdriver是对linux操作系统的namespaces、cgroups、apparmor、SELinux等容器运行所需的系统操作进行的一层二次封装，其本质作用类似于LXC，但是功能要更全面。这也就是为什么LXC会作为execdriver的一种实现而存在。当然，execdriver最主要的实现，也是现在的默认实现，是Docker官方编写的libcontainer库。</li><li>volumedriver是volume数据卷存储操作的最终执行者，负责volume的增删改查，屏蔽不同驱动实现的区别，为上层调用者提供一个统一的接口。Docker中作为默认实现的volumedriver是local，默认将文件存储于Docker根目录下的volume文件夹里。其他的volumedriver均是通过外部插件实现的。</li><li>graphdriver是所有与容器镜像相关操作的最终执行者。graphdriver会在Docker工作目录下维护一组与镜像层对应的目录，并记下镜像层之间的关系以及与具体的graphdriver实现相关的元数据。这样，用户对镜像的操作最终会被映射成对这些目录文件以及元数据的增删改查，从而屏蔽掉不同文件存储实现对于上层调用者的影响。在linux环境下，目前Docker已经支持的graphdriver包括aufs、btrfs、zfs、devicemapper、overlay和vfs。</li></ul><li>network&nbsp; &nbsp;&nbsp;在Docker1.9版本以前，网络是通过networkdriver模块以及libcontainer库完成的，现在这部分功能已经分离成一个libnetwork库独立维护了。libnetwork抽象出了一个容器网络模型（Container Network Model，CNM），并给调用者提供了一个统一抽象接口，其目标并不仅限于Docker容器。CNM模型对真实的容器网络抽象出了沙盒（sandbox）、端点（endpoint）、网络（network）这3种对象，由具体网络驱动（包括内置的Bridge、Host、None和overlay驱动以及通过插件配置的外部驱动）操作对象，并通过网络控制其提供一个统一接口供调用者管理网络。网络驱动负责实现具体的操作，包括创建容器网络所需的网络，容器的network namespace，这个网络所需的虚拟网卡，分配通信所需的IP，服务访问的端口和容器与宿主机之间的端口映射，设置hosts、resolv.conf、iptables等。</li></ul><div><br></div></div><h5>镜像、私有仓库</h5><div>Docker镜像是一个只读的Docker容器模板，含有启动Docker容器所需的文件系统结构以及内容：</div><div><ul><li>分层：每一个镜像都由一系列的“镜像层”组成。</li><li>写时复制：在多个容器之间共享镜像，每个容器在启动的时候并不需要单独复制一份镜像文件，而是将所有镜像层以只读的方式挂载到一个挂载点，再在上面覆盖一个可读写的容器层。再为更改文件内容时，所有容器共享同一份数据，只有在Docker容器运行过程中文件系统发生变化时，才会把变化的文件内容写到可读写层，并隐藏只读层中的老版本文件。比如基于一个image启动多个Container，如果为每个Container都去分配一个image一样的文件系统，那么将会占用大量的磁盘空间。而写时复制技术可以让所有的容器共享image的文件系统，所有数据都从image中读取，只有当要对文件进行写操作时，才从image里把要写的文件复制到自己的文件系统进行修改。所以无论有多少个容器共享同一个image，所做的写操作都是对从image中复制到自己的文件系统中的复本上进行，并不会修改image的源文件，且多个容器操作同一个文件，会在每个容器的文件系统里生成一个复本，每个容器修改的都是自己的复本，相互隔离，相互不影响。使用写时复制可以有效的提高磁盘的利用率。</li><li>用时分配： &nbsp; &nbsp;启动一个容器，并不会为这个容器预分配一些磁盘空间，而是当有新文件写入时，才按需分配新空间。</li><li>内容寻址： &nbsp; &nbsp;之前是每个镜像层都随机生成一个UUID，新模型是对镜像层的内容计算，是把data的内容经过sha256做hash得出的结果。</li></ul></div><div><br></div><div>私有仓库</div><div>docker registry v1和v2区别：</div><div>v1目录，镜像仓库下存储结构：</div><div><div><img border="0" class="" src="All in_files/56417067.png"></div></div><div>最上面是两层结构images和repositories，关注一下images里面的内容，长字符串的是镜像ID，最叶子节点有一个layer和Ancestry。layer就是这一层文件系统的tar包，Ancestry中存储的是它父亲层ID。当使用pull的时候，就是根据链表这种结构，根据子节点，找到父节点。只能单线程的串行的pull。</div><div>问题1：</div><div>这个长的镜像ID是在本地build时随机生成的，和内容没有关系，所以再次build生成的ID肯定不同。使用docker pull和push判断image layer是根据这个ID判断的。这就存在问题，恶意用户可以伪造ID直接 push 上去，这样以后再有别人同样的ID就上传不上去了。</div><div>问题2：</div><div>Docker images的tag是可变的，没有办法通过tag来确定唯一的版本，这一点在latest上尤为明显。因为latest是可以自己定义的，如果在 Dockerfile里from latest很可能你过一阵build出来的镜像和之前不一样了，其他tag也存在同样的问题。避免这个问题的通用做法是用代码 commit ID做tag，每次都是按照commit ID作部署，尽量远离latest。<br></div><div>问题3：Python写的。</div><div>v2目录，镜像仓库下存储结构：<br></div><div><div><img border="0" src="All in_files/56880558.png"></div></div><div>最上层是blobs和repositories，blobs和images一样。最叶子节点变为了data，他的目录是一串长ID。这一长串ID（也叫digest）是把data的内容经过sha256做hash得出的结果。这样就很好的解决了之前V1所存在的随机ID的大问题。这样就可以变原来的链表顺序查找为数组的随机读取，这也是V2 pull可以并行的一个基础。</div><div>V2中会有一个新的文件，叫manifest，它会记录改镜像所有layer的信息。其他的优点是多了新的Auth方式，通知机制。<br></div><div>V2的缺点：V1提供完整的API，V2提供API的缺失，delete、search这些基本功能都没有。</div><div><br></div><div>目前docker registry v2 认证分为以下6个步骤：<br></div><div><div><img border="0" src="All in_files/55730503.png"></div></div><div><ol><li>docker client 尝试到registry中进行push/pull操作；</li><li>如果registry的访问需要认证，registry就会返回一个含有如何完成认证的401 Unauthorized HTTP响应；</li><li>客户端向Auth服务器请求一个Bearer token；</li><li>认证服务器返回给客户端一个加密的Bearer token，用来代表客户端被授权的访问权限；</li><li>客户端再次尝试用头部嵌有Bearer token的请求向原来的registry发起请求；</li><li>registry验证客户端请求中的Bearer token以及包含的授权空间权限。如果正确，便建立与客户端的pull/push会话。</li></ol></div><div><br></div><h5>Docker存储</h5><div>Docker镜像是由一系列的只读层组合而来的，当启动一个容器时，Docker加载镜像的所有只读层，并在最上层加上一个读写层。这种设计使得镜像构建、存储和分发效率很高，但存在问题：多个容器之间的数据无法共享；当删除容器时，容器产生的数据将丢失。为解决这些问题，Docker引入了volume机制。可以为容器添加volume，volume是存在于一个或多个容器中的特定文件或文件夹。volume能在不同容器间共享和重用；对volume中数据的操作会马上生效；volume的生命周期独立于容器的生存周期，删除容器，volume仍然会存在。Docker提供了volumedriver接口，通过实现该接口，可以为Docker容器提供不同的volume存储支持。</div><div>为了支持镜像分层与写时复制机制，Docker提供了存储驱动的接口。存储驱动根据操作系统底层的支持提供了针对某种文件系统的初始化操作以及对镜像层的增、删、查和差异比较等操作。目前存储系统的接口有aufs、devicemapper、overlay、zfs、btrfs等。只有vfs不支持写时复制。</div><div><br></div><h6>aufs存储驱动、devicemapper存储驱动、overlay存储驱动比较</h6><div><ul><li>AUFS是一种Union FS，是文件级的存储驱动。支持将不同目录挂载到同一个虚拟文件系统下的文件系统。这种文件系统可以一层一层地叠加修改文件。无论底下有多少层都是只读的，只有最上层的文件系统是可写的。当需要修改一个文件时，AUFS创建该文件的一个副本，使用写时复制技术将文件从只读层复制到可写层进行修改，结果也保存在可写层。在Docker中，底下的只读层就是image，可写层就是Container。<br></li><li>Overlay也是一种Union FS，和AUFS的多层不同的是Overlay只有两层：一个lower文件系统和一个upper文件系统，分别代表Docker的镜像层和容器层。当需要修改一个文件时，使用写时复制技术将文件从只读的lower复制到可写的upper进行修改，结果也保存在upper层。在Docker中，底下的只读层就是image，可写层就是Container。<br></li><li>Device mapper是块级存储，所有的操作都是直接对块进行操作，而不是文件。Device mapper驱动会先在块设备上创建一个资源池，然后在资源池上创建一个带有文件系统的基本设备，所有镜像都是这个基本设备的快照，而容器则是镜像的快照。所以在容器里看到文件系统是资源池上基本设备的文件系统的快照，并不有为容器分配空间。当要写入一个新文件时，在容器的镜像内为其分配新的块并写入数据。当要修改已有文件时，再使用写时复制技术为容器快照分配块空间，将要修改的数据复制到在容器快照中新的块里再进行修改。</li></ul>Device mapper 驱动默认会创建一个100G的文件包含镜像和容器。每一个容器被限制在10G大小的卷内，可以自己配置调整。</div><div><div><br></div><div>AUFS和Overlay对比：<br></div><div>AUFS和Overlay都是联合文件系统，但AUFS有多层，而Overlay只有两层，所以在做写时复制操作时，如果文件比较大且存在比较低的层，则AUSF可能会慢一些。AUFS在读的方面性能相比Overlay要差一些，但在写的方面性能比Overlay要好。</div><div>Overlay和Device mapper对比：</div><div>Overlay是文件级存储，Device mapper是块级存储，当文件特别大而修改的内容很小，Overlay不管修改的内容大小都会复制整个文件，对大文件进行修改显示要比小文件要消耗更多的时间，而块级无论是大文件还是小文件都只复制需要修改的块到文件(默认就一个100G的文件)里，并不是整个文件，在这种场景下，显然device mapper要快一些。是对块操作，不支持共享存储，表示当有多个容器读同一个文件时，需要生活多个复本，所以这种存储驱动不适合在高密度容器的PaaS平台上使用。Device mapper在512M以上文件的读写性能都非常的差，但在512M以下的文件读写性能都比较好。</div></div><h6>Docker数据卷</h6><div><br></div><div>为容器添加volume，类似于Linux的mount操作，用户将一个文件夹作为volume挂载到容器上。多个容器可以共享同一个volume，为不同容器之间的数据共享提供便利。</div><div>docker1.9后两种办法创建volume。</div><div>1.不用docker提供的命令，直接使用</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="com">#将宿主机上/usr/local目录挂载到容器内/local目录</span></code></li><li class="L1"><code class="language-c"><span class="pln">docker run </span><span class="pun">-</span><span class="pln">itd </span><span class="pun">-</span><span class="pln">v </span><span class="pun">/</span><span class="pln">luser</span><span class="pun">/</span><span class="pln">local</span><span class="pun">:/</span><span class="pln">local </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">bash</span></code></li></ol></pre></div><div>2.使用docker提供的volume命令。docker volume会在宿主机/var/lib/docker/volume/[volumeid]/_data创建目录，以后对volume的内容都存储在该目录下。</div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost cpu</span><span class="pun">]#</span><span class="pln"> docker volume create </span><span class="pun">--</span><span class="pln">name hello</span><span class="pun">-</span><span class="pln">volume</span></code></li><li class="L1"><code class="language-c"><span class="pln">hello</span><span class="pun">-</span><span class="pln">volume</span></code></li><li class="L2"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost cpu</span><span class="pun">]#</span><span class="pln"> </span></code></li><li class="L3"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost cpu</span><span class="pun">]#</span><span class="pln"> docker volume inspect hello</span><span class="pun">-</span><span class="pln">volume</span></code></li><li class="L4"><code class="language-c"><span class="pun">[</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="pun">{</span></code></li><li class="L6"><code class="language-c"><span class="pln">        </span><span class="str">"Name"</span><span class="pun">:</span><span class="pln"> </span><span class="str">"hello-volume"</span><span class="pun">,</span></code></li><li class="L7"><code class="language-c"><span class="pln">        </span><span class="str">"Driver"</span><span class="pun">:</span><span class="pln"> </span><span class="str">"local"</span><span class="pun">,</span></code></li><li class="L8"><code class="language-c"><span class="pln">        </span><span class="str">"Mountpoint"</span><span class="pun">:</span><span class="pln"> </span><span class="str">"/var/lib/docker/volumes/hello-volume/_data"</span><span class="pun">,</span></code></li><li class="L9"><code class="language-c"><span class="pln">        </span><span class="str">"Labels"</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{},</span></code></li><li class="L0"><code class="language-c"><span class="pln">        </span><span class="str">"Scope"</span><span class="pun">:</span><span class="pln"> </span><span class="str">"local"</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L2"><code class="language-c"><span class="pun">]</span></code></li><li class="L3"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost cpu</span><span class="pun">]#</span></code></li><li class="L4"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost cpu</span><span class="pun">]#</span><span class="pln"> docker run </span><span class="pun">-</span><span class="pln">it </span><span class="pun">--</span><span class="pln">name voluem</span><span class="pun">-</span><span class="pln">test </span><span class="pun">-</span><span class="pln">v hello</span><span class="pun">-</span><span class="pln">volume</span><span class="pun">:/</span><span class="pln">volume centos</span><span class="pun">:</span><span class="lit">7</span><span class="pln"> </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">bash</span></code></li></ol></pre></div><div>可以使用--volumes-from标签使得容器与已有的容器共享volume。</div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">docker run </span><span class="pun">-</span><span class="pln">it </span><span class="pun">--</span><span class="pln">name voluem</span><span class="pun">-</span><span class="pln">test2 </span><span class="pun">--</span><span class="pln">volumes</span><span class="pun">-</span><span class="pln">from voluem</span><span class="pun">-</span><span class="pln">test centos</span><span class="pun">:</span><span class="lit">7</span><span class="pln"> </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">bash</span></code></li></ol></pre></div><div>删除volume</div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">docker volume rm hello</span><span class="pun">-</span><span class="pln">volume</span></code></li></ol></pre></div><div><br></div></div><div><br></div><div><h5>网络</h5></div><div>Docker在1.9版本中引入了一整套的docker network子命令和跨主机网络支持。这允许用户可以根据他们应用的拓扑结构创建虚拟网络并将容器接入其所对应的网络。Docker1.7中，网络部分代码就已经被抽离并单独成为了Docker的网络库，即libnetwork。在此之后，容器的网络模式也被抽象变成了统一接口的驱动。<br></div><div>为了标准化网络驱动的开发步骤和支持多种网络驱动，Docker公司在libnetwork中使用了CNM（Container Network Model）。CNM定义了构建容器虚拟化网络的模型，同时还提供了可以用于开发多种网络驱动的标准化接口和组件。</div><div>libnetwork和Docker daemon及各个网络驱动的关系如下图表示：<br></div><div><div><img border="0" class="" src="All in_files/65538247.png"></div></div><div><div>Docker daemon通过调用libnetwork对外提供的API完成网络的创建和管理等功能。libnetwork中则使用了CNM来完成网络功能的提供。而CNM中主要有沙盒（sandbox）、端点（endpoint）和网络（network）这3种组件。libnetwork中内置的5种驱动则为libnetwork提供了不同类型的网络服务。下面分别对CNM中的3个核心组件和libnetwork中的5种内置驱动进行介绍。</div><div>CNM中的3个核心组件如下：</div><div><ul><li>沙盒：一个沙盒包含了一个容器网络栈的信息。沙盒可以对容器的接口、路由和DNS设置等进行管理。沙盒的实现可以使用linux network namespace。一个沙盒可以有多个端点和多个网络。</li><li>端点：一个端点可以加入一个沙盒和一个网络。端点的实现可以是veth pair等相似的设备。一个端点只可以属于一个网路并且只属于一个沙盒。</li><li>网络：一个网络是一组可以直接互相联通的端点。网络的实现可以是Linux bridge、VLAN等。一个网络可以包含多个端点。</li></ul></div><div>libnetwork中的5种内置驱动如下：</div><div><ul><li>bridge驱动 &nbsp;此驱动为Docker的默认设置，使用这个驱动的时候，libnetwork将创建出来的Docker容器连接到Docker网桥上，容器与外界通信使用NAT模式。</li><li>host驱动 &nbsp;使用这种驱动的时候，libnetwork将不为Docker容器创建网络协议栈，即不会创建独立的network namespace。Docker容器中的进程处于宿主机的网络环境中，相当于Docker容器和宿主机公用同一个network namespace，使用宿主机的网卡、IP和端口等信息。但是host驱动也降低了容器与容器之间、容器与宿主机之间网络层面的隔离性，引起网络资源的竞争与冲突，因此可以认为host驱动适用于对于容器集群规模不大的场景。</li><li>overlay驱动 &nbsp;此驱动采用IETF标准的VXLAN方式，叠加网络。比如flannle的CNM实现。</li><li>remote驱动 &nbsp;这个驱动实际上并未做真正的网络服务实现，而是调用了用户自行实现的网络驱动插件，使libnetwork实现了驱动的可插件化，更好地满足了用户的多种需求。用户只要根据libnetwork提供的协议标准，实现其所要求的各个接口并向Docker daemon进行注册。</li><li>null驱动 &nbsp;Docker容器拥有自己的network namespace，但是并不为Docker容器进行任何网络配置。也就是说，这个Docker容器除了network namespace自带的loopback网卡外，没有其他任何网卡、IP、路由等信息，需要用户为Docker容器添加网卡、配置IP等。这种模式如果不进行特定的配置是无法正常使用的，但是优点也非常明显，它给了用户最大的自由度来自定义容器的网络环境。leengien就用了。直接创建一个veth设备对，一端直接放到容器的net ns中。</li></ul></div><div><br></div><div>在引入libnetwork后，现在用户可以利用Docker的网络命令创建更多与默认网络相似的网络，每一个都是特定类型网络插件的实体。</div></div><div>演示libnetwork。</div><div><div><img border="0" src="All in_files/66366071.png"></div></div><div><br></div><div>他有两个网络，其中backend network为后端网络，frontend network为前端网络，两个网络不通。其中container1和container3各拥有一个端点veth，并且分别加入到后端网络和前端网络中。而container2则有两个端点，它分别加入到后端网络和前端网络中。</div><div>演示：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="com">#这三个网络是docker daemon默认创建的，分别使用了不同的驱动。</span></code></li><li class="L1"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost docker</span><span class="pun">]#</span><span class="pln"> docker network ls</span></code></li><li class="L2"><code class="language-c"><span class="pln">NETWORK ID          NAME                DRIVER              SCOPE</span></code></li><li class="L3"><code class="language-c"><span class="lit">2d05b26c275b</span><span class="pln">        bridge              bridge              local</span></code></li><li class="L4"><code class="language-c"><span class="pln">c2ff85e08519        host                host                local</span></code></li><li class="L5"><code class="language-c"><span class="pln">f868849d8b13        none                null                local</span></code></li><li class="L6"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost docker</span><span class="pun">]#</span><span class="pln"> docker network create backend</span></code></li><li class="L7"><code class="language-c"><span class="pln">fd36fe1949702106cd2dae3f8277f6ce4f5c03c517a12eab201a731c546cd495</span></code></li><li class="L8"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost docker</span><span class="pun">]#</span><span class="pln"> docker network create frontend</span></code></li><li class="L9"><code class="language-c"><span class="lit">437322d8dbaf8eefd8f7c2e6a34b7a667a9be923b0028cbfef8a02f78c7dce22</span></code></li><li class="L0"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost docker</span><span class="pun">]#</span><span class="pln"> docker network ls</span></code></li><li class="L1"><code class="language-c"><span class="pln">NETWORK ID          NAME                DRIVER              SCOPE</span></code></li><li class="L2"><code class="language-c"><span class="pln">fd36fe194970        backend             bridge              local</span></code></li><li class="L3"><code class="language-c"><span class="lit">2d05b26c275b</span><span class="pln">        bridge              bridge              local</span></code></li><li class="L4"><code class="language-c"><span class="lit">437322d8dbaf</span><span class="pln">        frontend            bridge              local</span></code></li><li class="L5"><code class="language-c"><span class="pln">c2ff85e08519        host                host                local</span></code></li><li class="L6"><code class="language-c"><span class="pln">f868849d8b13        none                null                local</span></code></li><li class="L7"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost docker</span><span class="pun">]#</span></code></li><li class="L8"><code class="language-c"><span class="com">#将container1和container2假如到backend网络，将container3假如到frontend网络</span></code></li><li class="L9"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost docker</span><span class="pun">]#</span><span class="pln"> docker run </span><span class="pun">-</span><span class="pln">it </span><span class="pun">--</span><span class="pln">name container1 </span><span class="pun">--</span><span class="pln">net backend busybox</span></code></li><li class="L0"><code class="language-c"><span class="pun">/</span><span class="pln"> </span><span class="com"># [root@localhost docker]#</span></code></li><li class="L1"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost docker</span><span class="pun">]#</span><span class="pln"> docker run </span><span class="pun">-</span><span class="pln">it </span><span class="pun">--</span><span class="pln">name container2 </span><span class="pun">--</span><span class="pln">net backend busybox</span></code></li><li class="L2"><code class="language-c"><span class="pun">/</span><span class="pln"> </span><span class="com"># [root@localhost docker]#</span></code></li><li class="L3"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost docker</span><span class="pun">]#</span><span class="pln"> docker run </span><span class="pun">-</span><span class="pln">it </span><span class="pun">--</span><span class="pln">name container3 </span><span class="pun">--</span><span class="pln">net backend busybox</span></code></li><li class="L4"><code class="language-c"><span class="pun">/</span><span class="pln"> </span><span class="com"># [root@localhost docker]#</span></code></li><li class="L5"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost docker</span><span class="pun">]#</span></code></li><li class="L6"><code class="language-c"><span class="com">#查看container1、2、3的IP，互ping，发现只有在同一个网络的才能ping通。</span></code></li><li class="L7"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> docker exec container1 ip addr</span></code></li><li class="L8"><code class="language-c"><span class="lit">1</span><span class="pun">:</span><span class="pln"> lo</span><span class="pun">:</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">LOOPBACK</span><span class="pun">,</span><span class="pln">UP</span><span class="pun">,</span><span class="pln">LOWER_UP</span><span class="pun">&gt;</span><span class="pln"> mtu </span><span class="lit">65536</span><span class="pln"> qdisc noqueue qlen </span><span class="lit">1</span></code></li><li class="L9"><code class="language-c"><span class="pln">    link</span><span class="pun">/</span><span class="pln">loopback </span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pln"> brd </span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span></code></li><li class="L0"><code class="language-c"><span class="pln">    inet </span><span class="lit">127.0</span><span class="pun">.</span><span class="lit">0.1</span><span class="pun">/</span><span class="lit">8</span><span class="pln"> scope host lo</span></code></li><li class="L1"><code class="language-c"><span class="pln">       valid_lft forever preferred_lft forever</span></code></li><li class="L2"><code class="language-c"><span class="pln">    inet6 </span><span class="pun">::</span><span class="lit">1</span><span class="pun">/</span><span class="lit">128</span><span class="pln"> scope host</span></code></li><li class="L3"><code class="language-c"><span class="pln">       valid_lft forever preferred_lft forever</span></code></li><li class="L4"><code class="language-c"><span class="lit">10</span><span class="pun">:</span><span class="pln"> eth0@if11</span><span class="pun">:</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">BROADCAST</span><span class="pun">,</span><span class="pln">MULTICAST</span><span class="pun">,</span><span class="pln">UP</span><span class="pun">,</span><span class="pln">LOWER_UP</span><span class="pun">,</span><span class="pln">M</span><span class="pun">-</span><span class="pln">DOWN</span><span class="pun">&gt;</span><span class="pln"> mtu </span><span class="lit">1500</span><span class="pln"> qdisc noqueue</span></code></li><li class="L5"><code class="language-c"><span class="pln">    link</span><span class="pun">/</span><span class="pln">ether </span><span class="lit">02</span><span class="pun">:</span><span class="lit">42</span><span class="pun">:</span><span class="pln">ac</span><span class="pun">:</span><span class="lit">12</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">02</span><span class="pln"> brd ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span></code></li><li class="L6"><code class="language-c"><span class="pln">    inet </span><span class="lit">172.18</span><span class="pun">.</span><span class="lit">0.2</span><span class="pun">/</span><span class="lit">16</span><span class="pln"> scope global eth0</span></code></li><li class="L7"><code class="language-c"><span class="pln">       valid_lft forever preferred_lft forever</span></code></li><li class="L8"><code class="language-c"><span class="pln">    inet6 fe80</span><span class="pun">::</span><span class="lit">42</span><span class="pun">:</span><span class="pln">acff</span><span class="pun">:</span><span class="pln">fe12</span><span class="pun">:</span><span class="lit">2</span><span class="pun">/</span><span class="lit">64</span><span class="pln"> scope link</span></code></li><li class="L9"><code class="language-c"><span class="pln">       valid_lft forever preferred_lft forever</span></code></li><li class="L0"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> docker exec container2 ip addr</span></code></li><li class="L1"><code class="language-c"><span class="lit">1</span><span class="pun">:</span><span class="pln"> lo</span><span class="pun">:</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">LOOPBACK</span><span class="pun">,</span><span class="pln">UP</span><span class="pun">,</span><span class="pln">LOWER_UP</span><span class="pun">&gt;</span><span class="pln"> mtu </span><span class="lit">65536</span><span class="pln"> qdisc noqueue qlen </span><span class="lit">1</span></code></li><li class="L2"><code class="language-c"><span class="pln">    link</span><span class="pun">/</span><span class="pln">loopback </span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pln"> brd </span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span></code></li><li class="L3"><code class="language-c"><span class="pln">    inet </span><span class="lit">127.0</span><span class="pun">.</span><span class="lit">0.1</span><span class="pun">/</span><span class="lit">8</span><span class="pln"> scope host lo</span></code></li><li class="L4"><code class="language-c"><span class="pln">       valid_lft forever preferred_lft forever</span></code></li><li class="L5"><code class="language-c"><span class="pln">    inet6 </span><span class="pun">::</span><span class="lit">1</span><span class="pun">/</span><span class="lit">128</span><span class="pln"> scope host</span></code></li><li class="L6"><code class="language-c"><span class="pln">       valid_lft forever preferred_lft forever</span></code></li><li class="L7"><code class="language-c"><span class="lit">12</span><span class="pun">:</span><span class="pln"> eth0@if13</span><span class="pun">:</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">BROADCAST</span><span class="pun">,</span><span class="pln">MULTICAST</span><span class="pun">,</span><span class="pln">UP</span><span class="pun">,</span><span class="pln">LOWER_UP</span><span class="pun">,</span><span class="pln">M</span><span class="pun">-</span><span class="pln">DOWN</span><span class="pun">&gt;</span><span class="pln"> mtu </span><span class="lit">1500</span><span class="pln"> qdisc noqueue</span></code></li><li class="L8"><code class="language-c"><span class="pln">    link</span><span class="pun">/</span><span class="pln">ether </span><span class="lit">02</span><span class="pun">:</span><span class="lit">42</span><span class="pun">:</span><span class="pln">ac</span><span class="pun">:</span><span class="lit">12</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">03</span><span class="pln"> brd ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span></code></li><li class="L9"><code class="language-c"><span class="pln">    inet </span><span class="lit">172.18</span><span class="pun">.</span><span class="lit">0.3</span><span class="pun">/</span><span class="lit">16</span><span class="pln"> scope global eth0</span></code></li><li class="L0"><code class="language-c"><span class="pln">       valid_lft forever preferred_lft forever</span></code></li><li class="L1"><code class="language-c"><span class="pln">    inet6 fe80</span><span class="pun">::</span><span class="lit">42</span><span class="pun">:</span><span class="pln">acff</span><span class="pun">:</span><span class="pln">fe12</span><span class="pun">:</span><span class="lit">3</span><span class="pun">/</span><span class="lit">64</span><span class="pln"> scope link</span></code></li><li class="L2"><code class="language-c"><span class="pln">       valid_lft forever preferred_lft forever</span></code></li><li class="L3"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> docker exec container2 ping </span><span class="lit">172.18</span><span class="pun">.</span><span class="lit">0.2</span></code></li><li class="L4"><code class="language-c"><span class="pln">PING </span><span class="lit">172.18</span><span class="pun">.</span><span class="lit">0.2</span><span class="pln"> </span><span class="pun">(</span><span class="lit">172.18</span><span class="pun">.</span><span class="lit">0.2</span><span class="pun">):</span><span class="pln"> </span><span class="lit">56</span><span class="pln"> data bytes</span></code></li><li class="L5"><code class="language-c"><span class="lit">64</span><span class="pln"> bytes from </span><span class="lit">172.18</span><span class="pun">.</span><span class="lit">0.2</span><span class="pun">:</span><span class="pln"> seq</span><span class="pun">=</span><span class="lit">0</span><span class="pln"> ttl</span><span class="pun">=</span><span class="lit">64</span><span class="pln"> time</span><span class="pun">=</span><span class="lit">0.058</span><span class="pln"> ms</span></code></li><li class="L6"><code class="language-c"><span class="lit">64</span><span class="pln"> bytes from </span><span class="lit">172.18</span><span class="pun">.</span><span class="lit">0.2</span><span class="pun">:</span><span class="pln"> seq</span><span class="pun">=</span><span class="lit">1</span><span class="pln"> ttl</span><span class="pun">=</span><span class="lit">64</span><span class="pln"> time</span><span class="pun">=</span><span class="lit">0.106</span><span class="pln"> ms</span></code></li><li class="L7"><code class="language-c"><span class="pun">^</span><span class="pln">C</span></code></li><li class="L8"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> docker exec container3 ip addr</span></code></li><li class="L9"><code class="language-c"><span class="lit">1</span><span class="pun">:</span><span class="pln"> lo</span><span class="pun">:</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">LOOPBACK</span><span class="pun">,</span><span class="pln">UP</span><span class="pun">,</span><span class="pln">LOWER_UP</span><span class="pun">&gt;</span><span class="pln"> mtu </span><span class="lit">65536</span><span class="pln"> qdisc noqueue qlen </span><span class="lit">1</span></code></li><li class="L0"><code class="language-c"><span class="pln">    link</span><span class="pun">/</span><span class="pln">loopback </span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pln"> brd </span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span></code></li><li class="L1"><code class="language-c"><span class="pln">    inet </span><span class="lit">127.0</span><span class="pun">.</span><span class="lit">0.1</span><span class="pun">/</span><span class="lit">8</span><span class="pln"> scope host lo</span></code></li><li class="L2"><code class="language-c"><span class="pln">       valid_lft forever preferred_lft forever</span></code></li><li class="L3"><code class="language-c"><span class="pln">    inet6 </span><span class="pun">::</span><span class="lit">1</span><span class="pun">/</span><span class="lit">128</span><span class="pln"> scope host</span></code></li><li class="L4"><code class="language-c"><span class="pln">       valid_lft forever preferred_lft forever</span></code></li><li class="L5"><code class="language-c"><span class="lit">14</span><span class="pun">:</span><span class="pln"> eth0@if15</span><span class="pun">:</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">BROADCAST</span><span class="pun">,</span><span class="pln">MULTICAST</span><span class="pun">,</span><span class="pln">UP</span><span class="pun">,</span><span class="pln">LOWER_UP</span><span class="pun">,</span><span class="pln">M</span><span class="pun">-</span><span class="pln">DOWN</span><span class="pun">&gt;</span><span class="pln"> mtu </span><span class="lit">1500</span><span class="pln"> qdisc noqueue</span></code></li><li class="L6"><code class="language-c"><span class="pln">    link</span><span class="pun">/</span><span class="pln">ether </span><span class="lit">02</span><span class="pun">:</span><span class="lit">42</span><span class="pun">:</span><span class="pln">ac</span><span class="pun">:</span><span class="lit">13</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">02</span><span class="pln"> brd ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span></code></li><li class="L7"><code class="language-c"><span class="pln">    inet </span><span class="lit">172.19</span><span class="pun">.</span><span class="lit">0.2</span><span class="pun">/</span><span class="lit">16</span><span class="pln"> scope global eth0</span></code></li><li class="L8"><code class="language-c"><span class="pln">       valid_lft forever preferred_lft forever</span></code></li><li class="L9"><code class="language-c"><span class="pln">    inet6 fe80</span><span class="pun">::</span><span class="lit">42</span><span class="pun">:</span><span class="pln">acff</span><span class="pun">:</span><span class="pln">fe13</span><span class="pun">:</span><span class="lit">2</span><span class="pun">/</span><span class="lit">64</span><span class="pln"> scope link</span></code></li><li class="L0"><code class="language-c"><span class="pln">       valid_lft forever preferred_lft forever</span></code></li><li class="L1"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> docker exec container2 ping </span><span class="lit">172.19</span><span class="pun">.</span><span class="lit">0.2</span></code></li><li class="L2"><code class="language-c"><span class="pun">^</span><span class="pln">C</span></code></li><li class="L3"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span></code></li><li class="L4"><code class="language-c"><span class="com">#在container2中使用命令ifconfig来查看此容器中的网卡及其配置情况。可以看到，此容器中只有一块以太网卡，其名称为eth0，并且配置了和网桥backend同在一个IP段的IP地址，这个网卡就是CNM模型中的端点。</span></code></li><li class="L5"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> docker exec container2 ifconfig</span></code></li><li class="L6"><code class="language-c"><span class="pln">eth0      </span><span class="typ">Link</span><span class="pln"> encap</span><span class="pun">:</span><span class="typ">Ethernet</span><span class="pln">  </span><span class="typ">HWaddr</span><span class="pln"> </span><span class="lit">02</span><span class="pun">:</span><span class="lit">42</span><span class="pun">:</span><span class="pln">AC</span><span class="pun">:</span><span class="lit">12</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">03</span></code></li><li class="L7"><code class="language-c"><span class="pln">          inet addr</span><span class="pun">:</span><span class="lit">172.18</span><span class="pun">.</span><span class="lit">0.3</span><span class="pln">  </span><span class="typ">Bcast</span><span class="pun">:</span><span class="lit">0.0</span><span class="pun">.</span><span class="lit">0.0</span><span class="pln">  </span><span class="typ">Mask</span><span class="pun">:</span><span class="lit">255.255</span><span class="pun">.</span><span class="lit">0.0</span></code></li><li class="L8"><code class="language-c"><span class="pln">          inet6 addr</span><span class="pun">:</span><span class="pln"> fe80</span><span class="pun">::</span><span class="lit">42</span><span class="pun">:</span><span class="pln">acff</span><span class="pun">:</span><span class="pln">fe12</span><span class="pun">:</span><span class="lit">3</span><span class="pun">/</span><span class="lit">64</span><span class="pln"> </span><span class="typ">Scope</span><span class="pun">:</span><span class="typ">Link</span></code></li><li class="L9"><code class="language-c"><span class="pln">          UP BROADCAST RUNNING MULTICAST  MTU</span><span class="pun">:</span><span class="lit">1500</span><span class="pln">  </span><span class="typ">Metric</span><span class="pun">:</span><span class="lit">1</span></code></li><li class="L0"><code class="language-c"><span class="pln">          RX packets</span><span class="pun">:</span><span class="lit">286</span><span class="pln"> errors</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> dropped</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> overruns</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> frame</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L1"><code class="language-c"><span class="pln">          TX packets</span><span class="pun">:</span><span class="lit">516</span><span class="pln"> errors</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> dropped</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> overruns</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> carrier</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L2"><code class="language-c"><span class="pln">          collisions</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> txqueuelen</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L3"><code class="language-c"><span class="pln">          RX bytes</span><span class="pun">:</span><span class="lit">26380</span><span class="pln"> </span><span class="pun">(</span><span class="lit">25.7</span><span class="pln"> </span><span class="typ">KiB</span><span class="pun">)</span><span class="pln">  TX bytes</span><span class="pun">:</span><span class="lit">48976</span><span class="pln"> </span><span class="pun">(</span><span class="lit">47.8</span><span class="pln"> </span><span class="typ">KiB</span><span class="pun">)</span></code></li><li class="L4"><code class="language-c"><span class="pln">lo        </span><span class="typ">Link</span><span class="pln"> encap</span><span class="pun">:</span><span class="typ">Local</span><span class="pln"> </span><span class="typ">Loopback</span></code></li><li class="L5"><code class="language-c"><span class="pln">          inet addr</span><span class="pun">:</span><span class="lit">127.0</span><span class="pun">.</span><span class="lit">0.1</span><span class="pln">  </span><span class="typ">Mask</span><span class="pun">:</span><span class="lit">255.0</span><span class="pun">.</span><span class="lit">0.0</span></code></li><li class="L6"><code class="language-c"><span class="pln">          inet6 addr</span><span class="pun">:</span><span class="pln"> </span><span class="pun">::</span><span class="lit">1</span><span class="pun">/</span><span class="lit">128</span><span class="pln"> </span><span class="typ">Scope</span><span class="pun">:</span><span class="typ">Host</span></code></li><li class="L7"><code class="language-c"><span class="pln">          UP LOOPBACK RUNNING  MTU</span><span class="pun">:</span><span class="lit">65536</span><span class="pln">  </span><span class="typ">Metric</span><span class="pun">:</span><span class="lit">1</span></code></li><li class="L8"><code class="language-c"><span class="pln">          RX packets</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> errors</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> dropped</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> overruns</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> frame</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L9"><code class="language-c"><span class="pln">          TX packets</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> errors</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> dropped</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> overruns</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> carrier</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L0"><code class="language-c"><span class="pln">          collisions</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> txqueuelen</span><span class="pun">:</span><span class="lit">1</span></code></li><li class="L1"><code class="language-c"><span class="pln">          RX bytes</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> </span><span class="pun">(</span><span class="lit">0.0</span><span class="pln"> B</span><span class="pun">)</span><span class="pln">  TX bytes</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> </span><span class="pun">(</span><span class="lit">0.0</span><span class="pln"> B</span><span class="pun">)</span></code></li><li class="L2"><code class="language-c"></code></li><li class="L3"><code class="language-c"><span class="com">#将container2加入到frontend网络中</span></code></li><li class="L4"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> docker network connect frontend container2</span></code></li><li class="L5"><code class="language-c"><span class="com">#docker network connect命令会在所连接的容器中创建新的网卡，以完成其与所指定网络的连接。</span></code></li><li class="L6"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> docker exec container2 ifconfig</span></code></li><li class="L7"><code class="language-c"><span class="pln">eth0      </span><span class="typ">Link</span><span class="pln"> encap</span><span class="pun">:</span><span class="typ">Ethernet</span><span class="pln">  </span><span class="typ">HWaddr</span><span class="pln"> </span><span class="lit">02</span><span class="pun">:</span><span class="lit">42</span><span class="pun">:</span><span class="pln">AC</span><span class="pun">:</span><span class="lit">12</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">03</span></code></li><li class="L8"><code class="language-c"><span class="pln">          inet addr</span><span class="pun">:</span><span class="lit">172.18</span><span class="pun">.</span><span class="lit">0.3</span><span class="pln">  </span><span class="typ">Bcast</span><span class="pun">:</span><span class="lit">0.0</span><span class="pun">.</span><span class="lit">0.0</span><span class="pln">  </span><span class="typ">Mask</span><span class="pun">:</span><span class="lit">255.255</span><span class="pun">.</span><span class="lit">0.0</span></code></li><li class="L9"><code class="language-c"><span class="pln">          inet6 addr</span><span class="pun">:</span><span class="pln"> fe80</span><span class="pun">::</span><span class="lit">42</span><span class="pun">:</span><span class="pln">acff</span><span class="pun">:</span><span class="pln">fe12</span><span class="pun">:</span><span class="lit">3</span><span class="pun">/</span><span class="lit">64</span><span class="pln"> </span><span class="typ">Scope</span><span class="pun">:</span><span class="typ">Link</span></code></li><li class="L0"><code class="language-c"><span class="pln">          UP BROADCAST RUNNING MULTICAST  MTU</span><span class="pun">:</span><span class="lit">1500</span><span class="pln">  </span><span class="typ">Metric</span><span class="pun">:</span><span class="lit">1</span></code></li><li class="L1"><code class="language-c"><span class="pln">          RX packets</span><span class="pun">:</span><span class="lit">317</span><span class="pln"> errors</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> dropped</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> overruns</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> frame</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L2"><code class="language-c"><span class="pln">          TX packets</span><span class="pun">:</span><span class="lit">572</span><span class="pln"> errors</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> dropped</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> overruns</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> carrier</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L3"><code class="language-c"><span class="pln">          collisions</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> txqueuelen</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L4"><code class="language-c"><span class="pln">          RX bytes</span><span class="pun">:</span><span class="lit">29250</span><span class="pln"> </span><span class="pun">(</span><span class="lit">28.5</span><span class="pln"> </span><span class="typ">KiB</span><span class="pun">)</span><span class="pln">  TX bytes</span><span class="pun">:</span><span class="lit">54296</span><span class="pln"> </span><span class="pun">(</span><span class="lit">53.0</span><span class="pln"> </span><span class="typ">KiB</span><span class="pun">)</span></code></li><li class="L5"><code class="language-c"><span class="pln">eth1      </span><span class="typ">Link</span><span class="pln"> encap</span><span class="pun">:</span><span class="typ">Ethernet</span><span class="pln">  </span><span class="typ">HWaddr</span><span class="pln"> </span><span class="lit">02</span><span class="pun">:</span><span class="lit">42</span><span class="pun">:</span><span class="pln">AC</span><span class="pun">:</span><span class="lit">13</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">03</span></code></li><li class="L6"><code class="language-c"><span class="pln">          inet addr</span><span class="pun">:</span><span class="lit">172.19</span><span class="pun">.</span><span class="lit">0.3</span><span class="pln">  </span><span class="typ">Bcast</span><span class="pun">:</span><span class="lit">0.0</span><span class="pun">.</span><span class="lit">0.0</span><span class="pln">  </span><span class="typ">Mask</span><span class="pun">:</span><span class="lit">255.255</span><span class="pun">.</span><span class="lit">0.0</span></code></li><li class="L7"><code class="language-c"><span class="pln">          inet6 addr</span><span class="pun">:</span><span class="pln"> fe80</span><span class="pun">::</span><span class="lit">42</span><span class="pun">:</span><span class="pln">acff</span><span class="pun">:</span><span class="pln">fe13</span><span class="pun">:</span><span class="lit">3</span><span class="pun">/</span><span class="lit">64</span><span class="pln"> </span><span class="typ">Scope</span><span class="pun">:</span><span class="typ">Link</span></code></li><li class="L8"><code class="language-c"><span class="pln">          UP BROADCAST RUNNING MULTICAST  MTU</span><span class="pun">:</span><span class="lit">1500</span><span class="pln">  </span><span class="typ">Metric</span><span class="pun">:</span><span class="lit">1</span></code></li><li class="L9"><code class="language-c"><span class="pln">          RX packets</span><span class="pun">:</span><span class="lit">9</span><span class="pln"> errors</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> dropped</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> overruns</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> frame</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L0"><code class="language-c"><span class="pln">          TX packets</span><span class="pun">:</span><span class="lit">9</span><span class="pln"> errors</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> dropped</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> overruns</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> carrier</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L1"><code class="language-c"><span class="pln">          collisions</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> txqueuelen</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L2"><code class="language-c"><span class="pln">          RX bytes</span><span class="pun">:</span><span class="lit">746</span><span class="pln"> </span><span class="pun">(</span><span class="lit">746.0</span><span class="pln"> B</span><span class="pun">)</span><span class="pln">  TX bytes</span><span class="pun">:</span><span class="lit">746</span><span class="pln"> </span><span class="pun">(</span><span class="lit">746.0</span><span class="pln"> B</span><span class="pun">)</span></code></li><li class="L3"><code class="language-c"><span class="pln">lo        </span><span class="typ">Link</span><span class="pln"> encap</span><span class="pun">:</span><span class="typ">Local</span><span class="pln"> </span><span class="typ">Loopback</span></code></li><li class="L4"><code class="language-c"><span class="pln">          inet addr</span><span class="pun">:</span><span class="lit">127.0</span><span class="pun">.</span><span class="lit">0.1</span><span class="pln">  </span><span class="typ">Mask</span><span class="pun">:</span><span class="lit">255.0</span><span class="pun">.</span><span class="lit">0.0</span></code></li><li class="L5"><code class="language-c"><span class="pln">          inet6 addr</span><span class="pun">:</span><span class="pln"> </span><span class="pun">::</span><span class="lit">1</span><span class="pun">/</span><span class="lit">128</span><span class="pln"> </span><span class="typ">Scope</span><span class="pun">:</span><span class="typ">Host</span></code></li><li class="L6"><code class="language-c"><span class="pln">          UP LOOPBACK RUNNING  MTU</span><span class="pun">:</span><span class="lit">65536</span><span class="pln">  </span><span class="typ">Metric</span><span class="pun">:</span><span class="lit">1</span></code></li><li class="L7"><code class="language-c"><span class="pln">          RX packets</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> errors</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> dropped</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> overruns</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> frame</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L8"><code class="language-c"><span class="pln">          TX packets</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> errors</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> dropped</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> overruns</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> carrier</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L9"><code class="language-c"><span class="pln">          collisions</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> txqueuelen</span><span class="pun">:</span><span class="lit">1</span></code></li><li class="L0"><code class="language-c"><span class="pln">          RX bytes</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> </span><span class="pun">(</span><span class="lit">0.0</span><span class="pln"> B</span><span class="pun">)</span><span class="pln">  TX bytes</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> </span><span class="pun">(</span><span class="lit">0.0</span><span class="pln"> B</span><span class="pun">)</span></code></li><li class="L1"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span></code></li><li class="L2"><code class="language-c"><span class="com">#测试container2与container3的连通性后，可以发现两者已经互通</span></code></li><li class="L3"><code class="language-c"><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> docker exec container2 ping </span><span class="lit">172.19</span><span class="pun">.</span><span class="lit">0.2</span></code></li><li class="L4"><code class="language-c"><span class="pln">PING </span><span class="lit">172.19</span><span class="pun">.</span><span class="lit">0.2</span><span class="pln"> </span><span class="pun">(</span><span class="lit">172.19</span><span class="pun">.</span><span class="lit">0.2</span><span class="pun">):</span><span class="pln"> </span><span class="lit">56</span><span class="pln"> data bytes</span></code></li><li class="L5"><code class="language-c"><span class="lit">64</span><span class="pln"> bytes from </span><span class="lit">172.19</span><span class="pun">.</span><span class="lit">0.2</span><span class="pun">:</span><span class="pln"> seq</span><span class="pun">=</span><span class="lit">0</span><span class="pln"> ttl</span><span class="pun">=</span><span class="lit">64</span><span class="pln"> time</span><span class="pun">=</span><span class="lit">0.063</span><span class="pln"> ms</span></code></li><li class="L6"><code class="language-c"><span class="lit">64</span><span class="pln"> bytes from </span><span class="lit">172.19</span><span class="pun">.</span><span class="lit">0.2</span><span class="pun">:</span><span class="pln"> seq</span><span class="pun">=</span><span class="lit">1</span><span class="pln"> ttl</span><span class="pun">=</span><span class="lit">64</span><span class="pln"> time</span><span class="pun">=</span><span class="lit">0.069</span><span class="pln"> ms</span></code></li><li class="L7"><code class="language-c"><span class="pun">^</span><span class="pln">C</span></code></li><li class="L8"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span></code></li></ol></pre></div><div><br></div><div><i>关于Linux bridge、Veth设备对和network namespace的补充：</i></div></div><div><div><ul><li>Linux Bridge ，即Linux网桥设备，是Linux提供的一种虚拟网络设备之一。其工作方式非常类似于物理的网络交换机设备。Linux Bridge可以工作在二层，也可以工作在三层，默认工作在二层。工作在二层时，可以在同一网络的不同主机间转发以太网报文；一旦你给一个Linux Bridge分配了IP地址，也就开启了该Bridge的三层工作模式。在Linux下，你可以用 iproute2 工具包或brctl命令对Linux bridge进行管理。</li><li>VETH(Virtual Ethernet )虚拟网络设备对是Linux提供的另外一种特殊的网络设备，它总是成对出现，要创建就创建一个pair。一个Pair中的veth就像一个网络线缆的两个端点，数据从一个端点进入，必然从另外一个端点流出。每个veth都可以被赋予IP地址，并参与三层网络路由过程。两个不同命名空间默认是给的，要实现通信，只能使用一对Veth设备对，各自放在两个network namespace。</li><li>Network namespace，网络名字空间，允许你在Linux创建相互隔离的网络视图，每个网络名字空间都有独立的网络配置，比如：网络设备、路由表等。新建的网络名字空间与主机默认网络名字空间之间是隔离的。我们平时默认操作的是主机的默认网络名字空间。</li></ul></div></div><div><br></div><div>可以使用网络命名空间和Veth模拟Docker的网络，两个容器互通。</div><div><br></div><div><div><i>Docker0软网桥的“双重身份”，docker0将在这两种身份间来回切换。</i></div><div>1、从容器视角，网桥（交换机）身份</div><div>docker0对于通过veth pair“插在”网桥上的container1和container2来说，首先就是一个二层的交换机的角色，在二层转发数据包；同时由于docker0自身也具有mac地址（这个与纯二层交换机不同），并且绑定了ip(这里是172.17.0.1)，因此在 container中还作为container default路由的默认Gateway而存在。</div><div>2、从宿主机视角，网卡身份</div><div>所有docker0从veth（只是个二层的存在，没有绑定ipv4地址）接收到的数据包都会被宿主机看成从docker0这块网卡（第二个身份，绑定172.17.0.1)接收进来的数据包，尤其是在进入三层时，宿主机上的iptables就会对docker0进来的数据包按照rules进行相应处理（通过一些内核网络设置也可以忽略docker0 brigde数据的处理）。</div><div><br></div></div><div><i>Docker针对端口映射前后有两种方案：</i></div><div><ul><li>一种是1.7版本之前docker-proxy+iptables DNAT 的方式；</li><li>另一种则是1.7版本(及之后)提供的完全由iptables DNAT实现的端口映射。</li></ul>不过在目前docker 1.9.1中，前一种方式依旧是默认方式。但是从Docker 1.7版本起，Docker提供了一个配置项：–userland-proxy，以让Docker用户决定是否启用docker-proxy，默认为true，即启用docker-proxy。<br></div><div><div><div>我们修改了一下/etc/default/docker配置，为DOCKER_OPTS增加一个option: –userland-proxy=false。</div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">DOCKER_OPTS</span><span class="pun">=</span><span class="str">"--dns 8.8.8.8 --dns 8.8.4.4 --userland-proxy=false"</span></code></li></ol></pre></div></div><div>由于每个做端口映射的Container都要启动至少一个docker proxy与之配合，一旦运行的container增多，那么多个docker proxy进程对资源的消耗将是大大的。因此docker engine在docker 1.7之后提供了完全由iptables DNAT实现的端口映射，无需再启动docker proxy进程。我们只需修改一下docker engine的启动配置即可。</div><div><div>Docker安装完成后，将默认在宿主机系统上增加一些iptables规则，以用于Docker容器和容器之间以及和外界的通信，可以使用iptables-save命令查看。其中nat标上的POSTROUTING链有这么一条规则：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">-</span><span class="pln">A POSTROUTING </span><span class="pun">-</span><span class="pln">s </span><span class="lit">172.17</span><span class="pun">.</span><span class="lit">0.0</span><span class="pun">/</span><span class="lit">16</span><span class="pln"> </span><span class="pun">!</span><span class="pln"> </span><span class="pun">-</span><span class="pln">o docker0 </span><span class="pun">-</span><span class="pln">j MASQUERADE</span></code></li></ol></pre></div><div><br></div></div></div></div><div><i>同宿主机容器互联</i></div><div>容器间通信由Docker daemon的启动参数-icc控制。-icc为true，保证默认可以互联。但为了保证容器以及主机的安全，-icc通常设置为false。这种情况下该如何解决容器间的通信呢？最长用的方式是端口映射，这种方式不够安全，而且需要经过NAT，效率也不高。这时候就需要Docker连接（link）。Docker的连接系统可以在两个容器之间建立一个安全的通道，使得接受容器（如Web容器）可以通过通道得到容器（如数据库服务）指定的相关信息。<br></div><div><br></div><div><div>在Docker1.9版本后，网络操作独立出命令组（docker network），link方式也与原来不同了。Docker为了向上兼容，若容器使用默认的bridge模式网络，则会默认使用传统的link系统；而使用用户自定义的网络，则会使用新的link系统。</div><div><ul><li>传统link方式：<br></li></ul><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">docker run </span><span class="pun">-</span><span class="pln">d </span><span class="pun">--</span><span class="pln">name db training</span><span class="pun">/</span><span class="pln">postgres</span></code></li><li class="L1"><code class="language-c"><span class="pln">docker run </span><span class="pun">-</span><span class="pln">d </span><span class="pun">-</span><span class="pln">P </span><span class="pun">--</span><span class="pln">name web </span><span class="pun">--</span><span class="pln">link db</span><span class="pun">:</span><span class="pln">webdb training</span><span class="pun">/</span><span class="pln">webapp python app</span><span class="pun">.</span><span class="pln">py</span></code></li></ol></pre></div><div>--link格式是--link 容器名:别名。</div></div><div>那么--link到底做了什么呢？</div><div>1. 设置接受容器的环境变量。</div><div>我们发现在接收容器中有一组关于容器db的环境变量。有几个link，就多几组。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">WEBDB_PORT_8080_TCP_ADDR</span><span class="pun">=</span><span class="lit">172.17</span><span class="pun">.</span><span class="lit">0.82</span></code></li><li class="L1"><code class="language-c"><span class="pln">WEBDB_PORT_8080_TCP_PORT</span><span class="pun">=</span><span class="lit">8080</span></code></li><li class="L2"><code class="language-c"><span class="pln">WEBDB_PORT_8080_TCP_PROTO</span><span class="pun">=</span><span class="pln">tcp</span></code></li><li class="L3"><code class="language-c"><span class="pln">WEBDB_PORT_8080_TCP</span><span class="pun">=</span><span class="pln">tcp</span><span class="pun">:</span><span class="com">//172.17.0.82:8080</span></code></li><li class="L4"><code class="language-c"><span class="pln">WEBDB_PORT</span><span class="pun">=</span><span class="pln">tcp</span><span class="pun">:</span><span class="com">//172.17.0.82:8080</span></code></li></ol></pre></div><div>2. 更新接收容器的/etc/hosts文件</div></div><div>Docker容器的IP地址是不固定的，当容器重启后，IP地址可能就和之前不同了，但是接收容器中的这一组环境变量还是不变。因此，Docker的link操作除了在将link信息保存在接收容器中之外，还在/etc/hosts中添加了一项——源容器的IP和别名（--link参数中指定的别名），以用来解决源容器的IP地址，当容器重启后会自动更新接收容器的/etc/hosts文件。</div><div>3. 紧靠上面两条还不能互相通信。将Docker daemon的-icc参数设置为false时，容器间的同心就被禁止了。这时Docker daemon为了保证两个容器的通信，添加特定的iptables规则。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">-</span><span class="pln">A DOCKER </span><span class="pun">-</span><span class="pln">s </span><span class="lit">172.17</span><span class="pun">.</span><span class="lit">0.2</span><span class="pun">/</span><span class="lit">32</span><span class="pln"> </span><span class="pun">-</span><span class="pln">d </span><span class="lit">172.17</span><span class="pun">.</span><span class="lit">0.1</span><span class="pun">/</span><span class="lit">32</span><span class="pln"> </span><span class="pun">-</span><span class="pln">i docker0 </span><span class="pun">-</span><span class="pln">o docker0 </span><span class="pun">-</span><span class="pln">p tcp </span><span class="pun">-</span><span class="pln">m tcp </span><span class="pun">--</span><span class="pln">dport </span><span class="lit">5432</span><span class="pln"> </span><span class="pun">-</span><span class="pln">j ACCEPT</span></code></li><li class="L1"><code class="language-c"><span class="pun">-</span><span class="pln">A DOCKER </span><span class="pun">-</span><span class="pln">s </span><span class="lit">172.17</span><span class="pun">.</span><span class="lit">0.1</span><span class="pun">/</span><span class="lit">32</span><span class="pln"> </span><span class="pun">-</span><span class="pln">d </span><span class="lit">172.17</span><span class="pun">.</span><span class="lit">0.2</span><span class="pun">/</span><span class="lit">32</span><span class="pln"> </span><span class="pun">-</span><span class="pln">i docker0 </span><span class="pun">-</span><span class="pln">o docker0 </span><span class="pun">-</span><span class="pln">p tcp </span><span class="pun">-</span><span class="pln">m tcp </span><span class="pun">--</span><span class="pln">dport </span><span class="lit">5432</span><span class="pln"> </span><span class="pun">-</span><span class="pln">j ACCEPT</span></code></li></ol></pre></div><div>这两条规则确保了web容器和db容器在db容器的tcp/5432端口上通信的流量不会被丢弃掉，从而保证了接受容器可以顺利地从源容器中获取想要的数据。</div></div><ul><li>新的link方式：</li></ul></div></div><div>Docker1.9后为用户自定义网络提供了DNS自动名字解析、同一个网络中容器间的隔离、可以动态加入或者退出多个网络、支持--link为源容器设定别名等服务。</div><div><div>新的网络模型中，link不要求源容器已经创建或者启动，只是在当前网络给源容器起了个别名，并且这个别名只对接收容器有效。</div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost docker</span><span class="pun">]#</span><span class="pln"> docker network create isolated_nw</span></code></li><li class="L1"><code class="language-c"><span class="pln">fe1a111931fbfe06c7676d27f51f8795c6e1cbed2ae07f8192da664691e307ac</span></code></li><li class="L2"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost docker</span><span class="pun">]#</span><span class="pln"> docker run </span><span class="pun">--</span><span class="pln">net</span><span class="pun">=</span><span class="pln">isolated_nw </span><span class="pun">-</span><span class="pln">it </span><span class="pun">--</span><span class="pln">name</span><span class="pun">=</span><span class="pln">container1 </span><span class="pun">--</span><span class="pln">link container2</span><span class="pun">:</span><span class="pln">c2 busybox</span></code></li><li class="L3"><code class="language-c"><span class="pun">/</span><span class="pln"> </span><span class="com"># [root@localhost docker]#</span></code></li><li class="L4"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost docker</span><span class="pun">]#</span><span class="pln"> docker run </span><span class="pun">--</span><span class="pln">net</span><span class="pun">=</span><span class="pln">isolated_nw </span><span class="pun">-</span><span class="pln">itd </span><span class="pun">--</span><span class="pln">name</span><span class="pun">=</span><span class="pln">container2 busybox</span></code></li><li class="L5"><code class="language-c"><span class="lit">0b5cc8ee03c6c20418c5c42a0bead204cc4fbfd8ce05396e79bf88fffb3c9759</span></code></li><li class="L6"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost docker</span><span class="pun">]#</span><span class="pln"> docker exec container1 ping c2</span></code></li><li class="L7"><code class="language-c"><span class="pln">PING c2 </span><span class="pun">(</span><span class="lit">172.20</span><span class="pun">.</span><span class="lit">0.3</span><span class="pun">):</span><span class="pln"> </span><span class="lit">56</span><span class="pln"> data bytes</span></code></li><li class="L8"><code class="language-c"><span class="lit">64</span><span class="pln"> bytes from </span><span class="lit">172.20</span><span class="pun">.</span><span class="lit">0.3</span><span class="pun">:</span><span class="pln"> seq</span><span class="pun">=</span><span class="lit">0</span><span class="pln"> ttl</span><span class="pun">=</span><span class="lit">64</span><span class="pln"> time</span><span class="pun">=</span><span class="lit">0.061</span><span class="pln"> ms</span></code></li><li class="L9"><code class="language-c"><span class="lit">64</span><span class="pln"> bytes from </span><span class="lit">172.20</span><span class="pun">.</span><span class="lit">0.3</span><span class="pun">:</span><span class="pln"> seq</span><span class="pun">=</span><span class="lit">1</span><span class="pln"> ttl</span><span class="pun">=</span><span class="lit">64</span><span class="pln"> time</span><span class="pun">=</span><span class="lit">0.065</span><span class="pln"> ms</span></code></li><li class="L0"><code class="language-c"><span class="lit">64</span><span class="pln"> bytes from </span><span class="lit">172.20</span><span class="pun">.</span><span class="lit">0.3</span><span class="pun">:</span><span class="pln"> seq</span><span class="pun">=</span><span class="lit">2</span><span class="pln"> ttl</span><span class="pun">=</span><span class="lit">64</span><span class="pln"> time</span><span class="pun">=</span><span class="lit">0.103</span><span class="pln"> ms</span></code></li><li class="L1"><code class="language-c"><span class="pun">^</span><span class="pln">C</span></code></li><li class="L2"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost docker</span><span class="pun">]#</span></code></li></ol></pre></div><div>另外在container1下查看/etc/hosts文件后，发现里面并没有container2的相关信息，这表新的link系统的实现与原来的配置hosts文件的方式并不相同。实际上，Docker是通过DNS解析的方式提供名字和别名的解析。</div></div><div><br></div><div><i>跨主机集群容器网络</i></div><div><div>使用4种网络驱动的具体情况如下：</div><div><ul><li>使用host确定可以让容器与宿主机公用一个网络栈，这么做看似解决了网络问题，可实际上并未使用network namespace的隔离，缺乏安全性。</li><li>使用Docker默认的bridge驱动，容器没有对外IP，只能通过NAT来实现对外通信。这种方式不能解决跨主机容器间直接通信的问题。</li><li>使用overlay驱动，可以用于支持跨主机的网络通信，但必须要配合Swarm进行配置和使用才能实现跨主机的网络通信。在Docker 1.9版本之前，社区中就已经有许多第三方的工具或方法尝试解决这个问题，例如Macvlan、Pipework、Flannel、Weave等。虽然这些方案在实现细节上存在很多差异，但其思路无非分为两种：二层VLAN网络和Overlay网络。</li><li>使用null驱动，实际上不进行任何网络设置。</li></ul></div></div><div><br></div><div><div>Docker 1.9以后再讨论容器网络方案（因为Docker增加了Overlay驱动插件，第三方可以加入），不仅要看实现方式，而且还要看网络模型的“站队”，比如说你到底是要用Docker原生的 “CNM”，还是CoreOS，谷歌主推的“CNI”。</div><div>Docker Libnetwork Container Network Model（CNM）阵营</div><div>Docker Swarm overlay</div><div>Macvlan &amp; IP network drivers</div><div>Calico</div><div>Contiv（from Cisco）</div><div><br></div><div>Docker Libnetwork的优势就是原生，而且和Docker容器生命周期结合紧密；缺点也可以理解为是原生，被Docker“绑架”。</div><div>Container Network Interface（CNI）阵营</div><div>Kubernetes</div><div>Weave</div><div>Macvlan</div><div>Flannel</div><div>Calico</div><div>Contiv</div><div>Mesos CNI</div><div>CNI的优势是兼容其他容器技术（e.g. rkt）及上层编排系统（Kuberneres &amp; Mesos)，而且社区活跃势头迅猛，Kubernetes加上CoreOS主推；缺点是非Docker原生。</div></div><div><br></div><div>跨主机网络通信方案：</div><div><br></div><div><div>1. 利用虚拟网桥将Docker容器桥接到本地网络</div><div><div>&nbsp; &nbsp;&nbsp;本地网络为10.10.103.0/24，网关为10.10.103.254，要将容器test1的IP地址配置为10.10.103.91/24（网卡为eth0）：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> ip addr</span></code></li><li class="L1"><code class="language-c"><span class="lit">1</span><span class="pun">:</span><span class="pln"> lo</span><span class="pun">:</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">LOOPBACK</span><span class="pun">,</span><span class="pln">UP</span><span class="pun">,</span><span class="pln">LOWER_UP</span><span class="pun">&gt;</span><span class="pln"> mtu </span><span class="lit">65536</span><span class="pln"> qdisc noqueue state UNKNOWN qlen </span><span class="lit">1</span></code></li><li class="L2"><code class="language-c"><span class="pln">    link</span><span class="pun">/</span><span class="pln">loopback </span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pln"> brd </span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">00</span></code></li><li class="L3"><code class="language-c"><span class="pln">    inet </span><span class="lit">127.0</span><span class="pun">.</span><span class="lit">0.1</span><span class="pun">/</span><span class="lit">8</span><span class="pln"> scope host lo</span></code></li><li class="L4"><code class="language-c"><span class="pln">       valid_lft forever preferred_lft forever</span></code></li><li class="L5"><code class="language-c"><span class="pln">    inet6 </span><span class="pun">::</span><span class="lit">1</span><span class="pun">/</span><span class="lit">128</span><span class="pln"> scope host</span></code></li><li class="L6"><code class="language-c"><span class="pln">       valid_lft forever preferred_lft forever</span></code></li><li class="L7"><code class="language-c"><span class="lit">2</span><span class="pun">:</span><span class="pln"> eth0</span><span class="pun">:</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">BROADCAST</span><span class="pun">,</span><span class="pln">MULTICAST</span><span class="pun">,</span><span class="pln">UP</span><span class="pun">,</span><span class="pln">LOWER_UP</span><span class="pun">&gt;</span><span class="pln"> mtu </span><span class="lit">1500</span><span class="pln"> qdisc pfifo_fast state UP qlen </span><span class="lit">1000</span></code></li><li class="L8"><code class="language-c"><span class="pln">    link</span><span class="pun">/</span><span class="pln">ether </span><span class="lit">52</span><span class="pun">:</span><span class="lit">54</span><span class="pun">:</span><span class="lit">00</span><span class="pun">:</span><span class="lit">88</span><span class="pun">:</span><span class="lit">15</span><span class="pun">:</span><span class="pln">b6 brd ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span></code></li><li class="L9"><code class="language-c"><span class="pln">    inet </span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.15</span><span class="pun">/</span><span class="lit">24</span><span class="pln"> brd </span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.255</span><span class="pln"> scope global dynamic eth0</span></code></li><li class="L0"><code class="language-c"><span class="pln">       valid_lft </span><span class="lit">85824sec</span><span class="pln"> preferred_lft </span><span class="lit">85824sec</span></code></li><li class="L1"><code class="language-c"><span class="pln">    inet6 fe80</span><span class="pun">::</span><span class="lit">5054</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">fe88</span><span class="pun">:</span><span class="lit">15b6</span><span class="pun">/</span><span class="lit">64</span><span class="pln"> scope link</span></code></li><li class="L2"><code class="language-c"><span class="pln">       valid_lft forever preferred_lft forever</span></code></li><li class="L3"><code class="language-c"><span class="lit">3</span><span class="pun">:</span><span class="pln"> docker0</span><span class="pun">:</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">NO</span><span class="pun">-</span><span class="pln">CARRIER</span><span class="pun">,</span><span class="pln">BROADCAST</span><span class="pun">,</span><span class="pln">MULTICAST</span><span class="pun">,</span><span class="pln">UP</span><span class="pun">&gt;</span><span class="pln"> mtu </span><span class="lit">1500</span><span class="pln"> qdisc noqueue state DOWN</span></code></li><li class="L4"><code class="language-c"><span class="pln">    link</span><span class="pun">/</span><span class="pln">ether </span><span class="lit">02</span><span class="pun">:</span><span class="lit">42</span><span class="pun">:</span><span class="lit">13</span><span class="pun">:</span><span class="lit">40</span><span class="pun">:</span><span class="lit">9f</span><span class="pun">:</span><span class="lit">77</span><span class="pln"> brd ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span><span class="pun">:</span><span class="pln">ff</span></code></li><li class="L5"><code class="language-c"><span class="pln">    inet </span><span class="lit">172.17</span><span class="pun">.</span><span class="lit">0.1</span><span class="pun">/</span><span class="lit">16</span><span class="pln"> scope global docker0</span></code></li><li class="L6"><code class="language-c"><span class="pln">       valid_lft forever preferred_lft forever</span></code></li><li class="L7"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span></code></li><li class="L8"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> </span><span class="lit">1.</span><span class="pln"> </span><span class="pun">启动容器，设置</span><span class="pln">net</span><span class="pun">=</span><span class="pln">none</span></code></li><li class="L9"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> docker run </span><span class="pun">-</span><span class="pln">itd </span><span class="pun">--</span><span class="pln">name test1 </span><span class="pun">--</span><span class="pln">net</span><span class="pun">=</span><span class="pln">none centos </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">bash</span></code></li><li class="L0"><code class="language-c"><span class="lit">3474ee9a3fde4f473c38af597a7f355be6b3c2148c5a4766ca6ce55c89954122</span></code></li><li class="L1"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span></code></li><li class="L2"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="lit">2.</span><span class="pln"> </span><span class="pun">创建供容器使用的网桥</span><span class="pln">br0</span></code></li><li class="L3"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> brctl addbr br0</span></code></li><li class="L4"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> ip link </span><span class="typ">set</span><span class="pln"> br0 up</span></code></li><li class="L5"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="lit">3.</span><span class="pln"> </span><span class="pun">将主机</span><span class="pln">eth0</span><span class="pun">桥接到</span><span class="pln">br0</span><span class="pun">上，并把</span><span class="pln">eth0</span><span class="pun">的</span><span class="pln">IP</span><span class="pun">配置在</span><span class="pln">br0</span><span class="pun">上。由于是远程操作，会导致网络断开，这里放在一行。</span></code></li><li class="L6"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> ip addr add </span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.15</span><span class="pun">/</span><span class="lit">24</span><span class="pln"> dev br0</span><span class="pun">;</span><span class="pln"> \</span></code></li><li class="L7"><code class="language-c"><span class="pln">    ip addr del </span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.16</span><span class="pun">/</span><span class="lit">24</span><span class="pln"> dev eth0</span><span class="pun">;</span><span class="pln"> \</span></code></li><li class="L8"><code class="language-c"><span class="pln">    brctl addif br0 eth0</span><span class="pun">;</span><span class="pln"> \</span></code></li><li class="L9"><code class="language-c"><span class="pln">    ip route del </span><span class="kwd">default</span><span class="pun">;</span><span class="pln"> \</span></code></li><li class="L0"><code class="language-c"><span class="pln">    ip route add </span><span class="kwd">default</span><span class="pln"> via </span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.255</span><span class="pln"> dev br0</span></code></li><li class="L1"><code class="language-c"><span class="pln">RTNETLINK answers</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Cannot</span><span class="pln"> assign requested address</span></code></li><li class="L2"><code class="language-c"><span class="pln">RTNETLINK answers</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Network</span><span class="pln"> is unreachable</span></code></li><li class="L3"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span></code></li><li class="L4"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span></code></li><li class="L5"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="lit">4.</span><span class="pln"> </span><span class="pun">找到</span><span class="pln">test1</span><span class="pun">的</span><span class="pln">PID</span><span class="pun">，保存到</span><span class="pln">pid</span><span class="pun">中</span></code></li><li class="L6"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> pid</span><span class="pun">=</span><span class="pln">$</span><span class="pun">(</span><span class="pln">docker inspect </span><span class="pun">--</span><span class="pln">format </span><span class="str">'{{.State.Pid}}'</span><span class="pln"> test1</span><span class="pun">)</span></code></li><li class="L7"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> </span><span class="lit">5.</span><span class="pln"> </span><span class="pun">将容器的</span><span class="pln">network </span><span class="kwd">namespace</span><span class="pun">添加到/</span><span class="pln">var</span><span class="pun">/</span><span class="pln">run</span><span class="pun">/</span><span class="pln">netns</span><span class="pun">目录下</span></code></li><li class="L8"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> mkdir </span><span class="pun">-</span><span class="pln">p </span><span class="pun">/</span><span class="pln">var</span><span class="pun">/</span><span class="pln">run</span><span class="pun">/</span><span class="pln">netns</span></code></li><li class="L9"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> ln </span><span class="pun">-</span><span class="pln">s </span><span class="pun">/</span><span class="pln">proc</span><span class="pun">/</span><span class="pln">$pid</span><span class="pun">/</span><span class="pln">ns</span><span class="pun">/</span><span class="pln">net </span><span class="pun">/</span><span class="pln">var</span><span class="pun">/</span><span class="pln">run</span><span class="pun">/</span><span class="pln">netns</span><span class="pun">/</span><span class="pln">$pid</span></code></li><li class="L0"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span></code></li><li class="L1"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="lit">6.</span><span class="pln"> </span><span class="pun">创建用于连接网桥和</span><span class="typ">Docker</span><span class="pun">容器的网卡设备，将</span><span class="pln">veth</span><span class="pun">-</span><span class="pln">a</span><span class="pun">连接到</span><span class="pln">br0</span><span class="pun">网桥上，</span><span class="pln">veth</span><span class="pun">-</span><span class="pln">b</span><span class="pun">放入容器的网络命名空间里</span></code></li><li class="L2"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> ip link add veth</span><span class="pun">-</span><span class="pln">a type veth peer name veth</span><span class="pun">-</span><span class="pln">b</span></code></li><li class="L3"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> brctl addif br0 veth</span><span class="pun">-</span><span class="pln">a</span></code></li><li class="L4"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> ip link </span><span class="typ">set</span><span class="pln"> veth</span><span class="pun">-</span><span class="pln">a up</span></code></li><li class="L5"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> </span><span class="lit">7.</span><span class="pln"> </span><span class="pun">将</span><span class="pln">veth</span><span class="pun">-</span><span class="pln">b</span><span class="pun">放到</span><span class="pln">test1</span><span class="pun">的</span><span class="pln">network </span><span class="kwd">namespace</span><span class="pun">中，重命名为</span><span class="pln">eth0</span><span class="pun">，并为其配置</span><span class="pln">IP</span><span class="pun">和默认路由</span></code></li><li class="L6"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> ip link </span><span class="typ">set</span><span class="pln"> veth</span><span class="pun">-</span><span class="pln">b netns $pid</span></code></li><li class="L7"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> ip netns exec $pid ip link </span><span class="typ">set</span><span class="pln"> dev veth</span><span class="pun">-</span><span class="pln">b name eth0</span></code></li><li class="L8"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> ip netns exec $pid ip link </span><span class="typ">set</span><span class="pln"> eth0 up</span></code></li><li class="L9"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> ip netns exec $pid ip addr add </span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.16</span><span class="pun">/</span><span class="lit">24</span><span class="pln"> dev eth0</span></code></li><li class="L0"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> ip netns exec $pid ip route add </span><span class="kwd">default</span><span class="pln"> via </span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.255</span></code></li><li class="L1"><code class="language-c"><span class="pln">RTNETLINK answers</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Network</span><span class="pln"> is unreachable</span></code></li><li class="L2"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span></code></li><li class="L3"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span></code></li><li class="L4"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#在容器内能拼通容器外宿主机</span></code></li><li class="L5"><code class="language-c"><span class="pun">[</span><span class="pln">root@7b7799616fa8 </span><span class="pun">/]#</span><span class="pln"> ping </span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.15</span></code></li><li class="L6"><code class="language-c"><span class="pln">PING </span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.15</span><span class="pln"> </span><span class="pun">(</span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.15</span><span class="pun">)</span><span class="pln"> </span><span class="lit">56</span><span class="pun">(</span><span class="lit">84</span><span class="pun">)</span><span class="pln"> bytes of data</span><span class="pun">.</span></code></li><li class="L7"><code class="language-c"><span class="lit">64</span><span class="pln"> bytes from </span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.15</span><span class="pun">:</span><span class="pln"> icmp_seq</span><span class="pun">=</span><span class="lit">1</span><span class="pln"> ttl</span><span class="pun">=</span><span class="lit">64</span><span class="pln"> time</span><span class="pun">=</span><span class="lit">0.199</span><span class="pln"> ms</span></code></li><li class="L8"><code class="language-c"><span class="lit">64</span><span class="pln"> bytes from </span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.15</span><span class="pun">:</span><span class="pln"> icmp_seq</span><span class="pun">=</span><span class="lit">2</span><span class="pln"> ttl</span><span class="pun">=</span><span class="lit">64</span><span class="pln"> time</span><span class="pun">=</span><span class="lit">0.063</span><span class="pln"> ms</span></code></li><li class="L9"><code class="language-c"><span class="lit">64</span><span class="pln"> bytes from </span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.15</span><span class="pun">:</span><span class="pln"> icmp_seq</span><span class="pun">=</span><span class="lit">3</span><span class="pln"> ttl</span><span class="pun">=</span><span class="lit">64</span><span class="pln"> time</span><span class="pun">=</span><span class="lit">0.059</span><span class="pln"> ms</span></code></li><li class="L0"><code class="language-c"><span class="pun">^</span><span class="pln">C</span></code></li><li class="L1"><code class="language-c"><span class="pun">---</span><span class="pln"> </span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.15</span><span class="pln"> ping statistics </span><span class="pun">---</span></code></li><li class="L2"><code class="language-c"><span class="lit">3</span><span class="pln"> packets transmitted</span><span class="pun">,</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> received</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">%</span><span class="pln"> packet loss</span><span class="pun">,</span><span class="pln"> time </span><span class="lit">2001ms</span></code></li><li class="L3"><code class="language-c"><span class="pln">rtt min</span><span class="pun">/</span><span class="pln">avg</span><span class="pun">/</span><span class="pln">max</span><span class="pun">/</span><span class="pln">mdev </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0.059</span><span class="pun">/</span><span class="lit">0.107</span><span class="pun">/</span><span class="lit">0.199</span><span class="pun">/</span><span class="lit">0.065</span><span class="pln"> ms</span></code></li><li class="L4"><code class="language-c"><span class="pun">[</span><span class="pln">root@7b7799616fa8 </span><span class="pun">/]#</span><span class="pln"> </span><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span></code></li><li class="L5"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span><span class="pln"> ping </span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.16</span></code></li><li class="L6"><code class="language-c"><span class="pln">PING </span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.16</span><span class="pln"> </span><span class="pun">(</span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.16</span><span class="pun">)</span><span class="pln"> </span><span class="lit">56</span><span class="pun">(</span><span class="lit">84</span><span class="pun">)</span><span class="pln"> bytes of data</span><span class="pun">.</span></code></li><li class="L7"><code class="language-c"><span class="lit">64</span><span class="pln"> bytes from </span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.16</span><span class="pun">:</span><span class="pln"> icmp_seq</span><span class="pun">=</span><span class="lit">1</span><span class="pln"> ttl</span><span class="pun">=</span><span class="lit">64</span><span class="pln"> time</span><span class="pun">=</span><span class="lit">0.039</span><span class="pln"> ms</span></code></li><li class="L8"><code class="language-c"><span class="lit">64</span><span class="pln"> bytes from </span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.16</span><span class="pun">:</span><span class="pln"> icmp_seq</span><span class="pun">=</span><span class="lit">2</span><span class="pln"> ttl</span><span class="pun">=</span><span class="lit">64</span><span class="pln"> time</span><span class="pun">=</span><span class="lit">0.069</span><span class="pln"> ms</span></code></li><li class="L9"><code class="language-c"><span class="lit">64</span><span class="pln"> bytes from </span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.16</span><span class="pun">:</span><span class="pln"> icmp_seq</span><span class="pun">=</span><span class="lit">3</span><span class="pln"> ttl</span><span class="pun">=</span><span class="lit">64</span><span class="pln"> time</span><span class="pun">=</span><span class="lit">0.056</span><span class="pln"> ms</span></code></li><li class="L0"><code class="language-c"><span class="pun">^</span><span class="pln">C</span></code></li><li class="L1"><code class="language-c"><span class="pun">---</span><span class="pln"> </span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.16</span><span class="pln"> ping statistics </span><span class="pun">---</span></code></li><li class="L2"><code class="language-c"><span class="lit">3</span><span class="pln"> packets transmitted</span><span class="pun">,</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> received</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">%</span><span class="pln"> packet loss</span><span class="pun">,</span><span class="pln"> time </span><span class="lit">1999ms</span></code></li><li class="L3"><code class="language-c"><span class="pln">rtt min</span><span class="pun">/</span><span class="pln">avg</span><span class="pun">/</span><span class="pln">max</span><span class="pun">/</span><span class="pln">mdev </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0.039</span><span class="pun">/</span><span class="lit">0.054</span><span class="pun">/</span><span class="lit">0.069</span><span class="pun">/</span><span class="lit">0.014</span><span class="pln"> ms</span></code></li><li class="L4"><code class="language-c"><span class="pun">[</span><span class="pln">root@localhost </span><span class="pun">~]#</span></code></li><li class="L5"><code class="language-c"><span class="pun">但在其他主机上拼不通这个</span><span class="pln">IP</span></code></li><li class="L6"><code class="language-c"><span class="pun">➜</span><span class="pln">  </span><span class="pun">~</span><span class="pln"> ping </span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.16</span></code></li><li class="L7"><code class="language-c"><span class="pln">PING </span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.16</span><span class="pln"> </span><span class="pun">(</span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.16</span><span class="pun">):</span><span class="pln"> </span><span class="lit">56</span><span class="pln"> data bytes</span></code></li><li class="L8"><code class="language-c"><span class="typ">Request</span><span class="pln"> timeout </span><span class="kwd">for</span><span class="pln"> icmp_seq </span><span class="lit">0</span></code></li><li class="L9"><code class="language-c"><span class="typ">Request</span><span class="pln"> timeout </span><span class="kwd">for</span><span class="pln"> icmp_seq </span><span class="lit">1</span></code></li><li class="L0"><code class="language-c"><span class="typ">Request</span><span class="pln"> timeout </span><span class="kwd">for</span><span class="pln"> icmp_seq </span><span class="lit">2</span></code></li><li class="L1"><code class="language-c"><span class="typ">Request</span><span class="pln"> timeout </span><span class="kwd">for</span><span class="pln"> icmp_seq </span><span class="lit">3</span></code></li><li class="L2"><code class="language-c"><span class="pun">^</span><span class="pln">C</span></code></li><li class="L3"><code class="language-c"><span class="pun">---</span><span class="pln"> </span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">2.16</span><span class="pln"> ping statistics </span><span class="pun">---</span></code></li><li class="L4"><code class="language-c"><span class="lit">8</span><span class="pln"> packets transmitted</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> packets received</span><span class="pun">,</span><span class="pln"> </span><span class="lit">100.0</span><span class="pun">%</span><span class="pln"> packet loss</span></code></li><li class="L5"><code class="language-c"><span class="pun">➜</span><span class="pln">  </span><span class="pun">~</span></code></li><li class="L6"><code class="language-c"><span class="pun">➜</span><span class="pln">  </span><span class="pun">~</span></code></li></ol></pre></div></div></div><div><br></div><div>2. 使用pipework工具配置各种类型网络</div><div>&nbsp; &nbsp; 2.1 将Docker容器与宿主机配置在本地的网络环境中</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="com">#下载pipework</span></code></li><li class="L1"><code class="language-c"><span class="pln">$ git clone https</span><span class="pun">:</span><span class="com">//github.com/jpetazzo/pipework</span></code></li><li class="L2"><code class="language-c"><span class="pln">$ </span><span class="pun">将</span><span class="pln">pipework</span><span class="pun">脚本放入</span><span class="pln">PATH</span><span class="pun">环境变量所指定的目录下，如/</span><span class="pln">usr</span><span class="pun">/</span><span class="pln">local</span><span class="pun">/</span><span class="pln">bin</span></code></li><li class="L3"><code class="language-c"><span class="pln">$ cp </span><span class="pun">~/</span><span class="pln">pipework</span><span class="pun">/</span><span class="pln">pipework </span><span class="pun">/</span><span class="pln">usr</span><span class="pun">/</span><span class="pln">local</span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span></code></li><li class="L4"><code class="language-c"><span class="pln">$</span></code></li><li class="L5"><code class="language-c"><span class="com"># 完成test1的配置</span></code></li><li class="L6"><code class="language-c"><span class="pln">$ pipework br0 test1 </span><span class="lit">10.10</span><span class="pun">.</span><span class="lit">103.95</span><span class="pun">/</span><span class="lit">24</span><span class="pun">@</span><span class="lit">10.10</span><span class="pun">.</span><span class="lit">103.254</span></code></li></ol></pre></div><div><div>这一行配置命令执行的操作如下：</div><div><ul><li>查看主机是否存在br0网桥，不存在就创建；</li><li>向容器test1中加入一块名为eth1的网卡，并设置IP地址为10.10.103.95/24；</li><li>若容器test1中已经有默认路由，则删掉，把10.10.103.254设为默认路由的网关；</li><li>将容器test1连接到之前创建的网桥br0上。</li></ul></div><div>这个过程和上面手动过程一样。</div></div></div><div><br></div><div>&nbsp; &nbsp;&nbsp;2.2 支持使用macvlan设备将容器连接到本地网络</div><div>也可以使用macvlan将Docker容器连接到本地网络，macvlan设备是从网卡上虚拟出一块新网卡，它和主网卡分别有不同的MAC地址，可以配置独立的IP地址。目前Docker网络本身不提供macvlan支持，但可以借助pipework来完成macvlan配置。<br></div><div><div>整个过程只需要执行一条命令：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">$ pipework eth0 test1 </span><span class="lit">10.10</span><span class="pun">.</span><span class="lit">103.95</span><span class="pun">/</span><span class="lit">24</span><span class="pun">@</span><span class="lit">10.10</span><span class="pun">.</span><span class="lit">103.254</span></code></li></ol></pre></div></div><div>这里，pipework的参数1 eth0是主机上的一块以太网卡，而非网桥。pipework采用macvlan设备作为test1容器的网卡，不会再创建veth pair设备来连接容器和网桥，操作过程如下：</div><div><ul><li>从主机的eth0上创建一块macvlan设备，将macvlan设备放入到test1容器中并命名为eth1；</li><li>为容器test1中新添加的网卡配置IP地址为10.10.103.95/24；</li><li>若容器test1中已经有默认路由，则删掉，把10.10.103.254设为默认路由的网关。</li></ul></div></div><div><br></div><div>&nbsp; &nbsp;&nbsp;3 通过外部DHCP服务器获取并设置容器的IP</div><div><div>如果Docker要介入的网络环境中存在DHCP服务器，那么Docker容器就可以通过发送DHCP请求获取新网卡的网络配置信息。具体用法是将pipework指令中的IP地址参数替换为dhcp，示例如下：</div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="com">#配置直接将宿主机eth0的macvlan的子设备作为容器test1的网卡，为新网卡设置IP，设置默认路由的网关</span></code></li><li class="L1"><code class="language-c"><span class="pln">pipework eth0 test1 </span><span class="lit">10.10</span><span class="pun">.</span><span class="lit">103.95</span><span class="pun">/</span><span class="lit">24</span><span class="pun">@</span><span class="lit">10.10</span><span class="pun">.</span><span class="lit">103.254</span></code></li><li class="L2"><code class="language-c"><span class="pun">通过主机网络中的</span><span class="pln">DHCP</span><span class="pun">服务器获取</span><span class="pln">IP</span><span class="pun">地址的命令</span></code></li><li class="L3"><code class="language-c"><span class="pln">pipework eth0 test1 dhcp</span></code></li></ol></pre></div><div><br></div></div><div>2 桥接</div><div><div>上面的3个方法都可以将Docker容器连接到本地网络环境中，之间可以直接通信。但这么做可能会出现下列问题：</div><div><ul><li>Docker容器占用主机网络的IP地址；</li><li>大量Docker容器可能引起广播风暴，导致主机所在网络性能的下降；</li><li>Docker容器连在主机网络中可能引起安全问题。</li></ul></div></div></div></span></div></div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">如果必须将Docker容器连接在主机网络中，最好还是将其分离开，不再一个大二层网络中。为了隔离Docker容器间网络和主机网络，需要额外使用一块网卡桥接Docker容器。思路：</div><div style="line-height: 24.2667px;">在所有主机上用虚拟网桥（如docker0网桥）将本机的Docker容器连接起来，然后<b>将一块网卡（eth1）加入到虚拟网桥中，eth1不需要配置IP</b>，使所有主机上的虚拟网桥级联在一起，这样，不同主机上的Docker容器也就如同连在了一个大的逻辑交换机上。这就是桥接。</div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;">关于Docker容器的IP，由于不同机器上的Docker容器可能获得相同的IP地址，因此需要解决IP冲突，我们为每一台主机上的Docker daemon指定不同的--fixed-cidr参数，将不同主机上的Docker容器的地址限定在不同的网段中。</div><div style="line-height: 24.2667px;"><div><img border="0" class="" src="All in_files/72741059.png"></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="com">#在host1上作如下操作</span></code></li><li class="L1"><code class="language-c"><span class="pln">$ echo </span><span class="str">'DOCKER_OPTS="--fixed-cidr=172.17.1.1/24"'</span><span class="pln"> </span><span class="pun">&gt;&gt;</span><span class="pln"> </span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="kwd">default</span><span class="pun">/</span><span class="pln">docker</span></code></li><li class="L2"><code class="language-c"><span class="pln">$ service docker stop</span></code></li><li class="L3"><code class="language-c"><span class="pln">$ service docker start</span></code></li><li class="L4"><code class="language-c"><span class="com">#将eth1网卡接入到docker0网桥中</span></code></li><li class="L5"><code class="language-c"><span class="pln">$ brctl addif docker0 eth1</span></code></li><li class="L6"><code class="language-c"><span class="pun"></span></code></li><li class="L7"><code class="language-c"><span class="com">#在host2上作如下操作</span></code></li><li class="L8"><code class="language-c"><span class="pln">$ echo </span><span class="str">'DOCKER_OPTS="--fixed-cidr=172.17.2.1/24"'</span><span class="pln"> </span><span class="pun">&gt;&gt;</span><span class="pln"> </span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="kwd">default</span><span class="pun">/</span><span class="pln">docker</span></code></li><li class="L9"><code class="language-c"><span class="com">#为避免和host1的docker0的IP冲突，修改docker0的IP</span></code></li><li class="L0"><code class="language-c"><span class="pln">$ ifconfig docker0 </span><span class="lit">172.17</span><span class="pun">.</span><span class="lit">42.2</span><span class="pun">/</span><span class="lit">16</span></code></li><li class="L1"><code class="language-c"><span class="pln">$ service docker stop</span></code></li><li class="L2"><code class="language-c"><span class="pln">$ service docker start</span></code></li><li class="L3"><code class="language-c"><span class="com">#将eth1网卡接入到docker0网桥中</span></code></li><li class="L4"><code class="language-c"><span class="pln">$ brctl addif docker0 eth1</span></code></li></ol></pre></div><div><span style="color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px; white-space: pre-wrap;">容器con1（172.17.1.1）向容器con2（172.17.2.1）发送数据的过程是这样的：首先，通过查看本身的路由表发现目的地址和自己处于同一个网段，子网掩码是16(255.255.0.0)，那么就不需要将数据发往网关，可以直接发给con2，con1通过ARP广播获取到con2的MAC地址；然后，构建以太网帧发往con2即可。此过程数据流经的路径如上图中两个容器的eth0网卡所连接的路径，其中docker0网桥充当普通的交换机转发数据帧。</span><br></div></div><div><span style="color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px; white-space: pre-wrap;"><br></span></div></div></div><div style="line-height: 24.2667px;">3 直接路由</div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">桥接方式是将所有主机上的Docker容器放在一个二层网络中，它们之间通信是由交换机直接转发，不通过路由器。另一种跨主机通信的方式是通过在主机中添加静态路由实现的。如果有两台主机host1和host2，两主机上的Docker容器是两个独立的二层网络，将con1发往con2的数据流先转发到主机host2上，再由host2再转发到其上的Docker容器中；反之亦然。</div><div style="line-height: 24.2667px;"><span style="color: rgb(119, 119, 119); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px; white-space: pre-wrap;">桥接网络是二层通信，通过MAC地址转发；直接路由为三层通信，通过IP地址进行路由转发。</span><br></div><div style="line-height: 24.2667px;">由于使用容器的IP进行路由，就需要避免不同主机上的Docker容器使用相同的IP， 所以应该为不同的主机分配不同的IP子网。</div><div style="line-height: 24.2667px;"><div><img border="0" src="All in_files/73101954.png"></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="com">#在host1上做如下操作</span></code></li><li class="L1"><code class="language-c"><span class="com">#为防止与不同主机的IP冲突，影响配置路由规则，配置docker0的IP地址</span></code></li><li class="L2"><code class="language-c"><span class="pln">$ ifconfig docker0 </span><span class="lit">172.17</span><span class="pun">.</span><span class="lit">1.254</span><span class="pun">/</span><span class="lit">24</span></code></li><li class="L3"><code class="language-c"><span class="pln">$ service docker restart</span></code></li><li class="L4"><code class="language-c"><span class="com">#添加路由，将目的地址为172.17.2.0/24的包转发到host2</span></code></li><li class="L5"><code class="language-c"><span class="pln">$ route add </span><span class="pun">-</span><span class="pln">net </span><span class="lit">172.17</span><span class="pun">.</span><span class="lit">2.0</span><span class="pln"> netmask </span><span class="lit">255.255</span><span class="pun">.</span><span class="lit">255.0</span><span class="pln"> gw </span><span class="lit">10.10</span><span class="pun">.</span><span class="lit">103.92</span></code></li><li class="L6"><code class="language-c"><span class="com">#配置iptables规则</span></code></li><li class="L7"><code class="language-c"><span class="pln">$ iptables </span><span class="pun">-</span><span class="pln">t nat </span><span class="pun">-</span><span class="pln">F POSTROUTING</span></code></li><li class="L8"><code class="language-c"><span class="pln">$ iptables </span><span class="pun">-</span><span class="pln">t nat </span><span class="pun">-</span><span class="pln">A POSTROUTING </span><span class="pun">-</span><span class="pln">s </span><span class="lit">172.17</span><span class="pun">.</span><span class="lit">1.0</span><span class="pun">/</span><span class="lit">24</span><span class="pln"> </span><span class="pun">!</span><span class="pln"> </span><span class="pun">-</span><span class="pln">d </span><span class="lit">172.17</span><span class="pun">.</span><span class="lit">0.0</span><span class="pun">/</span><span class="lit">16</span><span class="pln"> </span><span class="pun">-</span><span class="pln">j MASQUERADE</span></code></li><li class="L9"><code class="language-c"><span class="com">#启动容器con1</span></code></li><li class="L0"><code class="language-c"><span class="pln">$ docker run </span><span class="pun">-</span><span class="pln">it </span><span class="pun">--</span><span class="pln">name con1 ubuntu </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">bash</span></code></li><li class="L1"><code class="language-c"><span class="com">#在con1容器中</span></code></li><li class="L2"><code class="language-c"><span class="com">#nc -l 9000</span></code></li><li class="L3"><code class="language-c"><span class="pun"></span></code></li><li class="L4"><code class="language-c"><span class="pun"></span></code></li><li class="L5"><code class="language-c"><span class="com">#在host2上做如下操作</span></code></li><li class="L6"><code class="language-c"><span class="com">#为防止与不同主机的IP冲突，影响配置路由规则，配置docker0的IP地址</span></code></li><li class="L7"><code class="language-c"><span class="pln">$ ifconfig docker0 </span><span class="lit">172.17</span><span class="pun">.</span><span class="lit">2.254</span><span class="pun">/</span><span class="lit">24</span></code></li><li class="L8"><code class="language-c"><span class="pln">$ service docker restart</span></code></li><li class="L9"><code class="language-c"><span class="com">#添加路由，将目的地址为172.17.1.0/24的包转发到host1</span></code></li><li class="L0"><code class="language-c"><span class="pln">$ route add </span><span class="pun">-</span><span class="pln">net </span><span class="lit">172.17</span><span class="pun">.</span><span class="lit">1.0</span><span class="pln"> netmask </span><span class="lit">255.255</span><span class="pun">.</span><span class="lit">255.0</span><span class="pln"> gw </span><span class="lit">10.10</span><span class="pun">.</span><span class="lit">103.91</span></code></li><li class="L1"><code class="language-c"><span class="com">#配置iptables规则</span></code></li><li class="L2"><code class="language-c"><span class="pln">$ iptables </span><span class="pun">-</span><span class="pln">t nat </span><span class="pun">-</span><span class="pln">F POSTROUTING</span></code></li><li class="L3"><code class="language-c"><span class="pln">$ iptables </span><span class="pun">-</span><span class="pln">t nat </span><span class="pun">-</span><span class="pln">A POSTROUTING </span><span class="pun">-</span><span class="pln">s </span><span class="lit">172.17</span><span class="pun">.</span><span class="lit">2.0</span><span class="pun">/</span><span class="lit">24</span><span class="pln"> </span><span class="pun">!</span><span class="pln"> </span><span class="pun">-</span><span class="pln">d </span><span class="lit">172.17</span><span class="pun">.</span><span class="lit">0.0</span><span class="pun">/</span><span class="lit">16</span><span class="pln"> </span><span class="pun">-</span><span class="pln">j MASQUERADE</span></code></li><li class="L4"><code class="language-c"><span class="com">#启动容器con2</span></code></li><li class="L5"><code class="language-c"><span class="pln">$ docker run </span><span class="pun">-</span><span class="pln">it </span><span class="pun">--</span><span class="pln">name con2 ubuntu </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">bash</span></code></li><li class="L6"><code class="language-c"><span class="com">#在con2容器中</span></code></li><li class="L7"><code class="language-c"><span class="com">#nc -w 1 -v 172.17.1.1 9000</span></code></li><li class="L8"><code class="language-c"><span class="typ">Connection</span><span class="pln"> to </span><span class="lit">172.17</span><span class="pun">.</span><span class="lit">1.1</span><span class="pln"> </span><span class="lit">9000</span><span class="pln"> port </span><span class="pun">[</span><span class="pln">tcp</span><span class="com">/*] succeeded!</span></code></li></ol></pre></div><div><br></div></div></div></div><div style="line-height: 24.2667px;">&nbsp; &nbsp;&nbsp;4.1 使用Quagga软件实现路由规则的动态添加</div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">使用Quagga软件有两种办法：可以在每台服务器上安装Quagga软件并启动，还可以下载Quagga容器（配置网络为--net=host，使用宿主机网络）来运行。</div><div>启动完所有主机上Quagga容器后<span style="color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px; white-space: pre-wrap;">，</span><strong style="color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px; white-space: pre-wrap; box-sizing: border-box;">Quagga会互相学习来完成到其他机器的docker0路由规则的添加</strong><span style="color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px; white-space: pre-wrap;">。</span></div><p style="box-sizing: border-box; -webkit-margin-before: 1rem; -webkit-margin-after: 1rem; margin-top: 0.8em; margin-bottom: 0.8em; width: inherit; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px; white-space: pre-wrap;">一段时间后，在Node1上使用route -n命令来查看路由表，可以看到Quagga自动添加了两条到Node2和到Node3上docker0的路由规则。在Node2上查看路由表，可以看到自动添加了两条到Node1和Node3上docker0的路由规则。至此，所有Node上的docker0都可以互相互通了。</p><p style="box-sizing: border-box; -webkit-margin-before: 1rem; -webkit-margin-after: 1rem; margin-top: 0.8em; margin-bottom: 0.8em; width: inherit; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px; white-space: pre-wrap;"><br></p></div><div style="line-height: 24.2667px;">4 OVS划分VLAN（使用隧道方案Open vSwitch代替docker0实现Docker容器的VLAN划分（会用到pipework脚本对Open vSwitch工具命令的一些封装））</div><div style="line-height: 24.2667px;">当网络中的机器足够多时会引发广播风暴，导致主机所在网络性能的下降。同时，不同部门、不同组织的机器连在同一个二层网络中也会造成安全问题。因此，在交换机中划分子网、隔离广播域的思路便形成了VLAN的概念。<br></div><div style="line-height: 24.2667px;"><span style="color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px; white-space: pre-wrap;">VLAN技术将一个二层网络的机器隔离开来，那么如何区分不同VLAN的流量呢？IEEE802.1q协议规定了VLAN的实现方法，在传统的以太网帧（传统的以太网是没有VLAN tag字段的）中再添加一个VLAN tag字段，用于标示不同的VLAN。这样，</span><strong style="box-sizing: border-box; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px; white-space: pre-wrap;">支持VLAN的交换机</strong><span style="color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px; white-space: pre-wrap;">在转发帧时，不仅会关注MAC地址，还会考虑到VLAN tag字段。VLAN tag中包含了TPIDPCP、CFI、VID，其中VID（VLAN ID）部分用来具体指出帧时属于哪个VLAN的。VID占12位，所以其取值范围为0到4095。</span><br></div><div style="line-height: 24.2667px;"><span style="color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px; white-space: pre-wrap;"><div><img border="0" class="" src="All in_files/73449122.png"></div><div><p style="box-sizing: border-box; -webkit-margin-before: 1rem; -webkit-margin-after: 1rem; margin-top: 0.8em; margin-bottom: 0.8em; width: inherit; position: relative;">介绍一下交换机的access端口和trunk端口。图中，</p><ul style="box-sizing: border-box; margin-top: 0.8em; margin-bottom: 0.8em; padding-left: 30px;"><li style="box-sizing: border-box; position: relative;">Port1、Port2、Port5、Port6、Port7、Port8为access端口，每一个access端口都会分配一个VLAN ID，标示它所连接的设备属于哪一个VLAN。
当数据帧从外界通过access端口进入交换机时，数据帧原来是不带tag的，access端口给数据帧打上tag（VLAN ID即为access端口所分配的VLAN ID），有tag就不能更改了，也不再重新打了；当数据帧从交换机内部通过access端口发送时，数据帧的VLAN ID必须和access端口的VLAN ID一致，access端口接收此帧，接着access端口将帧的tag信息去掉，再发送出去。</li><li style="box-sizing: border-box; position: relative;">Port3、Port4为trunk端口，trunk端口不属于某个特定的VLAN，而是交换机和交换机之间多个VLAN的通道。trunk端口声明了一组VLAN ID，表明只允许带有这些VLAN ID的数据帧通过，从trunk端口进入和出去的数据帧都是带tag的（不考虑默认VLAN的情况）。PC1和PC3属于VLAN100，PC2和PC4属于VLAN200，所以PC1和PC3处于同一个二层网络中，PC2和PC4处在同一个二层网络中。尽管PC1和PC2连接在同一台交换机中，但它么之间的通信是需要经过路由器的。</li></ul></div></span></div><div style="line-height: 24.2667px;"><span style="color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px; white-space: pre-wrap;">VLAN tag是如何发挥作用的呢？当PC1向PC3发送数据时，PC1将IP包封装在以太帧中，帧的目的MAC地址为PC3的地址，此时帧并没有tag信息。当帧到达Port1时，Port1给帧打上tag（VID=100），帧进入switch1，然后帧通过Port3、Port4到达Switch2（Port3、Port4允许VLAN ID为100/200的帧通过）。在switch2中，Port5所标记的VID和帧相同，MAC地址也匹配，帧就发送到Port5上，Port5将帧的tag信息去掉，然后发给PC3。由于PC2、PC4与PC1的VLAN不同，因此收不到PC1发出的帧。</span></div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;">&nbsp; &nbsp; 4.1 使用OVS对单主机上Docker容器的VLAN划分（最后是同主机且都在一个子网范围，A、C容器能互通，B、D容器能互通）</div><div style="line-height: 24.2667px;"><div><img border="0" class="" src="All in_files/73525119.png"></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="com">#在主机A上创建4个Docker容器：con1、con2、con3、con4</span></code></li><li class="L1"><code class="language-c"><span class="pln">$ docker run </span><span class="pun">-</span><span class="pln">itd </span><span class="pun">--</span><span class="pln">name con1 ubuntu </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">bash</span></code></li><li class="L2"><code class="language-c"><span class="pln">$ docker run </span><span class="pun">-</span><span class="pln">itd </span><span class="pun">--</span><span class="pln">name con2 ubuntu </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">bash</span></code></li><li class="L3"><code class="language-c"><span class="pln">$ docker run </span><span class="pun">-</span><span class="pln">itd </span><span class="pun">--</span><span class="pln">name con3 ubuntu </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">bash</span></code></li><li class="L4"><code class="language-c"><span class="pln">$ docker run </span><span class="pun">-</span><span class="pln">itd </span><span class="pun">--</span><span class="pln">name con4 ubuntu </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">bash</span></code></li><li class="L5"><code class="language-c"><span class="pun"></span></code></li><li class="L6"><code class="language-c"><span class="com">#使用pipework将con1、con2划分到一个VLAN中，使用ovs0网桥，不存在则创建</span></code></li><li class="L7"><code class="language-c"><span class="pln">$ pipework ovs0 con1 </span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">0.1</span><span class="pun">/</span><span class="lit">24</span><span class="pln"> </span><span class="pun">@</span><span class="lit">100</span></code></li><li class="L8"><code class="language-c"><span class="pln">$ pipework ovs0 con2 </span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">0.2</span><span class="pun">/</span><span class="lit">24</span><span class="pln"> </span><span class="pun">@</span><span class="lit">100</span></code></li><li class="L9"><code class="language-c"><span class="pun"></span></code></li><li class="L0"><code class="language-c"><span class="com">#使用pipework将con3、con4划分到一个VLAN中</span></code></li><li class="L1"><code class="language-c"><span class="pln">$ pipework ovs0 con3 </span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">0.3</span><span class="pun">/</span><span class="lit">24</span><span class="pln"> </span><span class="pun">@</span><span class="lit">200</span></code></li><li class="L2"><code class="language-c"><span class="pln">$ pipework ovs0 con4 </span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">0.4</span><span class="pun">/</span><span class="lit">24</span><span class="pln"> </span><span class="pun">@</span><span class="lit">200</span></code></li></ol></pre></div><div><span style="color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px; white-space: pre-wrap;">pipework配置完成后，每个容器都多了一块eth1网卡，eth1连在ovs0网桥上，并且进行了VLAN的隔离。和之前一样，通过</span><code style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); background-color: rgb(248, 248, 248); border-radius: 3px; font-family: Consolas, &quot;Liberation Mono&quot;, Courier, monospace; padding: 2px 4px 0px; font-size: 0.9em; color: rgb(51, 51, 51); white-space: pre-wrap;">nc</code><span style="color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px; white-space: pre-wrap;">命令测试各容器之间的连通性时发现，con1和con2可以相互通信，但与con3和con4隔离。如此一来，一个简单的VLAN隔离容器网络就完成了。</span><br></div></div><div><div>使用Open vSwitch配置VLAN比较简单，如创建access端口和trunk端口使用如下命令：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="com">#在ovs0网桥上增加两个端口port1、port2</span></code></li><li class="L1"><code class="language-c"><span class="pln">$ ovs</span><span class="pun">-</span><span class="pln">vsctl add</span><span class="pun">-</span><span class="pln">port ovs0 port1 tag</span><span class="pun">=</span><span class="lit">100</span></code></li><li class="L2"><code class="language-c"><span class="pln">$ ovs</span><span class="pun">-</span><span class="pln">vsctl add</span><span class="pun">-</span><span class="pln">port ovs0 port2 trunk</span><span class="pun">=</span><span class="lit">100</span><span class="pun">,</span><span class="lit">200</span></code></li></ol></pre></div></div><div>在向Open vSwitch中添加端口时，若不添加任何限制，此端口则转发所有帧。</div></div><div><br></div></div><div style="line-height: 24.2667px;">&nbsp; &nbsp;&nbsp;4.2 使用OVS对多主机Docker容器的VLAN划分 &nbsp; &nbsp;leengine的最终方案</div><div style="line-height: 24.2667px;">多主机VLAN的情况下，肯定有属于同一VLAN但又在不同主机上的容器，因此多主机VLAN划分的前提是跨主机通信。<br></div><div style="line-height: 24.2667px;"><span style="color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px; white-space: pre-wrap;">要使不同主机上的容器处于同一VLAN，就只能采用桥接方式。首先用桥接的方式将所有容器连接在一个逻辑交换机上，再根据情况进行VLAN的划分。桥接需要将主机的一块网卡桥接到容器所连接的Open vSwitch网桥上（桥接要求必须两个网卡或以上，eth0网卡连外网，eth1网卡连接docker0网桥），这就需要一块额外的网卡eth1来完成，桥接的网卡需要开启混杂模式。</span><br></div><div style="line-height: 24.2667px;"><span style="color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px; white-space: pre-wrap;"><div><img border="0" src="All in_files/73746258.png"></div><div>如上图中，host1上的con1和host2上的con3属于VLAN100，con2和con4属于VLAN200.由于会有VLAN ID为100和VLAN ID为200的帧通过，<strong style="box-sizing: border-box;">物理交换机上连接host1和host2的端口应设置为trunk端口</strong>。host1和host2上eth1没有设置VLAN的限制（trunk），是允许所有帧通过的。完成上图例子需要作如下操作：<br></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="com">#在host1上</span></code></li><li class="L1"><code class="language-c"><span class="pln">$ docker run </span><span class="pun">-</span><span class="pln">itd </span><span class="pun">--</span><span class="pln">name con1 ubuntu </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">bash</span></code></li><li class="L2"><code class="language-c"><span class="pln">$ docker run </span><span class="pun">-</span><span class="pln">itd </span><span class="pun">--</span><span class="pln">name con2 ubuntu </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">bash</span></code></li><li class="L3"><code class="language-c"><span class="pln">$ pipework ovs0 con1 </span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">0.1</span><span class="pun">/</span><span class="lit">24</span><span class="pln"> </span><span class="pun">@</span><span class="lit">100</span></code></li><li class="L4"><code class="language-c"><span class="pln">$ pipework ovs0 con1 </span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">0.2</span><span class="pun">/</span><span class="lit">24</span><span class="pln"> </span><span class="pun">@</span><span class="lit">200</span></code></li><li class="L5"><code class="language-c"><span class="pln">$ ovs</span><span class="pun">-</span><span class="pln">vsctl add</span><span class="pun">-</span><span class="pln">port ovs0 eth1</span><span class="pun">;</span></code></li><li class="L6"><code class="language-c"><span class="pun"></span></code></li><li class="L7"><code class="language-c"><span class="com">#在host2上</span></code></li><li class="L8"><code class="language-c"><span class="pln">$ docker run </span><span class="pun">-</span><span class="pln">itd </span><span class="pun">--</span><span class="pln">name con3 ubuntu </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">bash</span></code></li><li class="L9"><code class="language-c"><span class="pln">$ docker run </span><span class="pun">-</span><span class="pln">itd </span><span class="pun">--</span><span class="pln">name con4 ubuntu </span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">bash</span></code></li><li class="L0"><code class="language-c"><span class="pln">$ pipework ovs0 con3 </span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">0.3</span><span class="pun">/</span><span class="lit">24</span><span class="pln"> </span><span class="pun">@</span><span class="lit">100</span></code></li><li class="L1"><code class="language-c"><span class="pln">$ pipework ovs0 con4 </span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">0.4</span><span class="pun">/</span><span class="lit">24</span><span class="pln"> </span><span class="pun">@</span><span class="lit">200</span></code></li><li class="L2"><code class="language-c"><span class="com">#此端口则转发所有帧</span></code></li><li class="L3"><code class="language-c"><span class="pln">$ ovs</span><span class="pun">-</span><span class="pln">vsctl add</span><span class="pun">-</span><span class="pln">port ovs0 eth1</span><span class="pun">;</span></code></li></ol></pre></div><div><br></div></div></span></div><div style="line-height: 24.2667px;">5 OVS隧道模式</div><div style="line-height: 24.2667px;">5.1 Overlay技术模型</div><div style="line-height: 24.2667px;"><p style="box-sizing: border-box; -webkit-margin-before: 1rem; -webkit-margin-after: 1rem; margin-top: 0.8em; margin-bottom: 0.8em; width: inherit; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px; white-space: pre-wrap;">当前主要的Overlay技术有<code style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); background-color: rgb(248, 248, 248); border-radius: 3px; font-family: Consolas, &quot;Liberation Mono&quot;, Courier, monospace; padding: 2px 4px 0px; font-size: 0.9em;">VXLAN（Virtual Extensible LAN）</code>和<code style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); background-color: rgb(248, 248, 248); border-radius: 3px; font-family: Consolas, &quot;Liberation Mono&quot;, Courier, monospace; padding: 2px 4px 0px; font-size: 0.9em;">NVGRE（Network Virtualization using Generic Routing Encapsulation）</code>。</p><ul style="box-sizing: border-box; margin-top: 0.8em; margin-bottom: 0.8em; padding-left: 30px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px; white-space: pre-wrap;"><li style="box-sizing: border-box; position: relative;"><strong style="box-sizing: border-box;">VXLAN</strong>是将以太网报文封装在UDP传输层上的一种隧道转发模式，它采用24位比特标示二层网络分段，称为VNI（VXLAN Network Identifier），类似于VLAN ID的作用。</li><li style="box-sizing: border-box; position: relative;"><strong style="box-sizing: border-box;">NVGRE</strong>同VXLAN类似，它使用GRE的方法来打通二层与三层之间的通路，采用24位比特的GRE key来作为网络标识（TNI）</li></ul></div><div style="line-height: 24.2667px;">5.2 GRE简介</div><div style="line-height: 24.2667px;">5.3 GRE实现Docker容器跨网络通信（容器在同一个子网中）</div><div style="line-height: 24.2667px;">5.4 GRE实现Docker容器跨网络通信（容器在不同子网中）</div><div style="line-height: 24.2667px;">5.5 多租户环境下的GRE网络</div><div style="line-height: 24.2667px;">6 隧道方案Flannel Overlay网络</div><div style="line-height: 24.2667px;">7 隧道方案Weave Overlay网络</div><div style="line-height: 24.2667px;">8 MacVlan+VLAN构建网络</div><div style="line-height: 24.2667px;">9 路由方案Calico网络</div><div style="line-height: 24.2667px;">10 Docker1.9后内置Overlay网络（对比所有的Overlay技术）</div><div style="line-height: 24.2667px;"><p style="box-sizing: border-box; -webkit-margin-before: 1rem; -webkit-margin-after: 1rem; margin-top: 0.8em; margin-bottom: 0.8em; width: inherit; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px; white-space: pre-wrap;">二层VLAN网络的解决跨主机通信的思路是把原先的网络架构改造为互通的大二层网络，通过特定网络设备直接路由，实现容器点到点的之间通信。这种方案在传输效率上比Overlay网络占优，然而它也存在一些固有的问题。</p><ol start="" style="box-sizing: border-box; margin-top: 0.8em; margin-bottom: 0.8em; padding-left: 30px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px; white-space: pre-wrap;"><li style="box-sizing: border-box; position: relative;">这种方法需要二层网络设备支持，通用性和灵活性不如后者；</li><li style="box-sizing: border-box; position: relative;">由于通常交换机可用的VLAN数量都在4000个左右，这会对容器集群规模造成限制，远远不能满足公有云或大型私有云的部署需求；</li><li style="box-sizing: border-box; position: relative;">大型数据中心部署VLAN，会导致任何一个VLAN的广播数据会在整个数据中心内泛滥，大量消耗网络带宽，带来维护的困难。</li></ol><p style="box-sizing: border-box; -webkit-margin-before: 1rem; -webkit-margin-after: 1rem; margin-top: 0.8em; margin-bottom: 0.8em; width: inherit; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px; white-space: pre-wrap;">相比之下，Overlay网络是指在不改变现有网络基础设施的前提下，通过某种约定通信协议，把二层报文封装在IP报文之上的新的数据格式。这样不但能够充分利用成熟的<em style="box-sizing: border-box;">IP路由协议</em>进程数据分发，而且在Overlay技术中采用扩展的隔离标识位数，能够突破VLAN的4000数量限制，支持高达16M的用户，并在必要时可将广播流量转化为组播流量，避免广播数据泛滥。因此，Overlay网络实际上是目前最主流的容器跨节点数据传输和路由方案。</p><p style="box-sizing: border-box; -webkit-margin-before: 1rem; -webkit-margin-after: 1rem; margin-top: 0.8em; margin-bottom: 0.8em; width: inherit; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px; white-space: pre-wrap;">很多实现CNM的第三方，如Weave、Flannel、Calico，docker1.9后支持创建容器指定--net=overlay，不过需要配合docker swarm使用。</p></div><div style="line-height: 24.2667px;">11 如何使用DNS、域名方式让访问服务</div></div><div></div></span></div><div><br></div><div><div><br></div><div><div style="border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>Kubernetes<br></h2></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B" id="851456089"><span lang="ZH-CN" style="font-family: 黑体;">要立即开</span></w:sdt></span></div></div><div></div></div><div><br></div><div><div><br class="Apple-interchange-newline"><br></div><div><div style="border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>容器网络、跨主机网络<br></h2></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B" id="851456089"><span lang="ZH-CN" style="font-family: 黑体;">要立即开</span></w:sdt></span></div></div><div></div></div><div><span lang="EN-GB"><br></span></div><h1 style="line-height: 70.4px;"><span style="font-size: 36px;"><font color="#9d45b8"><span data-wiz-span="data-wiz-span" style="font-size: 3.2rem;">四 &nbsp;In Arch</span></font></span></h1><div><span lang="EN-GB"><br class="Apple-interchange-newline"><div><br class="Apple-interchange-newline"><br></div><div><div style="border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>关系、非关系、时序数据库/mycat/数据库水平、垂直拆分<br></h2></div><h3 style="line-height: 24.2667px;"><font face="黑体">mysql</font></h3></div><h4 style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN"><font face="黑体">B树、B-树、B+树</font></span></w:sdt></span></h4><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN"><font face="黑体"><div style="line-height: 24.2667px;">B树：</div><div style="line-height: 24.2667px;">二叉树；</div><div style="line-height: 24.2667px;">所有非叶子结点至多拥有两个儿子；</div><div style="line-height: 24.2667px;">每个结点只存储一个关键字；</div><div style="line-height: 24.2667px;">非叶子结点的左指针指向小于其关键字的子树，右指针指向大于其关键字的子树。</div><div style="line-height: 24.2667px;">搜索时，等于则命中，小于走左结点，大于走右结点。</div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;">B-树：</div><div style="line-height: 24.2667px;">是一种多路搜索树；</div><div style="line-height: 24.2667px;">任意非叶子结点最多只有M个儿子，M&gt;2；</div><div style="line-height: 24.2667px;">根结点的儿子数为[2, M]；</div><div style="line-height: 24.2667px;">除根结点以外的非叶子结点的儿子数为[M/2, M]；</div><div style="line-height: 24.2667px;">每个结点存放至少M/2-1（取上整）和至多M-1个关键字；（至少2个关键字）；</div><div style="line-height: 24.2667px;">非叶子结点的关键字个数=指向儿子的指针个数-1；</div><div style="line-height: 24.2667px;">非叶子结点的关键字：K[1], K[2], …, K[M-1]；且K[i] &lt; K[i+1]；</div><div style="line-height: 24.2667px;">非叶子结点的指针：P[1], P[2], …, P[M]；其中P[1]指向关键字小于K[1]的子树，P[M]指向关键字大于K[M-1]的子树，其它P[i]指向关键字属于(K[i-1], K[i])的子树；</div><div style="line-height: 24.2667px;">所有叶子结点位于同一层；</div><div style="line-height: 24.2667px;">所有关键字在整颗树中出现，且只出现一次，非叶子结点可以命中；</div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;">B+树：</div><div style="line-height: 24.2667px;">除B-树特点外，还有：</div><div style="line-height: 24.2667px;">非叶子结点的子树指针与关键字个数相同；</div><div style="line-height: 24.2667px;">非叶子结点的子树指针P[i]，指向关键字值属于[K[i], K[i+1])的子树（B-树是开区间）；</div><div style="line-height: 24.2667px;">为所有叶子结点增加一个链指针；</div><div style="line-height: 24.2667px;">所有关键字都在叶子结点出现；</div><div style="line-height: 24.2667px;">B+树总是到叶子结点才命中；</div></font></span></w:sdt></span></div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;">mysql中普遍使用B+Tree做索引，但在实现上又根据聚簇索引（Innodb存储引擎使用）和非聚簇索引（MyISAM存储引擎）不同，非聚簇索引比聚簇索引多了一次读取数据的IO操作，所以查找性能上会差。<br></div><h4 style="line-height: 24.2667px;">Innodb引擎和MyIASM引擎对比</h4><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN"><font face="黑体"><div style="line-height: 24.2667px;">MyISAM引擎与InnoDB引擎相比较：</div><div style="line-height: 24.2667px;">1. Innodb引擎提供了对数据库ACID事务的支持，并且实现了SQL标准的四种隔离级别，MyISAM没有提供对ACID事务的支持。</div><div style="line-height: 24.2667px;">2. Innodb引擎提供了行级锁和外键约束，由于锁的粒度更小，写操作不会锁定全表，所以在并发较高时，使用Innodb引擎会提升效率。但是使用行级锁也不是绝对的，如果在执行一个SQL语句时MySQL不能确定要扫描的范围，InnoDB表同样会锁全表。MyISAM则当INSERT(插入)或UPDATE(更新)数据时即写操作需要锁定整个表，效率便会低一些。</div><div style="line-height: 24.2667px;">3. MySQL运行时Innodb会在内存中建立缓冲池，用于缓冲数据和索引。</div><div style="line-height: 24.2667px;">4. Innodb引擎不支持FULLTEXT类型的索引，所以不能做全文检索，而且没有保存表的行数，当SELECT COUNT(*) FROM TABLE时需要扫描全表。MyISAM都支持，而且保存了表的行数。</div><div style="line-height: 24.2667px;">5. MyIASM相对简单，效率上要优于InnoDB，小型应用可以考虑使用MyIASM</div><div style="line-height: 24.2667px;">6. MyIASM表保存成文件形式，跨平台使用更加方便</div><div style="line-height: 24.2667px;">5.5之后，默认的引擎是InnoDB。</div><div style="line-height: 24.2667px;">应用场景：</div><div style="line-height: 24.2667px;">1. MyIASM管理非事务表，提供高速存储和检索以及全文搜索能力，如果再应用中执行大量select操作，应该选择MyIASM</div><div style="line-height: 24.2667px;">2. InnoDB用于事务处理，具有ACID事务支持等特性，如果在应用中执行大量insert和update操作，应该选择InnoDB</div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">一个很好的事务处理系统，必须具备这些标准特性：ACID（原子性、一致性、隔离性、持久性）</div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;">脏读、不可重复读、幻读概念：</div><div style="line-height: 24.2667px;">脏读：当一个事务正在对数据进行修改，而这种修改还没有提交到数据库中，这时的另外一个事务也访问这个数据，然后使用了这个旧的数据。</div><div style="line-height: 24.2667px;">不可重复读：我们两次读数据，在第二次读数据前，有个事务对数据做了更改，则我们第二次独到的数据可能与第一次不同。</div><div style="line-height: 24.2667px;">幻读：第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。 同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。</div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;">数据库隔离级别：</div><div style="line-height: 24.2667px;">未提交读：事务中的修改，即使没有提交，对其他事务也都是可见的。事务可以读取未提交的数据，这也被称为脏读。</div><div style="line-height: 24.2667px;">提交读：大多数数据库系统的默认隔离级别，但MySQL不是。一个事务开始时，只能"看见"已经提交的事务所做的修改。</div><div style="line-height: 24.2667px;">可重复读：可重复读解决了脏读的问题，该隔离级别保证了在同一个事务中多次读取同样记录结果是一致的。但可重复读隔离级别还是无法解决幻读的问题。InnoDB和XtraDB存储引擎通过多版本并发控制(MVCC)解决了幻读的问题。TODO</div><div style="line-height: 24.2667px;">可串行化：可串行化是最高的隔离级别。它通过强制事务串行执行，避免了前面说的幻读的问题。可串行化会在读取每一行数据都加锁，所以可能导致大量的超时和锁争用问题。实际应用中也很少用到这个隔离级别，只有在非常需要确保数据的一致性而且可以接受没有并发的情况下，才考虑采用该级别。</div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;">几种锁介绍：</div><div style="line-height: 24.2667px;">读锁：也叫共享锁、S锁，若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。这保证了其他事务可以读A，但在T释放A上的S锁之前不能对A做任何修改。</div><div style="line-height: 24.2667px;">写锁：又称排他锁、X锁。若事务T对数据对象A加上X锁，事务T可以读A也可以修改A，其他事务不能再对A加任何锁，直到T释放A上的锁。这保证了其他事务在T释放A上的锁之前不能再读取和修改A。</div><div style="line-height: 24.2667px;">表锁：操作对象是数据表。Mysql大多数锁策略都支持(innodb)，是系统开销最低但并发性最低的一个锁策略。事务T对整个表加读锁，则其他事务可读不可写，若加写锁，则其他事务增删改都不行。</div><div style="line-height: 24.2667px;">行级锁：操作对象是数据表中的一行。是MVCC技术用的比较多的，但在MYISAM用不了.行级锁对系统开销较大，处理高并发较好。</div><div style="line-height: 24.2667px;">MVCC：多版本并发控制。一般情况下，事务性储存引擎不是只使用表锁、行加锁的处理数据，而是结合了MVCC机制，以处理更多的并发问题。Mvcc处理高并发能力最强，但系统开销比最大（较表锁、行级锁），这是最求高并发付出的代价。</div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;">innodb MVCC主要是为可重复读事务隔离级别做的。在每一行记录的后面增加两个隐藏列，记录创建版本号和删除版本号，通过版本号来减少锁的争用。</div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;">Innodb MVCC的实现方式是：</div><div style="line-height: 24.2667px;">事务以写锁的形式修改原始数据，把修改前的数据存放于undo log，通过回滚指针与主数据关联，修改成功（commit）啥都不做，失败则恢复undo log中的数据（rollback）。</div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;">innodb 增删改查具体的执行过程：</div><div style="line-height: 24.2667px;">UPDATE的事务过程：</div><div style="line-height: 24.2667px;">begin-&gt;用写锁锁定该行-&gt;记录redo log-&gt;记录undo log-&gt;修改当前行的值，写事务编号，回滚指针指向undo log中的修改前的行</div><div style="line-height: 24.2667px;">其实undo log分insert和update undo log，因为insert时，原始的数据并不存在，所以回滚时把insert undo log丢弃即可，而update undo log则必须遵守上述过程。</div><div><br></div><div><div>数据备份和恢复：</div><div>逻辑备份是将数据库的数据备份为一个文本文件，可以用mysqldump工具来完成逻辑备份。</div><div>逻辑备份的优点是对于各种存储引擎都可以用同样的方法来备份，更简单一些。</div><div>备份数据库test：mysqldump -uroot -p -l -F test &gt; test.sql</div><div>恢复：mysqldump -uroot -p test &lt; test.sql</div><div><br></div><div>物理备份，最大优点是备份和恢复的速度更快。因为都是直接基于文件的cp。屋里备份又分为冷备份和热备份两种。</div><div>冷备份，停掉数据库服务，直接cp数据文件的方法，对于MyISAM和InnoDB一样。</div><div>热备份，两个引擎方式不同，我们借助工具xtrabackup来完成热备，而且完成增量备份和全量备份，直接敲命令。</div></div><div><br></div><div>mysql5.6、5.7新特性</div><div>5.6 &nbsp; &nbsp;增加GTID</div><div>GTID事务是全局唯一性的，且一个事务对应一个GTID。GTID用来代替classic的复制方法，不在使用binlog+pos开启复制，对于传统三种复制后的又一新的复制方式。而是使用master_auto_postion=1的方式自动匹配GTID断点进行复制。MySQL-5.6.5开始支持的，MySQL-5.6.10后开始完善。<br></div><div>GTID的组成是：32位的带-的UUID-每台服务器上从1自增的序列。<br></div><div><br></div><div>5.7 &nbsp; &nbsp;增加并行复制和组提交</div><div>不懂。</div><div><h4>主从复制</h4><div><br></div><div>MySQL复制将主数据库的DDL和DML操作通过二进制日志传到从库上，然后在从库上对这些日志进行重做，从而使得从库和主库的数据保持同步。</div><div>MySQL复制的优点主要包括3个方面：</div><div>如果主库出现问题，可以快速切换到从库提供服务；</div><div>可以在从库上执行查询操作，降低主库的访问压力；</div><div>可以在从库上执行备份，以避免备份期间影响主库的服务。</div><div><br></div><div>MySQL的复制原理以及流程：</div><div>1.master将数据更新记录到二进制日志中；</div><div>2.从服务器上有个I/O线程，负责读取主服务器的二进制日志，将其保存为中继日志；还有个SQL线程，复制执行中继日志。从节点做复制几乎是实时进行的，但不是完全的实时，网络好的时候，而是异步的接近实时。</div><div><br></div><div><br></div><div>注意，备份是异步的复制，所以主从库存在一定的差距，在从库上进行的查询操作需要考虑到这些数据的差异，一般只有更新不频繁的数据或对实时性要求不高的数据可以通过从库查询，实时性要求高的数据仍然需要从主数据库获得。</div><div><br></div><h4>MySQL复制方式</h4><div>异步复制</div><div>MySQL默认的复制即是异步的，主库在执行完客户端提交的事务后会立即将结果返给客户端，并不关心从库是否已经接收并处理，这样就会有一个问题，主如果挂掉了，此时主上已经提交的事务可能并没有传到从上，如果此时强行将从提升为主，可能导致新主上的数据不完整。</div><div><br></div><div>全同步复制</div><div>指当主库执行完一个事务，所有的从库都执行了该事务才返回给客户端。因为需要等待所有从库执行完该事务才能返回，所以全同步复制的性能必然会收到严重的影响。在异步复制中，master写数据到binlog且sync，slave request binlog后写入relay-log并flush disk。</div><div><br></div><div>半同步复制</div><div>介于异步复制和全同步复制之间，主库在执行完客户端提交的事务后不是立刻返回给客户端，而是等待至少一个从库接收到并写到中继日志中才返回给客户端。相对于异步复制，半同步复制提高了数据的安全性，同时它也造成了一定程度的延迟，这个延迟最少是一个TCP/IP往返的时间。所以，半同步复制最好在低延时的网络中使用。在全同步复制中，master写数据到binlog且sync，所有slave request binlog后写入relay-log并flush disk，并且回放完日志且commit。</div></div><div><br></div><div><h4>mysql主备切换</h4><div>使用mycat</div></div><div><br></div></div></font></span></w:sdt></span></div><h3 style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN" style="font-family: 黑体;">mycat</span></w:sdt></span></h3><div></div></span></div><div><h4>数据拆分</h4><div>数据的切分(Sharding)根据其切分规则的类型，可以分为两种切分模式。</div><div>一种是按照不同的表(或者 Schema)来切分到不同的数据库(主机)之上，这种切可以称之为数据的垂直(纵向)切分;</div><div>另外一种则是根据表中的数据的逻辑关系，将同一个表中的数据按照某个字段的某种规则拆分到多台数据库(主机)上面，这种切分称之为数 据的水平(横向)切分。</div><div><br></div><div>垂直拆分缺点:</div><div>1.部分业务表无法 join，只能通过接口方式解决，提高了系统复杂度。</div><div>2.事务处理复杂。</div><div><br></div><div>由于垂直切分是按照业务的分类将表分散到不同的库，所以有些业务表会过于庞大，存在单库读写与存储瓶颈，所以就需要水平拆分来做解决。</div><div><br></div><div>水平拆分：</div><div>几种典型的分片规则包括:</div><div>按照用户 ID 求模，将数据分散到不同的数据库，具有相同数据用户的数据都被分散到一个库中。</div><div>按照日期，将不同月甚至日的数据分散到不同的库中。</div><div>按照某个特定的字段求摸，或者根据特定范围段分散到不同的库中。</div><div><br></div><div>水平拆分缺点：</div><div>1.拆分规则难以抽象。</div><div>2.分片事务一致性难以解决。</div><div>3.跨库 join 性能较差。</div><div><div><img border="0" src="All in_files/59796720.png"></div></div><div>例子：Orders表被分为三个分片datanode（简称dn），这三个分片是分布在两台mysql server(DataHost)上，即datanode=database@datahost方式，因此，你可以用一台到N台服务器来分片，分片规则为典型的字符串枚举分片规则。</div><div><br></div><div>一个规则的定义是分片字段+分片函数，这里的分片字段为prov，而分片函数为字符串枚举方式。</div><div><br></div><div>当Mycat收到一个SQL时，先会解析这个SQL，查找涉及到的表，然后看此表的定义，如果有分片规则，则获取到SQL里分片字段的值，并匹配分片函数，得到该SQL对应的分片列表，然后将SQL发往这些分片去执行，最后收集和处理所有分片返回的结果数据，并输出到客户端。</div><div><br></div><div>以 select * from Orders where prov=?语句为例，查到prov=wuhan，按照分片函数，wuhan返回dn1，于是SQL就发给了MySQL1，去取DB1上的查询 结果，并返回给用户。</div><div>上述SQL改为 select * from Orders where prov in (‘wuhan’,‘beijing’)，那么，SQL就会发给MySQL1与MySQL2去执行，然后结果集合并后输出给用户。但通常业务中我们的SQL会有Order By以及Limit 翻页语法，此时就涉及到结果集在Mycat端的二次处理，这部分的代码也比较复杂，而最复杂的则属两个表的Jion问题，为此，Mycat提出了创新性的ER分片、全局表、Catlet、以及结合 Storm/Spark 引擎等十八般武艺的解决办法，从而成为目前业界最强大的方案，这就是开源的力量!</div><div><br></div><h4>MyCat应用场景</h4><div><ul><li>单纯的读写分离，此时配置最为简单，支持读写分离，主从切换</li><li>分表分库，对于超过1000万的表进行分片，最大支持1000亿的单表分片</li><li>作为海量数据实时查询的一种简单有效方案，比如 100 亿条频繁查询的记录需要在3 秒内查询出来结果，除了基于主键的查询，还可能存在范围查询或其他属性查询，此时 Mycat 可能是最简单有效的选择</li></ul></div><div><div><br></div><div>Mycat 目前有哪些功能与特性?</div><div><ul><li>支持galera formysql集群，percona-cluster或者mariadb cluster，提供高可用性数据分片集群</li><li>支持NIO与AIO两种网络通信机制，Windows下建议AIO，Linux下目前建议NIO</li></ul></div><div><br></div><div>Mycat 支持批量插入吗?</div><div>目前 Mycat1.3.0.3 以后支持多 values 的批量插入，如 insert into(xxx) values(xxx),(xxx) 。</div><div><br></div><div>Mycat 支持多表 Join 吗?</div><div>Mycat 目前支持 2 个表 Join，后续会支持多表 Join。</div><div><br></div><div>Mycat 支持的或者不支持的语句有哪些?</div><div>insert into，复杂子查询，3 表及其以上跨库 join 等不支持。</div><div>MyCat目前不支持跨分片的事务，目前只是弱 XA 模式，还没完全实现 XA 模式。</div><div><br></div></div><h4>Mycat基本概念</h4><div><div>Mycat 是数据库中间件，提供了基本概念：</div><div><ul><li>逻辑库(schema)：数据库中间件提供逻辑数据库概念，业务人员调用不关心是什么库，只要JDBC能连接上。</li><li>逻辑表(table)：读写数据的表就是逻辑表。逻辑表，可以是数据切分后，分布在一个或多个分片库中，也可以不做数据切分，不分片，只有一个表构成。</li><ul><li>分片表：那些原有的很大数据的表，需要切分到多个数据库的表，这样，每个分片都有一部分数据，所有分片构成了完整的数据。</li></ul></ul></div><div>例如在mycat配置中的t_node就属于分片表，数据按照规则被分到dn1,dn2两个分片节点(dataNode)上。</div><div>&lt;table name="t_node" primaryKey="vid" autoIncrement="true" dataNode="dn1,dn2" rule="rule1" /&gt;</div><div><ul><ul><li>非分片表：一个数据库中并不是所有的表都很大，某些表是可以不用进行切分的，非分片是相对分片表来说的，就是那些不需要进行数据切分的表。</li></ul></ul></div><div>如下配置中t_node，只存在于分片节点(dataNode)dn1 上。</div><div>&lt;table name="t_node" primaryKey="vid" autoIncrement="true" dataNode="dn1" /&gt;</div><div><ul><ul><li>ER表：子表的记录与所关联的父表记录存放在同一个数据分片上，即子表依赖于父表，通过表分组(Table Group)保证数据Join不会跨库操作。</li></ul></ul></div><div>表分组(Table Group)是解决跨分片数据join的一种很好的思路，也是数据切分规划的重要一条规则。</div><div><ul><ul><li>全局表：对于大量的像字典表这类表，变动不频繁、数据量总体变化不大、数据规模不大，很少有超过数十万条记录。为解决业务表与这些附属的字典表之间的关联，就成了比较辣手的问题，mycat通过数据冗余来解决这类表的 join，即所有分片都有一份数据的拷贝，所有将字典表这类特性的表定义为全局表。</li></ul></ul></div></div></div><div>数据冗余是解决跨分片数据 join 的一种很好的思路，也是数据切分规划的另外一条重要规则。</div><div><div><ul><li>分片节点(dataNode)：数据切分后，一个大表被分到不同的分片数据库上面，每个表分片所在的数据库就是分片节点 (dataNode)。</li></ul></div></div><div><div><ul><li>节点主机(dataHost)：数据切分后，每个分片节点(dataNode)不一定都会独占一台机器，同一机器上面可以有多个分片数据库， 这样一个或多个分片节点(dataNode)所在的机器就是节点主机(dataHost)。</li></ul></div></div><div><ul><li>分片规则(rule)：数据切分，一个大表被分成若干个分片表，就需要一定的规则，这样按照某种业务规则把数据分到某个分片的规则就是分片规则。</li><li></li><li>全局序列号(sequence)：数据切分后，原有的关系数据库中的主键约束在分布式条件下将无法使用，因此需要引入外部机制保证数据唯一性标识，这种保证全局性的数据唯一标识的机制就是全局序列号(sequence)。</li></ul><div><br></div><h4>MyCat配置文件</h4><div>MyCAT 目前主要通过配置文件的方式来定义逻辑库和相关配置:</div><div>• MYCAT_HOME/conf/schema.xml 中定义逻辑库，表、分片节点等内容.</div><div>• MYCAT_HOME/conf/rule.xml 中定义分片规则.</div><div>• MYCAT_HOME/conf/server.xml 中定义用户以及系统相关变量，如端口等.</div><div><br></div><div><div>server.xml 定义信息</div><div>1.可以配置SQL白名单和SQL黑名单。ip白名单用户对应的可以访问的ip地址。对于黑名单可以定义拦截规则，如是否允许修改sql、删除sql、查询sql等。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="str">&lt;firewall&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="str">&lt;whitehost&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">host user</span><span class="pun">=</span><span class="str">"mycat"</span><span class="pln"> host</span><span class="pun">=</span><span class="str">"127.0.0.1"</span><span class="pun">&gt;&lt;/</span><span class="pln">host</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">&lt;!--</span><span class="pln">ip </span><span class="pun">白名单</span><span class="pln">  </span><span class="pun">用户对应的可以访问的</span><span class="pln"> ip </span><span class="pun">地址--&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;/</span><span class="pln">whitehost</span><span class="pun">&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;</span><span class="pln">blacklist check</span><span class="pun">=</span><span class="str">"true"</span><span class="pun">&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"selelctAllow"</span><span class="pun">&gt;</span><span class="kwd">false</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span><span class="pln">  </span><span class="pun">&lt;!--黑名单允许的</span><span class="pln"> </span><span class="pun">权限</span><span class="pln"> </span><span class="pun">后面为默认--&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;/</span><span class="pln">blacklist</span><span class="pun">&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">firewall</span><span class="pun">&gt;</span></code></li></ol></pre></div></div><div>2.schema.xml中标签：</div><div>schema标签用于定义mycat实例中的逻辑库。mycat可以定义多个逻辑库，每个库都有自己的配置。</div><div>table标签用于定义mycat受理中的逻辑库，所有需要拆分的表都需要在这个标签中定义。</div><div>childTable标签用于定义E-R分片的子表。通过标签上的属性与父表进行关联。</div><div>dataNode标签定义了MyCat中的数据节点，也就是我们通常说所的数据分片。</div><div>dataHost标签直接定义了具体的数据库实例、读写分离配置和心跳语句。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">schema name</span><span class="pun">=</span><span class="str">"TESTDB"</span><span class="pln"> checkSQLschema</span><span class="pun">=</span><span class="str">"false"</span><span class="pln"> sqlMaxLimit</span><span class="pun">=</span><span class="str">"100"</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;</span><span class="pln">table name</span><span class="pun">=</span><span class="str">"travelrecord"</span><span class="pln"> dataNode</span><span class="pun">=</span><span class="str">"dn1,dn2,dn3"</span><span class="pln"> rule</span><span class="pun">=</span><span class="str">"auto-sharding-long"</span><span class="pln"> </span><span class="pun">&gt;&lt;/</span><span class="pln">table</span><span class="pun">&gt;</span><span class="pln"> </span></code></li><li class="L2"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">schema</span><span class="pun">&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pun">&lt;</span><span class="pln">schema name</span><span class="pun">=</span><span class="str">"USERDB"</span><span class="pln"> checkSQLschema</span><span class="pun">=</span><span class="str">"false"</span><span class="pln"> sqlMaxLimit</span><span class="pun">=</span><span class="str">"100"</span><span class="pun">&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;</span><span class="pln">table name</span><span class="pun">=</span><span class="str">"company"</span><span class="pln"> dataNode</span><span class="pun">=</span><span class="str">"dn10,dn11,dn12"</span><span class="pln"> rule</span><span class="pun">=</span><span class="str">"auto-sharding-long"</span><span class="pln"> </span><span class="pun">&gt;&lt;/</span><span class="pln">table</span><span class="pun">&gt;</span><span class="pln"> </span></code></li><li class="L5"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">schema</span><span class="pun">&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pun">&lt;</span><span class="pln">dataNode name</span><span class="pun">=</span><span class="str">"dn1"</span><span class="pln"> dataHost</span><span class="pun">=</span><span class="str">"lch3307"</span><span class="pln"> database</span><span class="pun">=</span><span class="str">"db1"</span><span class="pln"> </span><span class="pun">&gt;&lt;/</span><span class="pln">dataNode</span><span class="pun">&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pun">&lt;</span><span class="pln">dataHost name</span><span class="pun">=</span><span class="str">"localhost1"</span><span class="pln"> maxCon</span><span class="pun">=</span><span class="str">"1000"</span><span class="pln"> minCon</span><span class="pun">=</span><span class="str">"10"</span><span class="pln"> balance</span><span class="pun">=</span><span class="str">"0"</span><span class="pln"> writeType</span><span class="pun">=</span><span class="str">"0"</span><span class="pln"> dbType</span><span class="pun">=</span><span class="str">"mysql"</span><span class="pln"> dbDriver</span><span class="pun">=</span><span class="str">"native"</span><span class="pun">&gt;</span></code></li><li class="L8"><code class="language-c"><span class="pln">  </span><span class="str">&lt;heartbeat&gt;</span><span class="pln">select user</span><span class="pun">()&lt;/</span><span class="pln">heartbeat</span><span class="pun">&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;!--</span><span class="pln"> can have multi write hosts </span><span class="pun">--&gt;</span></code></li><li class="L0"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;</span><span class="pln">writeHost host</span><span class="pun">=</span><span class="str">"hostM1"</span><span class="pln"> url</span><span class="pun">=</span><span class="str">"localhost:3306"</span><span class="pln"> user</span><span class="pun">=</span><span class="str">"root"</span><span class="pln"> password</span><span class="pun">=</span><span class="str">"123456"</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;!--</span><span class="pln"> can have multi read hosts </span><span class="pun">--&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">readHost host</span><span class="pun">=</span><span class="str">"hostS1"</span><span class="pln"> url</span><span class="pun">=</span><span class="str">"localhost:3306"</span><span class="pln"> user</span><span class="pun">=</span><span class="str">"root"</span><span class="pln"> password</span><span class="pun">=</span><span class="str">"123456"</span><span class="pun">/&gt;</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;/</span><span class="pln">writeHost</span><span class="pun">&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">writeHost host</span><span class="pun">=</span><span class="str">"hostM2"</span><span class="pln"> url</span><span class="pun">=</span><span class="str">"localhost:3316"</span><span class="pln"> user</span><span class="pun">=</span><span class="str">"root"</span><span class="pln"> password</span><span class="pun">=</span><span class="str">"123456"</span><span class="pun">/&gt;</span><span class="pln"> </span><span class="pun">--&gt;</span><span class="pln"> </span></code></li><li class="L5"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">dataHost</span><span class="pun">&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pun">&lt;!--</span></code></li><li class="L7"><code class="language-c"><span class="pln">dataHost</span><span class="pun">属性介绍：</span></code></li><li class="L8"><code class="language-c"><span class="pln">name</span><span class="pun">属性</span><span class="pln">        </span><span class="pun">唯一标识</span><span class="pln"> dataHost </span><span class="pun">标签，供上层的标签使用。</span></code></li><li class="L9"><code class="language-c"><span class="pln">maxCon</span><span class="pun">属性</span><span class="pln">      </span><span class="pun">指定每个读写实例连接池的最大连接。</span></code></li><li class="L0"><code class="language-c"><span class="pun">...</span></code></li><li class="L1"><code class="language-c"><span class="pln">balance</span><span class="pun">属性</span><span class="pln">     </span><span class="pun">负载均衡类型，目前的取值有</span><span class="lit">3</span><span class="pun">种:</span></code></li><li class="L2"><code class="language-c"><span class="lit">1.</span><span class="pln"> balance</span><span class="pun">=</span><span class="str">"0"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">不开启读写分离机制，所有读操作都发送到当前可用的</span><span class="pln">writeHost</span><span class="pun">上。</span></code></li><li class="L3"><code class="language-c"><span class="lit">2.</span><span class="pln"> balance</span><span class="pun">=</span><span class="str">"1"</span><span class="pun">，全部的</span><span class="pln">readHost</span><span class="pun">与</span><span class="pln">stand by writeHost</span><span class="pun">参与</span><span class="pln">select</span><span class="pun">语句的负载均衡，简单的说，当双</span></code></li><li class="L4"><code class="language-c"><span class="pun">主双从模式(</span><span class="pln">M1</span><span class="pun">-&gt;</span><span class="pln">S1</span><span class="pun">，</span><span class="pln">M2</span><span class="pun">-&gt;</span><span class="pln">S2</span><span class="pun">，并且</span><span class="pln"> M1 </span><span class="pun">与</span><span class="pln"> M2 </span><span class="pun">互为主备)，正常情况下，</span><span class="pln">M2</span><span class="pun">,</span><span class="pln">S1</span><span class="pun">,</span><span class="pln">S2 </span><span class="pun">都参与</span><span class="pln">select</span><span class="pun">语句的负载均衡。</span></code></li><li class="L5"><code class="language-c"><span class="lit">3.</span><span class="pln"> balance</span><span class="pun">=</span><span class="str">"2"</span><span class="pun">，所有读操作都随机的在</span><span class="pln"> writeHost</span><span class="pun">、</span><span class="pln">readhost </span><span class="pun">上分发。</span></code></li><li class="L6"><code class="language-c"><span class="lit">4.</span><span class="pln"> balance</span><span class="pun">=</span><span class="str">"3"</span><span class="pun">，所有读请求随机的分发到</span><span class="pln"> wiriterHost </span><span class="pun">对应的</span><span class="pln"> readhost </span><span class="pun">执行，</span><span class="pln">writerHost </span><span class="pun">不负担读压</span><span class="pln"> </span><span class="pun">力，注意</span><span class="pln"> balance</span><span class="pun">=</span><span class="lit">3</span><span class="pln"> </span><span class="pun">只在</span><span class="pln"> </span><span class="lit">1.4</span><span class="pln"> </span><span class="pun">及其以后版本有，</span><span class="lit">1.3</span><span class="pln"> </span><span class="pun">没有。</span></code></li><li class="L7"><code class="language-c"><span class="pln">writeType</span><span class="pun">属性</span><span class="pln">   </span><span class="pun">负载均衡类型，目前的取值有</span><span class="lit">3</span><span class="pun">种:</span></code></li><li class="L8"><code class="language-c"><span class="lit">1.</span><span class="pln"> writeType</span><span class="pun">=</span><span class="str">"0"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">所有写操作发送到配置的第一个</span><span class="pln"> writeHost</span><span class="pun">，第一个挂了切到还生存的第二个</span><span class="pln"> writeHost</span><span class="pun">，重新启动后已切换后的为准，切换记录在配置文件中:</span><span class="pln">dnindex</span><span class="pun">.</span><span class="pln">properties </span><span class="pun">.</span></code></li><li class="L9"><code class="language-c"><span class="lit">2.</span><span class="pln"> writeType</span><span class="pun">=</span><span class="str">"1"</span><span class="pun">，所有写操作都随机的发送到配置的</span><span class="pln"> writeHost</span><span class="pun">，</span><span class="lit">1.5</span><span class="pln"> </span><span class="pun">以后废弃不推荐。</span></code></li><li class="L0"><code class="language-c"><span class="pln">switchType</span><span class="pun">属性</span></code></li><li class="L1"><code class="language-c"><span class="pun">-</span><span class="lit">1</span><span class="pln"> </span><span class="pun">表示不自动切换</span></code></li><li class="L2"><code class="language-c"><span class="lit">1</span><span class="pln"> </span><span class="pun">默认值，自动切换</span></code></li><li class="L3"><code class="language-c"><span class="lit">2</span><span class="pln"> </span><span class="pun">基于</span><span class="typ">MySQL</span><span class="pun">主从同步的状态决定是否切换</span><span class="pln"> </span><span class="pun">心跳语句为</span><span class="pln"> show slave status</span></code></li><li class="L4"><code class="language-c"><span class="lit">3</span><span class="pln"> </span><span class="pun">基于</span><span class="typ">MySQL</span><span class="pln"> galary cluster</span><span class="pun">的切换机制(适合集群)(</span><span class="lit">1.4</span><span class="pun">.</span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">心跳语句为</span><span class="pln"> show status like </span><span class="pun">‘</span><span class="pln">wsrep</span><span class="pun">%’.</span></code></li><li class="L5"><code class="language-c"><span class="pln">heartbeat</span><span class="pun">标签</span><span class="pln">   </span><span class="pun">指明用于和后端数据库进行心跳检查的语句。</span></code></li><li class="L6"><code class="language-c"><span class="pln">writeHost</span><span class="pun">标签、</span><span class="pln">readHost</span><span class="pun">标签</span><span class="pln">  </span><span class="pun">指定后端数据库的相关配置给</span><span class="pln"> mycat</span><span class="pun">，用于实例化后端连接池.</span></code></li><li class="L7"><code class="language-c"><span class="pun">--&gt;</span></code></li></ol></pre></div></div><div>如上所示的配置就配置了两个不同的逻辑库，逻辑库的概念和 MYSQL 数据库中 Database 的概念相同。</div><div><br></div><div>3.server.xml 定义信息保存了所有 mycat 需要的系统配置信息。</div><div>user标签 &nbsp; &nbsp;定义了登录mycat的用户和权限。例如上面的例子中，我定义了一个用户，用户名为test、密码也为test，可访问的schema也只有TESTDB一个。</div><div>如果我在schema.xml中定义了多个schema，那么这个用户是无法访问其他的schema。在mysql客户端看来则是无法使用use切换到这个其他的数据库。</div><div>privileges子节点 &nbsp; 对用户的schema及下级的table进行精细化的DML权限控制</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">user name</span><span class="pun">=</span><span class="str">"zhuam"</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"password"</span><span class="pun">&gt;</span><span class="lit">111111</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"schemas"</span><span class="pun">&gt;</span><span class="pln">TESTDB</span><span class="pun">,</span><span class="pln">TESTDB1</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;!--</span><span class="pln"> </span><span class="pun">表级权限:</span><span class="pln"> </span><span class="typ">Table</span><span class="pln"> </span><span class="pun">级的</span><span class="pln"> dml</span><span class="pun">(</span><span class="pln">curd</span><span class="pun">)控制，未设置的</span><span class="pln"> </span><span class="typ">Table</span><span class="pln"> </span><span class="pun">继承</span><span class="pln"> schema </span><span class="pun">的</span><span class="pln"> dml </span><span class="pun">--&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;!--</span><span class="pln"> TODO</span><span class="pun">:</span><span class="pln"> </span><span class="pun">非</span><span class="pln"> CURD SQL </span><span class="pun">语句,</span><span class="pln"> </span><span class="pun">透明传递至后端</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;</span><span class="pln">privileges check</span><span class="pun">=</span><span class="str">"true"</span><span class="pun">&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">schema name</span><span class="pun">=</span><span class="str">"TESTDB"</span><span class="pln"> dml</span><span class="pun">=</span><span class="str">"0110"</span><span class="pln"> </span><span class="pun">&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pln">      </span><span class="pun">&lt;</span><span class="pln">table name</span><span class="pun">=</span><span class="str">"table01"</span><span class="pln"> dml</span><span class="pun">=</span><span class="str">"0111"</span><span class="pun">&gt;&lt;/</span><span class="pln">table</span><span class="pun">&gt;</span></code></li><li class="L8"><code class="language-c"><span class="pln">      </span><span class="pun">&lt;</span><span class="pln">table name</span><span class="pun">=</span><span class="str">"table02"</span><span class="pln"> dml</span><span class="pun">=</span><span class="str">"1111"</span><span class="pun">&gt;&lt;/</span><span class="pln">table</span><span class="pun">&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;/</span><span class="pln">schema</span><span class="pun">&gt;</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">schema name</span><span class="pun">=</span><span class="str">"TESTDB1"</span><span class="pln"> dml</span><span class="pun">=</span><span class="str">"0110"</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">      </span><span class="pun">&lt;</span><span class="pln">table name</span><span class="pun">=</span><span class="str">"table03"</span><span class="pln"> dml</span><span class="pun">=</span><span class="str">"1110"</span><span class="pun">&gt;&lt;/</span><span class="pln">table</span><span class="pun">&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">      </span><span class="pun">&lt;</span><span class="pln">table name</span><span class="pun">=</span><span class="str">"table04"</span><span class="pln"> dml</span><span class="pun">=</span><span class="str">"1010"</span><span class="pun">&gt;&lt;/</span><span class="pln">table</span><span class="pun">&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;/</span><span class="pln">schema</span><span class="pun">&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;/</span><span class="pln">privileges</span><span class="pun">&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">user</span><span class="pun">&gt;</span></code></li></ol></pre></div></div><div>system标签 &nbsp;这个标签内嵌套的所有 property 标签都与系统配置有关。</div><div><br></div><div>4.rule.xml 定义信息里面就定义了我们对表进行拆分所涉及到的规则定义。我们可以灵活的对表使用不同的分片算法。</div><div><br></div><div>tableRule标签 &nbsp; 定义表规则。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">tableRule name</span><span class="pun">=</span><span class="str">"rule1"</span><span class="pun">&gt;</span><span class="pln"> </span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="str">&lt;rule&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="str">&lt;columns&gt;</span><span class="pln">id</span><span class="pun">&lt;/</span><span class="pln">columns</span><span class="pun">&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="str">&lt;algorithm&gt;</span><span class="pln">func1</span><span class="pun">&lt;/</span><span class="pln">algorithm</span><span class="pun">&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;/</span><span class="pln">rule</span><span class="pun">&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">tableRule</span><span class="pun">&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pun">&lt;!--</span></code></li><li class="L7"><code class="language-c"><span class="pln">name</span><span class="pun">属性</span><span class="pln">    </span><span class="pun">指定唯一的名字，用于标识不同的表规则。</span></code></li><li class="L8"><code class="language-c"><span class="pun">内嵌的</span><span class="pln">rule</span><span class="pun">标签</span></code></li><li class="L9"><code class="language-c"><span class="pln">columns   </span><span class="pun">指定要拆分的列名字。</span></code></li><li class="L0"><code class="language-c"><span class="pln">algorithm </span><span class="pun">使用</span><span class="pln">function</span><span class="pun">标签中的</span><span class="pln">name</span><span class="pun">属性。连接表规则和具体路由算法。当然，多个表规则可以连接到同一个路由算法上。</span></code></li><li class="L1"><code class="language-c"><span class="pun">--&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">function </span><span class="pun">标签</span><span class="pln">    </span><span class="pun">指定拆分算法</span></code></li><li class="L3"><code class="language-c"><span class="pun">&lt;</span><span class="pln">function name</span><span class="pun">=</span><span class="str">"hash-int"</span><span class="pln"> </span><span class="kwd">class</span><span class="pun">=</span><span class="str">"org.opencloudb.route.function.PartitionByFileMap"</span><span class="pun">&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"mapFile"</span><span class="pun">&gt;</span><span class="pln">partition</span><span class="pun">-</span><span class="pln">hash</span><span class="pun">-</span><span class="typ">int</span><span class="pun">.</span><span class="pln">txt</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">function</span><span class="pun">&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pun">&lt;!--</span></code></li><li class="L7"><code class="language-c"><span class="pln">name  </span><span class="pun">指定算法的名字。</span></code></li><li class="L8"><code class="language-c"><span class="kwd">class</span><span class="pln"> </span><span class="pun">制定路由算法具体的类名字。</span></code></li><li class="L9"><code class="language-c"><span class="kwd">property</span><span class="pln"> </span><span class="pun">为具体算法需要用到的一些属性。</span></code></li><li class="L0"><code class="language-c"><span class="pun">--&gt;</span></code></li></ol></pre></div><div><br></div></div></div><h4>MyCat跨分片join</h4><div><div>对于多表的join，Mycat目前版本支持跨分片的join,主要实现的方式有四种。</div><div>全局表，ER分片，catletT(人工智能)和ShareJoin，ShareJoin在开发版中支持，前面三种方式1.3.0.1支持。全局表和ER分片解决了80%以上的企业应用所面临的问题。</div><div><br></div><h5>全局表</h5><div>一个真实的业务系统中，往往存在大量的类似字典表的表格，考虑到字典表具有以下几个特性:</div><div>• 变动不频繁</div><div>• 数据量总体变化不大</div><div>• 数据规模不大，很少有超过数十万条记录。</div><div>鉴于此，MyCAT 定义了一种特殊的表，称之为“全局表”，全局表具有以下特性:</div><div>• 全局表的插入、更新操作会实时在所有节点上执行，保持各个分片的数据一致性</div><div>• 全局表的查询操作，只从一个节点获取</div><div>• 全局表可以跟任何一个表进行JOIN操作</div><div>将字典表或者符合字典表特性的一些表定义为全局表。</div><div>全局表配置比较简单，不用写Rule规则，如下配置即可:</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">table name</span><span class="pun">=</span><span class="str">"company"</span><span class="pln"> primaryKey</span><span class="pun">=</span><span class="str">"ID"</span><span class="pln"> type</span><span class="pun">=</span><span class="str">"global"</span><span class="pln"> dataNode</span><span class="pun">=</span><span class="str">"dn1,dn2,dn3"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li></ol></pre></div></div><div>需要注意的是，全局表每个分片节点上都要有运行创建表的 DDL 语句。</div><div><br></div><h5>ER Join</h5><div>子表的记录与所关联的父表记录存放在同一个数据分片上。</div><div>customer采用sharding-by-intfile这个分片策略，分片在dn1,dn2上，orders依赖父表进行分片，两个表的关联关系为orders.customer_id=customer.id。</div><div><div><img border="0" src="All in_files/71848521.png"></div></div><div>这样一来，分片Dn1上的的customer与Dn1上的orders就可以进行局部的JOIN联合，Dn2上也如此，再合并两个节点的数据即可完成整体的JOIN，试想一下，每个分片上 orders 表有 100 万条，则 10 个分片就有 1 个亿，基 于 E-R 映射的数据分片模式.</div><div>schema.xml 中定义如下的分片配置:</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">table name</span><span class="pun">=</span><span class="str">"customer"</span><span class="pln"> dataNode</span><span class="pun">=</span><span class="str">"dn1,dn2"</span><span class="pln"> rule</span><span class="pun">=</span><span class="str">"sharding-by-intfile"</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;</span><span class="pln">childTable name</span><span class="pun">=</span><span class="str">"orders"</span><span class="pln"> joinKey</span><span class="pun">=</span><span class="str">"customer_id"</span><span class="pln"> parentKey</span><span class="pun">=</span><span class="str">"id"</span><span class="pun">/&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">table</span><span class="pun">&gt;</span></code></li></ol></pre></div></div><div>其他方式不讲了，都是很不固定的办法，我们项目中应该做到前面两种。</div><div><br></div><div><h4>全局序列号</h4><div><br></div><div>在实现分库分表的情况下，数据库自增主键已无法保证自增主键的全局唯一。为此，MyCat 提供了全局sequence，并且提供了包含本地配置、数据库配置、本地时间戳、分布式ZK ID生成器、ZK递增方式实现方式。</div><div><br></div><div>本地文件方式：此方式MyCAT将sequence配置到文件中，当使用到sequence中的配置后，MyCAT会到classpath中的sequence_conf.properties文件中 sequence获取当前的值。</div><div><br></div><div>server.xml 中配置：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="str">&lt;system&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"sequnceHandlerType"</span><span class="pun">&gt;</span><span class="lit">0</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">system</span><span class="pun">&gt;</span></code></li></ol></pre></div></div><div>数据库方式：在数据库创建一张表，包含序列名称，当前值，自增值，用来存放sequence，创建相关函数，然后配置sequnceHandlerType的值为1.</div><div><br></div><div>还有。</div><div>不管哪种方式，使用方式都是：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">insert into table1</span><span class="pun">(</span><span class="pln">id</span><span class="pun">,</span><span class="pln">name</span><span class="pun">)</span><span class="pln"> values</span><span class="pun">(</span><span class="pln">next value </span><span class="kwd">for</span><span class="pln"> MYCATSEQ_GLOBAL</span><span class="pun">,‘</span><span class="pln"> test</span><span class="pun">’</span><span class="pln"> </span><span class="pun">);</span></code></li></ol></pre></div></div><div>我们用的数据库方式。</div><div><br></div><div>mycat对于主键定义成自增类型也提供了last_insert_id()返回主键值。</div><div><br></div><div>mycat定义逻辑表时可指定主键字段是哪个，是否自增。</div><div>使用mybatis获得自增主键方法：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">insert id</span><span class="pun">=</span><span class="str">"insert"</span><span class="pln"> parameterType</span><span class="pun">=</span><span class="str">"Person"</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">        </span><span class="pun">&lt;</span><span class="pln">selectKey keyProperty</span><span class="pun">=</span><span class="str">"id"</span><span class="pln"> resultType</span><span class="pun">=</span><span class="str">"long"</span><span class="pun">&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">            select LAST_INSERT_ID</span><span class="pun">()</span></code></li><li class="L3"><code class="language-c"><span class="pln">        </span><span class="pun">&lt;/</span><span class="pln">selectKey</span><span class="pun">&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">        insert into person</span><span class="pun">(</span><span class="pln">name</span><span class="pun">,</span><span class="pln">pswd</span><span class="pun">)</span><span class="pln"> values</span><span class="pun">(#{</span><span class="pln">name</span><span class="pun">},#{</span><span class="pln">pswd</span><span class="pun">})</span></code></li><li class="L5"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">insert</span><span class="pun">&gt;</span></code></li></ol></pre></div><div><br></div></div><h4>分片规则</h4><div><br></div><div>在数据切分处理中，特别是水平切分中，中间件最终要的两个处理过程就是数据的切分、数据的聚合。选择合适的切分规则，至关重要，因为它决定了后续数据聚合的难易程度，甚至可以避免跨库的数据聚合处理。前面讲了数据切分中重要的几条原则，其中有几条是数据冗余，表分组（Table Group），这都是业务上规避跨库 join 的很好的方式，但不是所有的业务场景都适合这样的规则，因此本章将讲述如何选择合适的切分规则。</div><div><br></div><div>切分暂解决不了问题：</div><div>有一类业务场景是 “主表 A+关系表+主表 B”，举例来说就是商户会员+订单+商户，对应这类业务，如何切分？</div><div>从会员的角度，如果需要查询会员购买的订单，那按照会员进行切分即可，但是如果要查询商户当天售出的订单，那又需要按照商户做切分，可是如果既要按照会员又要按照商户切分，几乎是无法实现，这类业务如何选择切分规则非常难。目前还暂时无法很好支持这种模式下的 3 个表之间的关联。目前总的原则是需要从业务角度来看，关系表更偏向哪个表，即“A 的关系”还是“B 的关系”，来决定关系表跟从那个方向存储，未来 Mycat版本中将考虑将中间表进行双向复制，以实现从 A-关系表 以及 B-关系表的双向关联查询。</div><div><br></div><div>主键分片 vs 非主键分片</div><div>当没有任何字段可以作为分片字段的时候，主键分片就是唯一选择，其优点是按照主键的查询最快，当采用自动增长的序列号作为主键时，还能比较均匀的将数据分片在不同的节点上。若有某个合适的业务字段比较合适作为分片字段，则建议采用此业务字段分片，选择分片字段的条件如下：</div><div> 尽可能的比较均匀分布数据到各个节点上；</div><div> 该业务字段是最频繁的或者最重要的查询条件。</div><div><br></div><div><br></div><div>当你找到某个合适的业务字段作为分片字段以后，不必纠结于“牺牲了按主键查询记录的性能”，因为在这种情况下，MyCAT 提供了“主键到分片”的内存缓存机制，热点数据按照主键查询，丝毫不损失性能。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">table name</span><span class="pun">=</span><span class="str">"t_user"</span><span class="pln"> primaryKey</span><span class="pun">=</span><span class="str">"user_id"</span><span class="pln"> dataNode</span><span class="pun">=</span><span class="str">"dn$1-32"</span><span class="pln"> rule</span><span class="pun">=</span><span class="str">"mod-long"</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">childTable name</span><span class="pun">=</span><span class="str">"t_user_detail"</span><span class="pln"> primaryKey</span><span class="pun">=</span><span class="str">"id"</span><span class="pln"> joinKey</span><span class="pun">=</span><span class="str">"user_id"</span><span class="pln"> parentKey</span><span class="pun">=</span><span class="str">"user_id"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">table</span><span class="pun">&gt;</span></code></li></ol></pre></div></div><div>Mycat 常用的分片规则:</div><h5>1. 分片枚举</h5><div>本规则适合于配置固定数据项的业务，如省份/区县。配置如下：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">tableRule name</span><span class="pun">=</span><span class="str">"sharding-by-intfile"</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="str">&lt;rule&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="str">&lt;columns&gt;</span><span class="pln">user_id</span><span class="pun">&lt;/</span><span class="pln">columns</span><span class="pun">&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">        </span><span class="str">&lt;algorithm&gt;</span><span class="pln">hash</span><span class="pun">-</span><span class="typ">int</span><span class="pun">&lt;/</span><span class="pln">algorithm</span><span class="pun">&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;/</span><span class="pln">rule</span><span class="pun">&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">tableRule</span><span class="pun">&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pun">&lt;</span><span class="pln">function name</span><span class="pun">=</span><span class="str">"hash-int"</span><span class="pln"> </span><span class="kwd">class</span><span class="pun">=</span><span class="str">"org.opencloudb.route.function.PartitionByFileMap"</span><span class="pun">&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"mapFile"</span><span class="pun">&gt;</span><span class="pln">partition</span><span class="pun">-</span><span class="pln">hash</span><span class="pun">-</span><span class="typ">int</span><span class="pun">.</span><span class="pln">txt</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"type"</span><span class="pun">&gt;</span><span class="lit">0</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"defaultNode"</span><span class="pun">&gt;</span><span class="lit">0</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L0"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">function</span><span class="pun">&gt;</span></code></li></ol></pre></div></div><div>partition-hash-int.txt 配置：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="lit">10000</span><span class="pun">=</span><span class="lit">0</span></code></li><li class="L1"><code class="language-c"><span class="lit">10010</span><span class="pun">=</span><span class="lit">1</span></code></li><li class="L2"><code class="language-c"><span class="pln">DEFAULT_NODE</span><span class="pun">=</span><span class="lit">1</span></code></li></ol></pre></div></div><div>配置说明：</div><div>columns 标识将要分片的表字段</div><div>algorithm 分片函数，</div><div>其中分片函数配置中，</div><div>mapFile 标识配置文件名称，</div><div>type 默认值为 0，0 表示 Integer，非零表示 String，所有的节点配置都是从 0 开始，0代表的时配置中第1个配置。&nbsp;</div><div>defaultNode 表示默认节点，小于 0 表示不设置默认节点，大于等于 0 表示设置默认节点。枚举分片时，如果碰到不识别的枚举值，就让它路由到默认节点， 如果不配置默认节点（defaultNode 值小于 0 表示不配置默认节点），碰到不识别的枚举值就会报错。</div><div><br></div><h5>2. 固定分片 hash 算法</h5><div>本条规则是二进制的操作,取 id 的二进制低 10 位，即 id 二进制&amp;1111111111。此算法的优点在于如果按照 10 进制取模运算，在连续插入 1-10 时候 1-10 会被分到 1-10 个分片，增大了插入的事务控制难度，而此算法根据二进制则可能会分到连续的分片，减少插入事务事务控制难度。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">tableRule name</span><span class="pun">=</span><span class="str">"rule1"</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="str">&lt;rule&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="str">&lt;columns&gt;</span><span class="pln">user_id</span><span class="pun">&lt;/</span><span class="pln">columns</span><span class="pun">&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">        </span><span class="str">&lt;algorithm&gt;</span><span class="pln">func1</span><span class="pun">&lt;/</span><span class="pln">algorithm</span><span class="pun">&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;/</span><span class="pln">rule</span><span class="pun">&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">tableRule</span><span class="pun">&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pun">&lt;</span><span class="pln">function name</span><span class="pun">=</span><span class="str">"func1"</span><span class="pln"> </span><span class="kwd">class</span><span class="pun">=</span><span class="str">"org.opencloudb.route.function.PartitionByLong"</span><span class="pun">&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"partitionCount"</span><span class="pun">&gt;</span><span class="lit">2</span><span class="pun">,</span><span class="lit">1</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"partitionLength"</span><span class="pun">&gt;</span><span class="lit">256</span><span class="pun">,</span><span class="lit">512</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">function</span><span class="pun">&gt;</span></code></li></ol></pre></div></div><div>配置说明：</div><div>columns 标识将要分片的表字段</div><div>algorithm 分片函数，</div><div>partitionCount分片个数列表，</div><div>partitionLength分片范围列表</div><div>分区长度:默认为最大 2^n=1024 ,即最大支持 1024&nbsp;</div><div><br></div><div>上面例子解释一下，希望将数据水平分成 3 份，前两份各占 25%，第三份占 50%。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="com">// |&lt;————————————————————————————1024—————————————————————————&gt;|</span></code></li><li class="L1"><code class="language-c"><span class="com">// |&lt;———————256———————&gt;|&lt;———————256———————&gt;|&lt;———————512———————&gt;|</span></code></li><li class="L2"><code class="language-c"><span class="com">// |    partition0     |    partition1     |    partition2     |</span></code></li><li class="L3"><code class="language-c"><span class="com">// |        共 2 份,故 count[0]=2          |共1份,故count[1]=1 |</span></code></li><li class="L4"><code class="language-c"><span class="typ">int</span><span class="pun">[]</span><span class="pln"> count </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">int</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="pun">};</span></code></li><li class="L5"><code class="language-c"><span class="typ">int</span><span class="pun">[]</span><span class="pln"> length </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">int</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="lit">256</span><span class="pun">,</span><span class="pln"> </span><span class="lit">512</span><span class="pln"> </span><span class="pun">};</span></code></li><li class="L6"><code class="language-c"><span class="typ">PartitionUtil</span><span class="pln"> pu </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">PartitionUtil</span><span class="pun">(</span><span class="pln">count</span><span class="pun">,</span><span class="pln"> length</span><span class="pun">);</span></code></li></ol></pre></div></div><div>如果需要平均分配设置：平均分为 4 分片，partitionCount*partitionLength=1024</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">function name</span><span class="pun">=</span><span class="str">"func1"</span><span class="pln"> </span><span class="kwd">class</span><span class="pun">=</span><span class="str">"org.opencloudb.route.function.PartitionByLong"</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"partitionCount"</span><span class="pun">&gt;</span><span class="lit">4</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"partitionLength"</span><span class="pun">&gt;</span><span class="lit">256</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">function</span><span class="pun">&gt;</span></code></li></ol></pre></div></div><h5>3. 范围约定</h5><div>此分片适用于，提前规划好分片字段某个范围属于哪个分片，</div><div>start &lt;= range &lt;= end.</div><div>K=1000,M=10000.</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">tableRule name</span><span class="pun">=</span><span class="str">"auto-sharding-long"</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="str">&lt;rule&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="str">&lt;columns&gt;</span><span class="pln">user_id</span><span class="pun">&lt;/</span><span class="pln">columns</span><span class="pun">&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">        </span><span class="str">&lt;algorithm&gt;</span><span class="pln">rang</span><span class="pun">-</span><span class="kwd">long</span><span class="pun">&lt;/</span><span class="pln">algorithm</span><span class="pun">&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;/</span><span class="pln">rule</span><span class="pun">&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">tableRule</span><span class="pun">&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pun">&lt;</span><span class="pln">function name</span><span class="pun">=</span><span class="str">"rang-long"</span><span class="pln"> </span><span class="kwd">class</span><span class="pun">=</span><span class="str">"org.opencloudb.route.function.AutoPartitionByLong"</span><span class="pun">&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"mapFile"</span><span class="pun">&gt;</span><span class="pln">autopartition</span><span class="pun">-</span><span class="kwd">long</span><span class="pun">.</span><span class="pln">txt</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"defaultNode"</span><span class="pun">&gt;</span><span class="lit">0</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">function</span><span class="pun">&gt;</span></code></li></ol></pre></div></div><div>配置说明：</div><div>columns标识将要分片的表字段，</div><div>algorithm分片函数，</div><div>rang-long函数中</div><div>mapFile代表配置文件路径</div><div>defaultNode 超过范围后的默认节点。</div><div>所有的节点配置都是从0开始，0代表的时配置文件的第一条配置。</div><div>此配置非常简单，即预先制定可能的id范围到某个分片。</div><div>autopartition-long.txt配置</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="lit">0</span><span class="pun">-</span><span class="lit">500M</span><span class="pun">=</span><span class="lit">0</span></code></li><li class="L1"><code class="language-c"><span class="lit">500M</span><span class="pun">-</span><span class="lit">1000M</span><span class="pun">=</span><span class="lit">1</span></code></li><li class="L2"><code class="language-c"><span class="lit">1000M</span><span class="pun">-</span><span class="lit">1500M</span><span class="pun">=</span><span class="lit">2</span></code></li><li class="L3"><code class="language-c"><span class="pun">或</span></code></li><li class="L4"><code class="language-c"><span class="lit">0</span><span class="pun">-</span><span class="lit">10000000</span><span class="pun">=</span><span class="lit">0</span></code></li><li class="L5"><code class="language-c"><span class="lit">10000001</span><span class="pun">-</span><span class="lit">20000000</span><span class="pun">=</span><span class="lit">1</span></code></li></ol></pre></div><div><br></div></div><h5>4. 取模</h5><div>此规则为对分片字段求模运算。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">tableRule name</span><span class="pun">=</span><span class="str">"mod-long"</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="str">&lt;rule&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="str">&lt;columns&gt;</span><span class="pln">user_id</span><span class="pun">&lt;/</span><span class="pln">columns</span><span class="pun">&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">        </span><span class="str">&lt;algorithm&gt;</span><span class="pln">mod</span><span class="pun">-</span><span class="kwd">long</span><span class="pun">&lt;/</span><span class="pln">algorithm</span><span class="pun">&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;/</span><span class="pln">rule</span><span class="pun">&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">tableRule</span><span class="pun">&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pun">&lt;</span><span class="pln">function name</span><span class="pun">=</span><span class="str">"mod-long"</span><span class="pln"> </span><span class="kwd">class</span><span class="pun">=</span><span class="str">"org.opencloudb.route.function.PartitionByMod"</span><span class="pun">&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;!--</span><span class="pln"> how many data nodes </span><span class="pun">--&gt;</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"count"</span><span class="pun">&gt;</span><span class="lit">3</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">function</span><span class="pun">&gt;</span></code></li></ol></pre></div><div><br></div></div><div>配置说明：</div><div>columns标识将要分片的表字段，</div><div>algorithm分片函数，</div><div>此种配置根据 id 进行十进制求模，相比固定分片hash的二进制求模，在连续插入 1-10 时候 1-10 会被分到 1-10个分片，增大了插入的事务控制难度.</div><div><br></div><h5>5. 按日期（天）分片</h5><div>此规则为按天分片。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">tableRule name</span><span class="pun">=</span><span class="str">"sharding-by-date"</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="str">&lt;rule&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="str">&lt;columns&gt;</span><span class="pln">create_time</span><span class="pun">&lt;/</span><span class="pln">columns</span><span class="pun">&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">        </span><span class="str">&lt;algorithm&gt;</span><span class="pln">sharding</span><span class="pun">-</span><span class="pln">by</span><span class="pun">-</span><span class="pln">date</span><span class="pun">&lt;/</span><span class="pln">algorithm</span><span class="pun">&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;/</span><span class="pln">rule</span><span class="pun">&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">tableRule</span><span class="pun">&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pun">&lt;</span><span class="pln">function name</span><span class="pun">=</span><span class="str">"sharding-by-date"</span><span class="pln"> </span><span class="kwd">class</span><span class="pun">=</span><span class="str">"org.opencloudb.route.function.PartitionByDate"</span><span class="pun">&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"dateFormat"</span><span class="pun">&gt;</span><span class="pln">yyyy</span><span class="pun">-</span><span class="pln">MM</span><span class="pun">-</span><span class="pln">dd</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"sBeginDate"</span><span class="pun">&gt;</span><span class="lit">2014</span><span class="pun">-</span><span class="lit">01</span><span class="pun">-</span><span class="lit">01</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"sEndDate"</span><span class="pun">&gt;</span><span class="lit">2014</span><span class="pun">-</span><span class="lit">01</span><span class="pun">-</span><span class="lit">02</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"sPartionDay"</span><span class="pun">&gt;</span><span class="lit">10</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">function</span><span class="pun">&gt;</span></code></li></ol></pre></div><div><br></div></div><div>配置说明：</div><div>columns标识将要分片的表字段，</div><div>algorithm分片函数，</div><div>dateFormat日期格式</div><div>sBeginDate开始日期</div><div>sEndDate结束日期</div><div>sPartionDay分区天数，即默认从开始日期算起，分隔 10 天一个分区</div><div>如果配置了sEndDate 则代表数据达到了这个日期的分片后循环从开始分片插入。</div><div>Assert.assertEquals(true, 0 == partition.calculate(“2014-01-01”));</div><div>Assert.assertEquals(true, 0 == partition.calculate(“2014-01-10”));</div><div>Assert.assertEquals(true, 1 == partition.calculate(“2014-01-11”));</div><div>Assert.assertEquals(true, 12 == partition.calculate(“2014-05-01”));</div><div><br></div><h5>6. 取模范围约束</h5><div>此种规则是取模运算与范围约束的结合，主要为了后续数据迁移做准备，即可以自主决定取模后数据的节点分布。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">tableRule name</span><span class="pun">=</span><span class="str">"sharding-by-pattern"</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="str">&lt;rule&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="str">&lt;columns&gt;</span><span class="pln">user_id</span><span class="pun">&lt;/</span><span class="pln">columns</span><span class="pun">&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">        </span><span class="str">&lt;algorithm&gt;</span><span class="pln">sharding</span><span class="pun">-</span><span class="pln">by</span><span class="pun">-</span><span class="pln">pattern</span><span class="pun">&lt;/</span><span class="pln">algorithm</span><span class="pun">&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;/</span><span class="pln">rule</span><span class="pun">&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">tableRule</span><span class="pun">&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pun">&lt;</span><span class="pln">function name</span><span class="pun">=</span><span class="str">"sharding-by-pattern"</span><span class="pln"> </span><span class="kwd">class</span><span class="pun">=</span><span class="str">"org.opencloudb.route.function.PartitionByPattern"</span><span class="pun">&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"patternValue"</span><span class="pun">&gt;</span><span class="lit">256</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"defaultNode"</span><span class="pun">&gt;</span><span class="lit">2</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"mapFile"</span><span class="pun">&gt;</span><span class="pln">partition</span><span class="pun">-</span><span class="pln">pattern</span><span class="pun">.</span><span class="pln">txt</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L0"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">function</span><span class="pun">&gt;</span></code></li></ol></pre></div></div><div>partition-pattern.txt<br></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">partition</span><span class="pun">-</span><span class="pln">pattern</span><span class="pun">.</span><span class="pln">txt</span></code></li><li class="L1"><code class="language-c"><span class="com"># id partition range start-end ,data node index</span></code></li><li class="L2"><code class="language-c"><span class="com">###### first host configuration</span></code></li><li class="L3"><code class="language-c"><span class="lit">1</span><span class="pun">-</span><span class="lit">32</span><span class="pun">=</span><span class="lit">0</span></code></li><li class="L4"><code class="language-c"><span class="lit">33</span><span class="pun">-</span><span class="lit">64</span><span class="pun">=</span><span class="lit">1</span></code></li><li class="L5"><code class="language-c"><span class="lit">65</span><span class="pun">-</span><span class="lit">96</span><span class="pun">=</span><span class="lit">2</span></code></li><li class="L6"><code class="language-c"><span class="lit">97</span><span class="pun">-</span><span class="lit">128</span><span class="pun">=</span><span class="lit">3</span></code></li><li class="L7"><code class="language-c"><span class="com">######## second host configuration</span></code></li><li class="L8"><code class="language-c"><span class="lit">129</span><span class="pun">-</span><span class="lit">160</span><span class="pun">=</span><span class="lit">4</span></code></li><li class="L9"><code class="language-c"><span class="lit">161</span><span class="pun">-</span><span class="lit">192</span><span class="pun">=</span><span class="lit">5</span></code></li><li class="L0"><code class="language-c"><span class="lit">193</span><span class="pun">-</span><span class="lit">224</span><span class="pun">=</span><span class="lit">6</span></code></li><li class="L1"><code class="language-c"><span class="lit">225</span><span class="pun">-</span><span class="lit">256</span><span class="pun">=</span><span class="lit">7</span></code></li><li class="L2"><code class="language-c"><span class="lit">0</span><span class="pun">-</span><span class="lit">0</span><span class="pun">=</span><span class="lit">7</span></code></li></ol></pre></div><div><br></div></div><div>配置说明：</div><div>columns标识将要分片的表字段，</div><div>algorithm分片函数，</div><div>patternValue即求模基数，</div><div>defaultNode默认节点，如果配置了默认，则不会按照求模运算</div><div>mapFile 配置文件路径</div><div>配置文件中，</div><div>1-32 即代表 id%256 后分布的范围，如果在 1-32，则在分区 1，其他类推，如果 id 非数据，则会分配在 defaoultNode 默认节点</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="typ">String</span><span class="pln"> idVal </span><span class="pun">=</span><span class="pln"> </span><span class="str">"0"</span><span class="pun">;</span></code></li><li class="L1"><code class="language-c"><span class="typ">Assert</span><span class="pun">.</span><span class="pln">assertEquals</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">,</span><span class="pln"> </span><span class="lit">7</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> autoPartition</span><span class="pun">.</span><span class="pln">calculate</span><span class="pun">(</span><span class="pln">idVal</span><span class="pun">));</span></code></li><li class="L2"><code class="language-c"><span class="pln">idVal </span><span class="pun">=</span><span class="pln"> </span><span class="str">"45aaaczxcz"</span><span class="pun">;</span></code></li><li class="L3"><code class="language-c"><span class="typ">Assert</span><span class="pun">.</span><span class="pln">assertEquals</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> autoPartition</span><span class="pun">.</span><span class="pln">calculate</span><span class="pun">(</span><span class="pln">idVal</span><span class="pun">));</span></code></li></ol></pre></div><div><br></div></div><h5>7 截取数字做 hash 求模范围约束</h5><div>此种规则类似于取模范围约束，此规则支持数据符号字母取模。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">tableRule name</span><span class="pun">=</span><span class="str">"sharding-by-prefixpattern"</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="str">&lt;rule&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="str">&lt;columns&gt;</span><span class="pln">user_id</span><span class="pun">&lt;/</span><span class="pln">columns</span><span class="pun">&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">        </span><span class="str">&lt;algorithm&gt;</span><span class="pln">sharding</span><span class="pun">-</span><span class="pln">by</span><span class="pun">-</span><span class="pln">prefixpattern</span><span class="pun">&lt;/</span><span class="pln">algorithm</span><span class="pun">&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;/</span><span class="pln">rule</span><span class="pun">&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">tableRule</span><span class="pun">&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pun">&lt;</span><span class="pln">function name</span><span class="pun">=</span><span class="str">"sharding-by-pattern"</span><span class="pln"> </span><span class="kwd">class</span><span class="pun">=</span><span class="str">"org.opencloudb.route.function.PartitionByPrefixPattern"</span><span class="pun">&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"patternValue"</span><span class="pun">&gt;</span><span class="lit">256</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"prefixLength"</span><span class="pun">&gt;</span><span class="lit">5</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"mapFile"</span><span class="pun">&gt;</span><span class="pln">partition</span><span class="pun">-</span><span class="pln">pattern</span><span class="pun">.</span><span class="pln">txt</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L0"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">function</span><span class="pun">&gt;</span></code></li></ol></pre></div><div><br></div></div><div>partition-pattern.txt</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">partition</span><span class="pun">-</span><span class="pln">pattern</span><span class="pun">.</span><span class="pln">txt</span></code></li><li class="L1"><code class="language-c"><span class="com"># range start-end ,data node index</span></code></li><li class="L2"><code class="language-c"><span class="com"># ASCII</span></code></li><li class="L3"><code class="language-c"><span class="com"># 8-57=0-9 阿拉伯数字</span></code></li><li class="L4"><code class="language-c"><span class="com"># 64、65-90=@、A-Z</span></code></li><li class="L5"><code class="language-c"><span class="com"># 97-122=a-z</span></code></li><li class="L6"><code class="language-c"><span class="com">###### first host configuration</span></code></li><li class="L7"><code class="language-c"><span class="lit">1</span><span class="pun">-</span><span class="lit">4</span><span class="pun">=</span><span class="lit">0</span></code></li><li class="L8"><code class="language-c"><span class="lit">5</span><span class="pun">-</span><span class="lit">8</span><span class="pun">=</span><span class="lit">1</span></code></li><li class="L9"><code class="language-c"><span class="lit">9</span><span class="pun">-</span><span class="lit">12</span><span class="pun">=</span><span class="lit">2</span></code></li><li class="L0"><code class="language-c"><span class="lit">13</span><span class="pun">-</span><span class="lit">16</span><span class="pun">=</span><span class="lit">3</span></code></li><li class="L1"><code class="language-c"><span class="com">###### second host configuration</span></code></li><li class="L2"><code class="language-c"><span class="lit">17</span><span class="pun">-</span><span class="lit">20</span><span class="pun">=</span><span class="lit">4</span></code></li><li class="L3"><code class="language-c"><span class="lit">21</span><span class="pun">-</span><span class="lit">24</span><span class="pun">=</span><span class="lit">5</span></code></li><li class="L4"><code class="language-c"><span class="lit">25</span><span class="pun">-</span><span class="lit">28</span><span class="pun">=</span><span class="lit">6</span></code></li><li class="L5"><code class="language-c"><span class="lit">29</span><span class="pun">-</span><span class="lit">32</span><span class="pun">=</span><span class="lit">7</span></code></li><li class="L6"><code class="language-c"><span class="lit">0</span><span class="pun">-</span><span class="lit">0</span><span class="pun">=</span><span class="lit">7</span></code></li></ol></pre></div><div><br></div></div><div>配置说明：</div><div>columns标识将要分片的表字段，</div><div>algorithm 分片函数，</div><div>patternValue 即求模基数，</div><div>prefixLength ASCII 截取的位数</div><div>mapFile 配置文件路径</div><div>配置文件中，</div><div>1-32 即代表 id%256 后分布的范围，如果在 1-32 则在分区 1，其他类推，此种方式类似方式 6，只不过采取的是前 prefixLength 位列所有 ASCII 码的和进行求模</div><div>sum%patternValue ,获取的值，在范围内的分片数，</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="typ">String</span><span class="pln"> idVal</span><span class="pun">=</span><span class="str">"gf89f9a"</span><span class="pun">;</span></code></li><li class="L1"><code class="language-c"><span class="typ">Assert</span><span class="pun">.</span><span class="pln">assertEquals</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">==</span><span class="pln">autoPartition</span><span class="pun">.</span><span class="pln">calculate</span><span class="pun">(</span><span class="pln">idVal</span><span class="pun">));</span></code></li><li class="L2"><code class="language-c"><span class="pln">idVal</span><span class="pun">=</span><span class="str">"8df99a"</span><span class="pun">;</span></code></li><li class="L3"><code class="language-c"><span class="typ">Assert</span><span class="pun">.</span><span class="pln">assertEquals</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">,</span><span class="pln"> </span><span class="lit">4</span><span class="pun">==</span><span class="pln">autoPartition</span><span class="pun">.</span><span class="pln">calculate</span><span class="pun">(</span><span class="pln">idVal</span><span class="pun">));</span></code></li><li class="L4"><code class="language-c"><span class="pln">idVal</span><span class="pun">=</span><span class="str">"8dhdf99a"</span><span class="pun">;</span></code></li><li class="L5"><code class="language-c"><span class="typ">Assert</span><span class="pun">.</span><span class="pln">assertEquals</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">,</span><span class="pln"> </span><span class="lit">3</span><span class="pun">==</span><span class="pln">autoPartition</span><span class="pun">.</span><span class="pln">calculate</span><span class="pun">(</span><span class="pln">idVal</span><span class="pun">));</span></code></li></ol></pre></div><div><br></div></div><h5>8. 应用指定</h5><div>此规则是在运行阶段有应用自主决定路由到那个分片。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">tableRule name</span><span class="pun">=</span><span class="str">"sharding-by-substring"</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="str">&lt;rule&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="str">&lt;columns&gt;</span><span class="pln">user_id</span><span class="pun">&lt;/</span><span class="pln">columns</span><span class="pun">&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">        </span><span class="str">&lt;algorithm&gt;</span><span class="pln">sharding</span><span class="pun">-</span><span class="pln">by</span><span class="pun">-</span><span class="pln">substring</span><span class="pun">&lt;/</span><span class="pln">algorithm</span><span class="pun">&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;/</span><span class="pln">rule</span><span class="pun">&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">tableRule</span><span class="pun">&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pun">&lt;</span><span class="pln">function name</span><span class="pun">=</span><span class="str">"sharding-by-substring"</span><span class="pln"> </span><span class="kwd">class</span><span class="pun">=</span><span class="str">"org.opencloudb.route.function.PartitionDirectBySubString"</span><span class="pun">&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"startIndex"</span><span class="pun">&gt;</span><span class="lit">0</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;&lt;!--</span><span class="pln"> zero</span><span class="pun">-</span><span class="pln">based </span><span class="pun">--&gt;</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"size"</span><span class="pun">&gt;</span><span class="lit">2</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"partitionCount"</span><span class="pun">&gt;</span><span class="lit">8</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"defaultPartition"</span><span class="pun">&gt;</span><span class="lit">0</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">function</span><span class="pun">&gt;</span></code></li></ol></pre></div><div><br></div></div><div>配置说明：</div><div>columns 标识将要分片的表字段，</div><div>algorithm 分片函数</div><div>此方法为直接根据字符子串（必须是数字）计算分区号（由应用传递参数，显式指定分区号）。</div><div>例如 id=05-100000002</div><div>在此配置中代表根据 id 中从 startIndex=0，开始，截取 siz=2 位数字即 05，05 就是获取的分区，如果没传默认分配到 defaultPartition。</div><div>如id=08-100000002,截取size=2位，即08。</div><div><br></div><h5>9. 截取数字 hash 解析</h5><div>此规则是截取字符串中的 int 数值 hash 分片。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">tableRule name</span><span class="pun">=</span><span class="str">"sharding-by-stringhash"</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="str">&lt;rule&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="str">&lt;columns&gt;</span><span class="pln">user_id</span><span class="pun">&lt;/</span><span class="pln">columns</span><span class="pun">&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">        </span><span class="str">&lt;algorithm&gt;</span><span class="pln">sharding</span><span class="pun">-</span><span class="pln">by</span><span class="pun">-</span><span class="pln">stringhash</span><span class="pun">&lt;/</span><span class="pln">algorithm</span><span class="pun">&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;/</span><span class="pln">rule</span><span class="pun">&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">tableRule</span><span class="pun">&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pun">&lt;</span><span class="pln">function name</span><span class="pun">=</span><span class="str">"sharding-by-stringhash"</span><span class="pln"> </span><span class="kwd">class</span><span class="pun">=</span><span class="str">"org.opencloudb.route.function.PartitionByString"</span><span class="pun">&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"partitionLength"</span><span class="pun">&gt;</span><span class="lit">512</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;&lt;!--</span><span class="pln"> zero</span><span class="pun">-</span><span class="pln">based </span><span class="pun">--&gt;</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"partitionCount"</span><span class="pun">&gt;</span><span class="lit">2</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"hashSlice"</span><span class="pun">&gt;</span><span class="lit">0</span><span class="pun">:</span><span class="lit">2</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L0"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">function</span><span class="pun">&gt;</span></code></li></ol></pre></div><div><br></div></div><div>配置说明：</div><div>columns 标识将要分片的表字段，</div><div>algorithm 分片函数，</div><div>函数中</div><div>partitionLength代表字符串 hash 求模基数，</div><div>partitionCount 分区数，</div><div>hashSlice hash预算位，即根据子字符串中 int值hash运算</div><div><br></div><h5>10. 一致性 hash</h5><div>一致性 hash 预算有效解决了分布式数据的扩容问题。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">tableRule name</span><span class="pun">=</span><span class="str">"sharding-by-murmur"</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="str">&lt;rule&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="str">&lt;columns&gt;</span><span class="pln">user_id</span><span class="pun">&lt;/</span><span class="pln">columns</span><span class="pun">&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">        </span><span class="str">&lt;algorithm&gt;</span><span class="pln">murmur</span><span class="pun">&lt;/</span><span class="pln">algorithm</span><span class="pun">&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">rule</span><span class="pun">&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">tableRule</span><span class="pun">&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pun">&lt;</span><span class="pln">function name</span><span class="pun">=</span><span class="str">"murmur"</span><span class="pln"> </span><span class="kwd">class</span><span class="pun">=</span><span class="str">"org.opencloudb.route.function.PartitionByMurmurHash"</span><span class="pun">&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"seed"</span><span class="pun">&gt;</span><span class="lit">0</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;&lt;!--</span><span class="pln"> </span><span class="pun">默认是</span><span class="pln"> </span><span class="lit">0</span><span class="pun">--&gt;</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"count"</span><span class="pun">&gt;</span><span class="lit">2</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;&lt;!--</span><span class="pln"> </span><span class="pun">要分片的数据库节点数量，必须指定，否则没法分片--&gt;</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"virtualBucketTimes"</span><span class="pun">&gt;</span><span class="lit">160</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;&lt;!--</span><span class="pln"> </span><span class="pun">一个实际的数据库节点被映射为这么多虚拟节点，默认是</span><span class="pln"> </span><span class="lit">160</span><span class="pln"> </span><span class="pun">倍，也就是虚拟节点数是物理节点数的</span><span class="pln"> </span><span class="lit">160</span><span class="pln"> </span><span class="pun">倍--&gt;</span></code></li><li class="L0"><code class="language-c"><span class="pun">&lt;!--</span></code></li><li class="L1"><code class="language-c"><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"weightMapFile"</span><span class="pun">&gt;</span><span class="pln">weightMapFile</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pun">节点的权重，没有指定权重的节点默认是</span><span class="pln"> </span><span class="lit">1</span><span class="pun">。以</span><span class="pln"> properties </span><span class="pun">文件的格式填写，以从</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">开始到</span><span class="pln"> count</span><span class="pun">-</span><span class="lit">1</span><span class="pln"> </span><span class="pun">的整数值也就是节点索引为</span><span class="pln"> key</span><span class="pun">，以节点权重值为值。所有权重值必须是正整数，否则以</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="pun">代替</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pun">&lt;!--</span></code></li><li class="L4"><code class="language-c"><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"bucketMapPath"</span><span class="pun">&gt;/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">mycat</span><span class="pun">/</span><span class="pln">bucketMapPath</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pun">用于测试时观察各物理节点与虚拟节点的分布情况，如果指定了这个属性，会把虚拟节点的</span><span class="pln"> murmur hash </span><span class="pun">值与物理节点的映射按行输出到这个文件，没有默认值，如果不指定，就不会输出任何东西</span><span class="pln"> </span><span class="pun">--&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">function</span><span class="pun">&gt;</span></code></li></ol></pre></div><div><br></div></div><h5>11. 按单月小时拆分</h5><div>此规则是单月内按照小时拆分，最小粒度是小时，可以一天最多 24 个分片，最少 1 个分片，一个月完后下月从头开始循环。</div><div>每个月月尾，需要手工清理数据。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">tableRule name</span><span class="pun">=</span><span class="str">"sharding-by-hour"</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="str">&lt;rule&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="str">&lt;columns&gt;</span><span class="pln">create_time</span><span class="pun">&lt;/</span><span class="pln">columns</span><span class="pun">&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">        </span><span class="str">&lt;algorithm&gt;</span><span class="pln">sharding</span><span class="pun">-</span><span class="pln">by</span><span class="pun">-</span><span class="pln">hour</span><span class="pun">&lt;/</span><span class="pln">algorithm</span><span class="pun">&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">rule</span><span class="pun">&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">tableRule</span><span class="pun">&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pun">&lt;</span><span class="pln">function name</span><span class="pun">=</span><span class="str">"sharding-by-hour"</span><span class="pln"> </span><span class="kwd">class</span><span class="pun">=</span><span class="str">"org.opencloudb.route.function.LatestMonthPartion"</span><span class="pun">&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="kwd">property</span><span class="pln"> name</span><span class="pun">=</span><span class="str">"splitOneDay"</span><span class="pun">&gt;</span><span class="lit">24</span><span class="pun">&lt;/</span><span class="kwd">property</span><span class="pun">&gt;</span></code></li><li class="L8"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">function</span><span class="pun">&gt;</span></code></li></ol></pre></div><div><br></div></div><div>配置说明：</div><div>columns： 拆分字段，字符串类型（yyyymmddHH）</div><div>splitOneDay ： 一天切分的分片数</div><div><br></div><h5>12. 范围求模分片</h5><div><br></div><h5>13. 日期范围 hash 分片</h5><div><br></div><h5>14. 冷热数据分片</h5><div><br></div><h5>15. 自然月分片</h5><div><br></div><div>按月份列分区 ，每个自然月一个分片，格式 between 操作解析的范例。</div><div><br></div><h4>MyCat读写分离、主从模式下切换主从</h4></div><div><div><div>有关读写分离分发规则的相关dataHost标签属性：</div><div><ol><li>balance&nbsp; &nbsp;&nbsp;负载均衡类型，目前取值有3种：<br></li></ol></div><div>(1) balance="0", 不开启读写分离机制，所有读操作都发送到当前可用的writeHost上。</div><div>(2) balance="1"，全部的readHost与stand by writeHost 参与select语句负载均衡，简单的说，当双主双从模式(M1-&gt;S1，M2-&gt;S2，并且M1与M2互为主备)，M2,S1,S2 都参与select语句的负载均衡。(类似于balance=3,读操作只分发到除了真正的主节点之外的所有节点)</div><div>(3) balance="2"，所有读操作都随机的在 writeHost、 readhost 上分发。</div><div>(4) balance="3"，所有读请求随机的分发到 writeHost 对应的readhost执行，writeHost不负担读压力，注意 balance=3 在 1.4 及其以后版本才有，1.3 没有。</div><div>&nbsp;</div><div>balance值设置为1和设置成3效果应该是一样的。</div><div>&nbsp;</div><div>有关主从(读写角色)切换设置属性规则的相关dataHost标签属性</div><div>1. switchType值：<br></div><div>(1) -1&nbsp; &nbsp;&nbsp;表示不自动切换</div><div>(2) 1&nbsp; &nbsp;&nbsp;默认值，自动切换</div><div>(3) 2&nbsp; &nbsp;&nbsp;基于mysql主从同步的状态决定是否切换</div><div>(4) 3&nbsp; &nbsp;&nbsp;基于cluster的切换，心跳语句要改成show status like 'wsrep%',这个里面配置的都是writehost</div><div>&nbsp;</div><div>switchType值设置为1，表示自动切换，某些对主从数据一致要求较高的场景，建议使用2判断主从状态后再切换，或者使用galera cluster保证各节点数据一致性，将此值设置为3。</div><div>&nbsp;切换的触发条件为主节点mysql服务崩溃或停止。</div><div>&nbsp;</div><div>2. slaveThreshold&nbsp; &nbsp;&nbsp;主从的延迟在多少秒以内，则把读请求分发到这个从节点</div><div>&nbsp;<br></div><div>有关写请求是否分发到多个写节点规则的相关dataHost标签属性</div><div>1. writeType值：</div><div>(1) 0&nbsp; &nbsp;&nbsp;表示只分发到当前的主节点</div><div>(2) 1&nbsp; &nbsp;&nbsp;表示分发到所有设定为writeHost的节点，不推荐使用，好像现在版本已经废除</div><div><br></div></div><div><br></div><div>若不想要自动切换功能，即 MySQL 写节点宕机后不自动切换到备用节点，则如下配置：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">dataHost name</span><span class="pun">=</span><span class="str">"localhost1"</span><span class="pln"> maxCon</span><span class="pun">=</span><span class="str">"1000"</span><span class="pln"> minCon</span><span class="pun">=</span><span class="str">"10"</span><span class="pln"> balance</span><span class="pun">=</span><span class="str">"1"</span><span class="pln"> writeType</span><span class="pun">=</span><span class="str">"0"</span><span class="pln"> dbType</span><span class="pun">=</span><span class="str">"mysql"</span><span class="pln"> dbDriver</span><span class="pun">=</span><span class="str">"native"</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="str">&lt;heartbeat&gt;</span><span class="pln">select user</span><span class="pun">()&lt;/</span><span class="pln">heartbeat</span><span class="pun">&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;!--</span><span class="pln"> can have multi write hosts </span><span class="pun">--&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">writeHost host</span><span class="pun">=</span><span class="str">"hostM1"</span><span class="pln"> url</span><span class="pun">=</span><span class="str">"localhost:3306"</span><span class="pln"> user</span><span class="pun">=</span><span class="str">"root"</span><span class="pln"> password</span><span class="pun">=</span><span class="str">"123456"</span><span class="pun">&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">   </span><span class="pun">&lt;!--</span><span class="pln"> can have multi read hosts </span><span class="pun">--&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">readHost host</span><span class="pun">=</span><span class="str">"hostS1"</span><span class="pln"> url</span><span class="pun">=</span><span class="str">"localhost2:3306"</span><span class="pln"> user</span><span class="pun">=</span><span class="str">"root"</span><span class="pln"> password</span><span class="pun">=</span><span class="str">"123456"</span><span class="pln"> </span><span class="pun">/&gt;</span><span class="pln"> </span></code></li><li class="L6"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;/</span><span class="pln">writeHost</span><span class="pun">&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">dataHost</span><span class="pun">&gt;</span></code></li></ol></pre></div><div>如果要实现自动切换到备用节点，则如下配置：</div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">dataHost name</span><span class="pun">=</span><span class="str">"localhost1"</span><span class="pln"> maxCon</span><span class="pun">=</span><span class="str">"1000"</span><span class="pln"> minCon</span><span class="pun">=</span><span class="str">"10"</span><span class="pln"> balance</span><span class="pun">=</span><span class="str">"1"</span><span class="pln"> writeType</span><span class="pun">=</span><span class="str">"0"</span><span class="pln"> dbType</span><span class="pun">=</span><span class="str">"mysql"</span><span class="pln"> dbDriver</span><span class="pun">=</span><span class="str">"native"</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="str">&lt;heartbeat&gt;</span><span class="pln">select user</span><span class="pun">()&lt;/</span><span class="pln">heartbeat</span><span class="pun">&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;!--</span><span class="pln"> can have multi write hosts </span><span class="pun">--&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">writeHost host</span><span class="pun">=</span><span class="str">"hostM1"</span><span class="pln"> url</span><span class="pun">=</span><span class="str">"localhost:3306"</span><span class="pln"> user</span><span class="pun">=</span><span class="str">"root"</span><span class="pln"> password</span><span class="pun">=</span><span class="str">"123456"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;</span><span class="pln">writeHost host</span><span class="pun">=</span><span class="str">"hostS1"</span><span class="pln"> url</span><span class="pun">=</span><span class="str">"localhost2:3306"</span><span class="pln"> user</span><span class="pun">=</span><span class="str">"root"</span><span class="pln"> password</span><span class="pun">=</span><span class="str">"123456"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">dataHost</span><span class="pun">&gt;</span></code></li></ol></pre></div><div>此时，第一个writeHost故障后，会自动切换到第二个，第二个故障后自动切换到第三个，当你是1主3从的模式的时候，可以把第一个从节点配置为writeHost2，第2个和第三个从节点则配置为 writeHost1的readHost，如下所示：</div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">dataHost name</span><span class="pun">=</span><span class="str">"localhost1"</span><span class="pln"> maxCon</span><span class="pun">=</span><span class="str">"1000"</span><span class="pln"> minCon</span><span class="pun">=</span><span class="str">"10"</span><span class="pln"> balance</span><span class="pun">=</span><span class="str">"1"</span><span class="pln"> writeType</span><span class="pun">=</span><span class="str">"0"</span><span class="pln"> dbType</span><span class="pun">=</span><span class="str">"mysql"</span><span class="pln"> dbDriver</span><span class="pun">=</span><span class="str">"native"</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="str">&lt;heartbeat&gt;</span><span class="pln">select user</span><span class="pun">()&lt;/</span><span class="pln">heartbeat</span><span class="pun">&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;</span><span class="pln">writeHost host</span><span class="pun">=</span><span class="str">"hostM1"</span><span class="pln"> url</span><span class="pun">=</span><span class="str">"localhost:3306"</span><span class="pln"> user</span><span class="pun">=</span><span class="str">"root"</span><span class="pln"> password</span><span class="pun">=</span><span class="str">"123456"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">readHost host</span><span class="pun">=</span><span class="str">"hostS2"</span><span class="pln"> url</span><span class="pun">=</span><span class="str">"localhost3:3306"</span><span class="pln"> user</span><span class="pun">=</span><span class="str">"root"</span><span class="pln"> password</span><span class="pun">=</span><span class="str">"123456"</span><span class="pln"> </span><span class="pun">/&gt;</span><span class="pln"> </span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">readHost host</span><span class="pun">=</span><span class="str">"hostS3"</span><span class="pln"> url</span><span class="pun">=</span><span class="str">"localhos4t:3306"</span><span class="pln"> user</span><span class="pun">=</span><span class="str">"root"</span><span class="pln"> password</span><span class="pun">=</span><span class="str">"123456"</span><span class="pln"> </span><span class="pun">/&gt;</span><span class="pln"> </span></code></li><li class="L5"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;/</span><span class="pln">writeHost</span><span class="pun">&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;</span><span class="pln">writeHost host</span><span class="pun">=</span><span class="str">"hostS1"</span><span class="pln"> url</span><span class="pun">=</span><span class="str">"localhost2:3306"</span><span class="pln"> user</span><span class="pun">=</span><span class="str">"root"</span><span class="pln"> password</span><span class="pun">=</span><span class="str">"123456"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li><li class="L7"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">dataHost</span><span class="pun">&gt;</span></code></li></ol></pre></div><div><br></div></div></div><div><div>如果读延时较大，使用根据主从延时的读写分离，或者强制走写节点。<br></div></div><div>应用强制走写:<br></div><div><div>1.6 以后添加了强制走读走写处理:</div><div>强制走从:</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="com">/*!mycat:db_type=slave*/</span><span class="pln"> select </span><span class="pun">*</span><span class="pln"> from travelrecord</span></code></li><li class="L1"><code class="language-c"><span class="com">/*#mycat:db_type=slave*/</span><span class="pln"> select </span><span class="pun">*</span><span class="pln"> from travelrecord</span></code>&nbsp;</li></ol></pre></div></div><div>强制走写:</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="com">/*#mycat:db_type=master*/</span><span class="pln"> select </span><span class="pun">*</span><span class="pln"> from travelrecord </span></code></li><li class="L1"><code class="language-c"><span class="com">/*!mycat:db_type=master*/</span><span class="pln"> select </span><span class="pun">*</span><span class="pln"> from travelrecord</span></code></li></ol></pre></div><div><div><br></div><div>mysql主从备份是异步的复制，所以主从库存在一定的差距，在从库上进行的查询操作需要考虑到这些数据的差异，一般只有更新不频繁的数据或对实时性要求不高的数据可以通过从库查询，实时性要求高的数据仍然需要从主数据库获得。<br></div><div><br></div><div>为了减少主从复制的时延，也建议采用 MySQL 5.6+的版本，用 GTID 同步复制方式减少复制的时延。</div><div>对于某些表，要求不能有复制时延，则可以考虑这些表放到Gluster集群里，消除同步复制的时延问题。</div></div></div></div><div><br></div><div><br></div><div><div>MyCat1.4开始支持 MySQL 主从复制状态绑定的读写分离机制，让读更加安全可靠，配置如下：</div><div><ul><li>MyCAT 心跳检查语句配置为 show slave status；</li><li>dataHost 上定义两个新属性: switchType="2" 与slaveThreshold="100"，此时意味着开启 MySQL 主从复制状态绑定的读写分离与切换机制。</li></ul>Mycat 心跳机制通过读取"show slave status"中的 "Seconds_Behind_Master", "Slave_IO_Running","Slave_SQL_Running" 三个字段来确定当前主从同步的状态，以及 Seconds_Behind_Master 主从复制时延，当 Seconds_Behind_Master&gt;slaveThreshold 时，读写分离筛选器会过滤掉此 Slave 机器，防止读到很久之</div><div>前的旧数据，而当主节点宕机后，切换逻辑会检查 Slave 上的 Seconds_Behind_Master 是否为 0，为 0 时则表示主从同步，可以安全切换，否则不会切换。</div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">dataHost name</span><span class="pun">=</span><span class="str">"localhost1"</span><span class="pln"> maxCon</span><span class="pun">=</span><span class="str">"1000"</span><span class="pln"> minCon</span><span class="pun">=</span><span class="str">"10"</span><span class="pln"> balance</span><span class="pun">=</span><span class="str">"0"</span><span class="pln"> writeType</span><span class="pun">=</span><span class="str">"0"</span><span class="pln"> dbType</span><span class="pun">=</span><span class="str">"mysql"</span><span class="pln"> dbDriver</span><span class="pun">=</span><span class="str">"native"</span><span class="pln"> switchType</span><span class="pun">=</span><span class="str">"2"</span><span class="pln"> slaveThreshold</span><span class="pun">=</span><span class="str">"100"</span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="str">&lt;heartbeat&gt;</span><span class="pln">show slave status </span><span class="pun">&lt;/</span><span class="pln">heartbeat</span><span class="pun">&gt;</span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="pun">&lt;!--</span><span class="pln"> can have multi write hosts </span><span class="pun">--&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">writeHost host</span><span class="pun">=</span><span class="str">"hostM1"</span><span class="pln"> url</span><span class="pun">=</span><span class="str">"localhost:3306"</span><span class="pln"> user</span><span class="pun">=</span><span class="str">"root"</span><span class="pln"> password</span><span class="pun">=</span><span class="str">"123456"</span><span class="pun">&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pln"> </span><span class="pun">&lt;/</span><span class="pln">writeHost</span><span class="pun">&gt;</span></code></li><li class="L5"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;</span><span class="pln">writeHost host</span><span class="pun">=</span><span class="str">"hostS1"</span><span class="pln"> url</span><span class="pun">=</span><span class="str">"localhost:3316"</span><span class="pln"> user</span><span class="pun">=</span><span class="str">"root"</span><span class="pln"> password</span><span class="pun">=</span><span class="str">"123456"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></li><li class="L6"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">dataHost</span><span class="pun">&gt;</span></code></li></ol></pre></div><div><div><br></div><div>Mycat1.4.1 开始支持 galary cluster 集群的配置，提高心跳可用。<br></div><div>1.4.1开始支持MySQL 多主集群模式，让读更加安全可靠，配置如下: MyCAT 心跳检查语句配置为 show status like ‘wsrep%’ ，dataHost 上定义两个新属性:switchType="3"。</div><div>此时意味着开启 MySQL 集群复制状态状态绑定的读写分离与切换机制，Mycat 心跳机制通过检测集群复制时延时，如果延时过大或者集群出现节点问题不会负载改节点。</div></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">&lt;</span><span class="pln">dataHost name</span><span class="pun">=</span><span class="str">"localhost1"</span><span class="pln"> maxCon</span><span class="pun">=</span><span class="str">"1000"</span><span class="pln"> minCon</span><span class="pun">=</span><span class="str">"10"</span><span class="pln"> balance</span><span class="pun">=</span><span class="str">"0"</span><span class="pln"> writeType</span><span class="pun">=</span><span class="str">"0"</span><span class="pln"> dbType</span><span class="pun">=</span><span class="str">"mysql"</span><span class="pln"> dbDriver</span><span class="pun">=</span><span class="str">"native"</span><span class="pln"> switchType</span><span class="pun">=</span><span class="str">"3"</span><span class="pln"> </span><span class="pun">&gt;</span></code></li><li class="L1"><code class="language-c"><span class="pln"> </span><span class="str">&lt;heartbeat&gt;</span><span class="pln"> show status like </span><span class="pun">‘</span><span class="pln">wsrep</span><span class="pun">%’&lt;/</span><span class="pln">heartbeat</span><span class="pun">&gt;</span><span class="pln"> </span></code></li><li class="L2"><code class="language-c"><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">writeHost host</span><span class="pun">=</span><span class="str">"hostM1"</span><span class="pln"> url</span><span class="pun">=</span><span class="str">"localhost:3306"</span><span class="pln"> user</span><span class="pun">=</span><span class="str">"root"</span><span class="pln"> password</span><span class="pun">=</span><span class="str">"123456"</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">&lt;/</span><span class="pln">writeHost</span><span class="pun">&gt;</span></code></li><li class="L3"><code class="language-c"><span class="pln">  </span><span class="pun">&lt;</span><span class="pln">writeHost host</span><span class="pun">=</span><span class="str">"hostS1"</span><span class="pln"> url</span><span class="pun">=</span><span class="str">"localhost:3316"</span><span class="pln"> user</span><span class="pun">=</span><span class="str">"root"</span><span class="pln"> password</span><span class="pun">=</span><span class="str">"123456"</span><span class="pln"> </span><span class="pun">&gt;&lt;/</span><span class="pln">writeHost</span><span class="pun">&gt;</span></code></li><li class="L4"><code class="language-c"><span class="pun">&lt;/</span><span class="pln">dataHost</span><span class="pun">&gt;</span></code></li></ol></pre></div><div><br></div></div><h4>Mycat 里的数据库事务</h4><div><div>Mycat 目前没有出来跨分片的事务强一致性支持，目前单库内部可以保证事务的完整性，如果跨库事务， 在执行的时候任何分片出错，可以保证所有分片回滚，但是一旦应用发起 commit 指令，无法保证所有分片都成功，考虑到某个分片挂的可能性不大所以称为弱 xa。</div></div><div><br></div><div><br></div><h4>MyCat扩容缩容、数据迁移</h4><div><div>利用MyCat自带脚本dataMigrate.sh进行离线扩容缩容</div><div>1.复制schema.xml、rule.xml并重命名为newSchema.xml、newRule.xml，修改newSchema.xml和newRule.xml配置文件为扩容缩容后的mycat配置参数(表的节点数、 数据源、路由规则)；</div><div>2.修改 conf 目录下的 migrateTables.properties 配置文件，告诉工具哪些表需要进行扩容或缩 容,没有出现在此配置文件的 schema 表不会进行数据迁移；</div><div>3.如果可以确保扩容缩容过程中不会有写操作，也可以不停止mycat服务；</div><div>4.执行bin/dataMigrate.sh 脚本。</div><div><br></div><div>使用mysqldump进行数据迁移，和mysql没区别，直接dump进文本文件。</div></div></div><ul></ul></div><div><span lang="EN-GB"><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN"><div style="font-family: &quot;Helvetica Neue&quot;;"><br></div><h3 style="font-family: &quot;Helvetica Neue&quot;;">Influxdb</h3><div><div>时序数据是基于时间的一系列的数据。</div><div>时序数据库就是存放时序数据的数据库，并且需要支持时序数据的快速写入、持久化、多纬度的聚合查询等基本功能。</div><div><br></div><div>下面介绍下时序数据库的一些基本概念(不同的时序数据库称呼略有不同)。</div><div><ul><li>metric: 度量，相当于关系型数据库中的table。</li><li>data point: 数据点，相当于关系型数据库中的row。</li><li>timestamp：时间戳，代表数据点产生的时间。</li><li>field: 度量下的不同字段。比如位置这个度量具有经度和纬度两个field。一般情况下存放的是会随着时间戳的变化而变化的数据。</li><li>tag: 标签，或者附加信息。一般存放的是并不随着时间戳变化的属性信息。timestamp加上所有的tags可以认为是table的primary key。</li></ul></div><div><br></div><div>如下图，度量为Wind，每一个数据点都具有一个timestamp，两个field：direction和speed，两个tag：sensor、city。它的第一行和第三行，存放的都是sensor号码为95D8-7913的设备，属性城市是上海。随着时间的变化，风向和风速都发生了改变，风向从23.4变成23.2;而风速从3.4变成了3.3。</div><div><div><img border="0" src="All in_files/36973657.png"></div></div><div>传统数据库存储采用的都是B tree，这是由于其在查询和顺序插入时有利于减少寻道次数的组织形式。时序数据库采用的LSM Tree，比如Hbase, Cassandra等nosql中。</div><div>InfluxDB有三大特性：</div><div>1. Time Series （时间序列）：你可以使用与时间有关的相关函数（如最大，最小，求和等）</div><div>2. Metrics（度量）：你可以实时对大量数据进行计算</div><div>3. Eevents（事件）：它支持任意的事件数据</div><div><br></div><div>InfluxDB 支持两种api方式</div><div>HTTP API,InfluxDB 增删更查都是用http api来完成.</div><div>Protobuf API,还没完全实现。</div><div><br></div><div>如何使用 http api 进行操作？</div><div>比如对于foo_production这个数据库，插入一系列数据，可以发现POST 请求到 /db/foo_production/series?u=some_user&amp;p=some_password, 数据放到body里。</div><div>数据看起来是这样的:</div><div>下面的"name": "events", 其中"events"就是一个series,类似关系型数据库的表table</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">[</span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span><span class="pun">{</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="str">"name"</span><span class="pun">:</span><span class="pln"> </span><span class="str">"events"</span><span class="pun">,</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="str">"columns"</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="str">"state"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"email"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"type"</span><span class="pun">],</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="str">"points"</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></code></li><li class="L5"><code class="language-c"><span class="pln">      </span><span class="pun">[</span><span class="str">"ny"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"paul@influxdb.org"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"follow"</span><span class="pun">],</span></code></li><li class="L6"><code class="language-c"><span class="pln">      </span><span class="pun">[</span><span class="str">"ny"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"todd@influxdb.org"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"open"</span><span class="pun">]</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">]</span></code></li><li class="L8"><code class="language-c"><span class="pln">  </span><span class="pun">},</span></code></li><li class="L9"><code class="language-c"><span class="pln">  </span><span class="pun">{</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="str">"name"</span><span class="pun">:</span><span class="pln"> </span><span class="str">"errors"</span><span class="pun">,</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="str">"columns"</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="str">"class"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"file"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"user"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"severity"</span><span class="pun">],</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="str">"points"</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></code></li><li class="L3"><code class="language-c"><span class="pln">      </span><span class="pun">[</span><span class="str">"DivideByZero"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"example.py"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"someguy@influxdb.org"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"fatal"</span><span class="pun">]</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">]</span></code></li><li class="L5"><code class="language-c"><span class="pln">  </span><span class="pun">}</span></code></li><li class="L6"><code class="language-c"><span class="pun">]</span></code></li></ol></pre></div></div><div>上面的数据里没有包含time 列，InfluxDB会自己加上，不过也可以指定time.</div><div><br></div><div>InfluxDB 提供了类似sql的查询语言</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">select </span><span class="pun">*</span><span class="pln"> from events </span><span class="kwd">where</span><span class="pln"> state </span><span class="pun">==</span><span class="pln"> </span><span class="str">'NY'</span><span class="pun">;</span></code></li><li class="L1"><code class="language-c"><span class="pln">select </span><span class="pun">*</span><span class="pln"> from log_lines </span><span class="kwd">where</span><span class="pln"> line </span><span class="pun">=~</span><span class="pln"> </span><span class="pun">/</span><span class="pln">error</span><span class="pun">/</span><span class="pln">i</span><span class="pun">;</span><span class="pln"> </span></code></li><li class="L2"><code class="language-c"><span class="pln">select </span><span class="pun">*</span><span class="pln"> from events </span><span class="kwd">where</span><span class="pln"> customer_id </span><span class="pun">==</span><span class="pln"> </span><span class="lit">23</span><span class="pln"> and type </span><span class="pun">==</span><span class="pln"> </span><span class="str">'click'</span><span class="pun">;</span></code></li><li class="L3"><code class="language-c"><span class="pln">select </span><span class="pun">*</span><span class="pln"> from response_times </span><span class="kwd">where</span><span class="pln"> value </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">500</span><span class="pun">;</span><span class="pln"> </span></code></li><li class="L4"><code class="language-c"><span class="pln">select </span><span class="pun">*</span><span class="pln"> from events </span><span class="kwd">where</span><span class="pln"> email </span><span class="pun">!~</span><span class="pln"> </span><span class="pun">/.*</span><span class="pln">gmail</span><span class="pun">.*/;</span></code></li><li class="L5"><code class="language-c"><span class="pln">select </span><span class="pun">*</span><span class="pln"> from nagios_checks </span><span class="kwd">where</span><span class="pln"> status </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span></code></li><li class="L6"><code class="language-c"><span class="pln">select </span><span class="pun">*</span><span class="pln"> from events </span><span class="kwd">where</span><span class="pln"> </span><span class="pun">(</span><span class="pln">email </span><span class="pun">=~</span><span class="pln"> </span><span class="pun">/.*</span><span class="pln">gmail</span><span class="pun">.*</span><span class="pln"> or email </span><span class="pun">=~</span><span class="pln"> </span><span class="pun">/.*</span><span class="pln">yahoo</span><span class="pun">.*/)</span><span class="pln"> and state </span><span class="pun">==</span><span class="pln"> </span><span class="str">'ny'</span><span class="pun">;</span></code></li><li class="L7"><code class="language-c"><span class="kwd">delete</span><span class="pln"> from response_times </span><span class="kwd">where</span><span class="pln"> time </span><span class="pun">&gt;</span><span class="pln"> now</span><span class="pun">()</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1h</span></code></li></ol></pre></div><div><br></div></div></div><div style="font-family: &quot;Helvetica Neue&quot;;"><div style="border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>Redis</h2></div><div style="line-height: 24.2667px;"><h3 style="line-height: 24.2667px;">Redis与Memcached区别</h3><div style="line-height: 24.2667px;"><ul><li>Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li><li>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis只会缓存所有的 key的信息，如果Redis发现内存的使用量超过了某一个阀值，将触发swap的操作，Redis会计算出哪些key对应的value需要swap到磁盘。然后再将这些key对应的value持久化到磁盘中，同时在内存中清除。(看Redis内存限制即回收key策略)</li><li>Memcached是多线程，非阻塞IO复用的网络模型。Redis使用单线程的IO复用模型，主要实现了epoll、kqueue和select。</li><li>memcached的简单限制就是键（key）和item的限制。最大键长为250个字符。可以接受的储存数据不能超过1MB。Redis的key 512K，值最大为1G。</li></ul></div></div></div><div style="font-family: &quot;Helvetica Neue&quot;;"></div></span></w:sdt></span></div><div><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN"><div style="line-height: 24.2667px;"><br></div><h3 style="line-height: 24.2667px;">Redis逻辑集群介绍</h3><div><div><span style="line-height: 24.2667px;"><div>Redis Cluster是一种服务器Sharding技术，3.0版本开始正式提供。Sharding采用slot(槽)的概念，一共分成16384个槽。对于每个进入Redis的键值对，对key使用hash算法散列，分配到这16384个slot中的某一个中。N个主各划分所有槽，每个主又有n个slave从节点。比如有3个机器，我们准备搭一个3主2从的架构，3个主依次划分0-5461，5462-10922，10923-16384，每个主下面又挂一个备。根据gossip无中心选举算法，当哪个主挂掉后，n个slave从节点。强烈建议要1:1的模式，条件允许的情况下，建议1:n的模式。</div><div>庆幸的是，java redis客户端驱动jedis，已支持Redis Sharding功能，即ShardedJedis以及结合缓存池的ShardedJedisPool。</div><div><br></div><div><div>Redis Cluster采用无中心结构，每个节点都保存数据和整个集群的状态</div><div>每个节点都和其他所有节点连接，这些连接保持活跃。节点的fail是通过集群中超过半数的节点检测失效时才生效。客户端与redis节点直连,不需要中间proxy层。客户端不需要连接集群所有节点,连接集群中任何一个可用节点即可。redis-cluster把所有的物理节点映射到[0-16383]slot上,cluster 负责维护node&lt;-&gt;slot&lt;-&gt;value。</div><div>使用gossip协议传播信息以及发现新节点。3.0以前使用的raft数据一致性算法，现在把raft改造，符合选多主的算法gossip。</div><div>选举过程是集群中所有master参与,如果半数以上master节点与master节点通信超过，认为当前master节点挂掉。<br></div><div>node不作为client请求的代理，client根据node返回的错误信息重定向请求</div></div><div><div>预分好16384个桶，根据 CRC16(key) mod 16384的值，决定将一个key放到哪个桶中。每个Redis物理结点负责一部分桶的管理，当发生Redis节点的增减时，调整桶的分布即可。</div></div><div><div>为了保证服务的可用性，Redis Cluster采取的方案是的Master-Slave。每个Redis Node可以有一个或者多个Slave。当Master挂掉时，选举一个Slave形成新的Master。一个Redis &nbsp;Node包含一定量的桶，当这些桶对应的Master和Slave都挂掉时，这部分桶对应的数据不可用。</div></div><div><br></div><div><div>Redis Cluster使用异步复制，一个完整的写操作步骤：</div><div>1. client写数据到master</div><div>2. master告诉client "ok"</div><div>3. Redis Cluster支持在线增/减节点。</div><div><br></div><div>基于桶的数据分布方式大大降低了迁移成本，只需将数据桶从一个Redis Node迁移到另一个Redis Node即可完成迁移。</div><div>当桶从一个Node A向另一个Node B迁移时，Node A和Node B都会有这个桶，Node A上桶的状态设置为MIGRATING，Node B上桶的状态被设置为IMPORTING</div><div>当客户端请求时：所有在Node A上的请求都将由A来处理，所有不在A上的key都由Node B来处理。同时，Node A上将不会创建新的keymaster传播更新到slave。</div></div><div><br></div><div><div>当我们以任意连接方式为集群加入一个节点，集群中所有节点都会自动对新节点建立信任连接。也就是说，集群具备自动识别所有节点的功能，但是这仅发生在当系统管理强制为新节点与集群中任意节点建立信任连接的前提下。Redis客户端被允许向集群中的任意节点发送命令，其中包括从节点。被访问的节点将会分析命令中传来的key，并自己通过判断hash slot确定数据存储于哪个节点。如果被请求节点拥有hash slot数据（这里指请求数据未被迁移过或者hash slot在数据迁移后被重新计算过），则会直接返回结果，否则将会返回一个 MOVED 错误。</div><div><br></div><div>MOVED 错误如下：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">GET x</span></code></li><li class="L1"><code class="language-c"><span class="pun">-</span><span class="pln">MOVED </span><span class="lit">3999</span><span class="pln"> </span><span class="lit">127.0</span><span class="pun">.</span><span class="lit">0.1</span><span class="pun">:</span><span class="lit">6381</span></code></li></ol></pre></div></div><div>这个错误包括请求的数据所处的 hash slot（3999） 和 数据目前所属的IP:端口。客户端需要通过访问返回的IP:端口获取数据。即使在客户端请求并等待数据返回的过程中，集群配置已被更改，目标节点依然会返回一个MOVED错误。所以虽然在集群中的节点使用节点ID来确定身份，但是map依然是靠hash slot和Redis节点的IP:端口来进行配对。客户端虽然不被要求但是应该尝试去记住hash slot 3999现在已被转移至127.0.0.1:6381。这样的话，当一个新的命令需要从hash slot 3999获取数据时就可以有更高的几率从hash slot获取到正确的目标节点。假设集群已经足够的稳定（不增删节点），那么所有的客户端将会拥有一份hash slots对应节点的数据，这可以使整个集群更高效，因为这样每个命令都会直接定向到正确的节点，不需要通过节点寻找节点或者重新计算hash slot对应的节点。</div></div><div><br></div></span></div><div><span style="line-height: 24.2667px;"><b>环境搭建：</b></span></div><div><span style="line-height: 24.2667px;">选两台机器，每个机器启动三个redis进程，启动时指定各自的redis.conf。</span></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-go"><span class="pln">cd </span><span class="pun">/</span><span class="pln">usr</span><span class="pun">/</span><span class="pln">software</span></code></li><li class="L1"><code class="language-go"><span class="pln">redis</span><span class="pun">-</span><span class="pln">server  redis_cluster</span><span class="pun">/</span><span class="lit">7000</span><span class="pun">/</span><span class="pln">redis</span><span class="pun">.</span><span class="pln">conf</span></code></li><li class="L2"><code class="language-go"><span class="pln">redis</span><span class="pun">-</span><span class="pln">server  redis_cluster</span><span class="pun">/</span><span class="lit">7001</span><span class="pun">/</span><span class="pln">redis</span><span class="pun">.</span><span class="pln">conf</span></code></li><li class="L3"><code class="language-go"><span class="pln">redis</span><span class="pun">-</span><span class="pln">server  redis_cluster</span><span class="pun">/</span><span class="lit">7002</span><span class="pun">/</span><span class="pln">redis</span><span class="pun">.</span><span class="pln">conf</span></code></li><li class="L4"><code class="language-go"><span class="pln">redis</span><span class="pun">-</span><span class="pln">server  redis_cluster</span><span class="pun">/</span><span class="lit">7003</span><span class="pun">/</span><span class="pln">redis</span><span class="pun">.</span><span class="pln">conf</span></code></li><li class="L5"><code class="language-go"><span class="pln">redis</span><span class="pun">-</span><span class="pln">server  redis_cluster</span><span class="pun">/</span><span class="lit">7004</span><span class="pun">/</span><span class="pln">redis</span><span class="pun">.</span><span class="pln">conf</span></code></li><li class="L6"><code class="language-go"><span class="pln">redis</span><span class="pun">-</span><span class="pln">server  redis_cluster</span><span class="pun">/</span><span class="lit">7005</span><span class="pun">/</span><span class="pln">redis</span><span class="pun">.</span><span class="pln">conf</span></code></li></ol></pre></div></div><div><span style="line-height: 24.2667px;">每个redis.conf结构如下：</span></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-go"><span class="pln">daemonize    yes                          </span><span class="com">//redis后台运行</span></code></li><li class="L1"><code class="language-go"><span class="pln">pidfile  </span><span class="pun">/</span><span class="kwd">var</span><span class="pun">/</span><span class="pln">run</span><span class="pun">/</span><span class="pln">redis_7000</span><span class="pun">.</span><span class="pln">pid          </span><span class="com">//pidfile文件对应7000,7001,7002</span></code></li><li class="L2"><code class="language-go"><span class="pln">port  </span><span class="lit">7000</span><span class="pln">                                </span><span class="com">//端口7000,7002,7003</span></code></li><li class="L3"><code class="language-go"><span class="pln">cluster</span><span class="pun">-</span><span class="pln">enabled  yes                      </span><span class="com">//开启集群  把注释#去掉</span></code></li><li class="L4"><code class="language-go"><span class="pln">cluster</span><span class="pun">-</span><span class="pln">config</span><span class="pun">-</span><span class="pln">file  nodes_7000</span><span class="pun">.</span><span class="pln">conf      </span><span class="com">//集群的配置  配置文件首次启动自动生成 7000,7001,7002</span></code></li><li class="L5"><code class="language-go"><span class="pln">bind </span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">215.130</span><span class="pln">                      </span><span class="com">//这里要绑定机器的IP</span></code></li><li class="L6"><code class="language-go"><span class="pln">cluster</span><span class="pun">-</span><span class="pln">node</span><span class="pun">-</span><span class="pln">timeout  </span><span class="lit">5000</span><span class="pln">                </span><span class="com">//请求超时  设置5秒够了</span></code></li><li class="L7"><code class="language-go"><span class="pln">appendonly  yes                           </span><span class="com">//aof日志开启  有需要就开启，它会每次写操作都记录一条日志</span></code></li></ol></pre></div></div><div><span style="line-height: 24.2667px;">redis的集群是逻辑集群，通过一系列命令组成一个集群环境，为此，redis专门准备了1个ruby写的创建集群脚本</span></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-go"><span class="pun">./</span><span class="pln">redis</span><span class="pun">-</span><span class="pln">trib</span><span class="pun">.</span><span class="pln">rb  create  </span><span class="pun">--</span><span class="pln">replicas  </span><span class="lit">1</span><span class="pln">  </span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">215.129</span><span class="pun">:</span><span class="lit">7000</span><span class="pln"> </span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">215.129</span><span class="pun">:</span><span class="lit">7001</span><span class="pln">  </span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">215.129</span><span class="pun">:</span><span class="lit">7002</span><span class="pln"> </span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">215.130</span><span class="pun">:</span><span class="lit">7003</span><span class="pln">  </span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">215.130</span><span class="pun">:</span><span class="lit">7004</span><span class="pln">  </span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">215.130</span><span class="pun">:</span><span class="lit">7005</span></code></li></ol></pre></div></div><div><span style="line-height: 24.2667px;">–replicas 1 表示 自动为每一个master节点分配一个slave节点 上面有6个节点，程序会按照一定规则生成 3个master（主）3个slave(从)&nbsp;</span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">redis集群中数据分片是通过hash slot的方式实现的</span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">链接服务器</span></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-go"><span class="pun">[</span><span class="pln">root@zk1 src</span><span class="pun">]#</span><span class="pln"> </span><span class="pun">./</span><span class="pln">redis</span><span class="pun">-</span><span class="pln">cli </span><span class="pun">-</span><span class="pln">c </span><span class="pun">-</span><span class="pln">p </span><span class="lit">7000</span><span class="pln"> </span><span class="pun">-</span><span class="pln">h </span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">215.129</span></code></li><li class="L1"><code class="language-go"><span class="lit">192.168</span><span class="pun">.</span><span class="lit">215.129</span><span class="pun">:</span><span class="lit">7000</span><span class="pun">&gt;</span></code></li><li class="L2"><code class="language-go"><span class="lit">192.168</span><span class="pun">.</span><span class="lit">215.129</span><span class="pun">:</span><span class="lit">7000</span><span class="pun">&gt;</span><span class="pln"> cluster info</span></code></li><li class="L3"><code class="language-go"><span class="pln">cluster_state</span><span class="pun">:</span><span class="pln">ok</span></code></li><li class="L4"><code class="language-go"><span class="pln">cluster_slots_assigned</span><span class="pun">:</span><span class="lit">16384</span></code></li><li class="L5"><code class="language-go"><span class="pln">cluster_slots_ok</span><span class="pun">:</span><span class="lit">16384</span></code></li><li class="L6"><code class="language-go"><span class="pln">cluster_slots_pfail</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L7"><code class="language-go"><span class="pln">cluster_slots_fail</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L8"><code class="language-go"><span class="pln">cluster_known_nodes</span><span class="pun">:</span><span class="lit">6</span></code></li><li class="L9"><code class="language-go"><span class="pln">cluster_size</span><span class="pun">:</span><span class="lit">3</span></code></li><li class="L0"><code class="language-go"><span class="pln">cluster_current_epoch</span><span class="pun">:</span><span class="lit">6</span></code></li><li class="L1"><code class="language-go"><span class="pln">cluster_my_epoch</span><span class="pun">:</span><span class="lit">1</span></code></li><li class="L2"><code class="language-go"><span class="pln">cluster_stats_messages_sent</span><span class="pun">:</span><span class="lit">1502</span></code></li><li class="L3"><code class="language-go"><span class="pln">cluster_stats_messages_received</span><span class="pun">:</span><span class="lit">1502</span></code></li></ol></pre></div></div><div><span style="line-height: 24.2667px;">set值</span></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-go"><span class="lit">192.168</span><span class="pun">.</span><span class="lit">215.129</span><span class="pun">:</span><span class="lit">7000</span><span class="pun">&gt;</span><span class="pln"> </span><span class="kwd">set</span><span class="pln"> name lbl</span></code></li><li class="L1"><code class="language-go"><span class="pun">-&gt;</span><span class="pln"> </span><span class="typ">Redirected</span><span class="pln"> to slot </span><span class="pun">[</span><span class="lit">5798</span><span class="pun">]</span><span class="pln"> located at </span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">215.130</span><span class="pun">:</span><span class="lit">7003</span></code></li><li class="L2"><code class="language-go"><span class="pln">OK</span></code></li><li class="L3"><code class="language-go"><span class="lit">192.168</span><span class="pun">.</span><span class="lit">215.130</span><span class="pun">:</span><span class="lit">7003</span><span class="pun">&gt;</span><span class="pln"> </span><span class="kwd">get</span><span class="pln"> name</span></code></li><li class="L4"><code class="language-go"><span class="str">"lbl"</span></code></li></ol></pre></div><div><br></div></div><div><span style="line-height: 24.2667px;">可见，重定向到了130节点7003端口。&nbsp;</span></div><div><span style="line-height: 24.2667px;">原因是redis采用hash槽的方式分发key到不同节点，算法是crc(16)%16384。详细描述后续会单独写文章描述。&nbsp;</span></div><div><span style="line-height: 24.2667px;">而且你会发现，当一次重定向以后，这个客户端就连接到了130:7003这个节点。</span></div><div><span style="line-height: 24.2667px;">当有哪个主宕掉后，自动的原来这个主的从会选成它的主。</span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">新的Redis可以配置密码，所以jedis客户端要使用比较新的版本。这里redis版本是3.2.5，jedis版本是2.9.0</span><br></div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;"><h3 style="line-height: 24.2667px;">Redis 基础</h3><div style="line-height: 24.2667px;">1. Redis数据类型及操作：</div><div style="line-height: 24.2667px;">字符串（Strings）</div><div style="line-height: 24.2667px;">列表（List）</div><div style="line-height: 24.2667px;">集合（Set）</div><div style="line-height: 24.2667px;">哈希 / 散列（Hash）</div><div style="line-height: 24.2667px;">有序集合 （Sorted set）</div><div style="line-height: 24.2667px;">位图（Bitmap）和超重对数（HyperLogLog）</div><div style="line-height: 24.2667px;">Redis超重对数HyperLogLog 是用来做基数统计的算法。什么是基数?比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。</div><div style="line-height: 24.2667px;">Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</div><div style="line-height: 24.2667px;">Redis 事务可以一次执行多个命令。</div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;">2. 多数据库特性</div><div style="line-height: 24.2667px;">1) 每个数据库对外都是以一个从0开始的递增数字命名，不支持自定义的。</div><div style="line-height: 24.2667px;">2)&nbsp;redis默认支持16个数据库，可以通过修改databases参数来修改这个默认值。</div><div style="line-height: 24.2667px;">3)&nbsp;redis默认选择的是0号数据库。</div><div style="line-height: 24.2667px;">4)&nbsp;SELECT 数字： 可以切换数据库。</div><div style="line-height: 24.2667px;">5)&nbsp;多个数据库之间并不是完全隔离的。</div><div style="line-height: 24.2667px;">6)&nbsp;flushall：清空redis实例下的所有数据。</div><div style="line-height: 24.2667px;">7)&nbsp;flushdb：清空当前数据库中的所有数据。</div></div><div style="line-height: 24.2667px;"><h3 style="line-height: 24.2667px;">Redis内存限制即回收key策略</h3><div style="line-height: 24.2667px;">如果一个Redis实例的内存使用率超过可用最大内存(used_memory &gt;可用最大内存)，那么操作系统开始进行内存与swap空间交换，把内存中旧的或不再使用的内容写入硬盘上（硬盘上的这块空间叫Swap分区），以便腾出新的物理内存给新页或活动页(page)使用。在硬盘上进行读写操作要比在内存上进行读写操作，时间上慢了近5个数量级。</div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;">若Redis启用了Redis快照功能，应该设置“maxmemory”值为系统可使用内存的45%，因为快照时需要一倍的内存来复制整个数据集，也就是说如果当前已使用45%，在快照期间会变成95%(45%+45%+5%)，其中5%是预留给其他的开销。 如果没开启快照功能，maxmemory最高能设置为系统可用内存的95%。</div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;">若是在使用Redis期间没有开启rdb快照或aof持久化策略，那么缓存数据在Redis崩溃时就有丢失的危险。因为当Redis内存使用率超过可用内存的95%时，部分数据开始在内存与swap空间来回交换，这时就可能有丢失数据的危险。当开启并触发快照功能时，Redis会fork一个子进程把当前内存中的数据完全复制一份写入到硬盘上。因此若是当前使用内存超过可用内存的45%时触发快照功能，那么此时进行的内存交换会变的非常危险(可能会丢失数据)。&nbsp;</div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;">当内存使用达到设置的最大阀值时，需要选择一种key的回收策略：可在Redis.conf配置文件中修改“maxmemory-policy”属性值。或下面问题：</div></div><div style="line-height: 24.2667px;"><i>问题：MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据。</i></div><div style="line-height: 24.2667px;">redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。redis 提供 6种数据淘汰策略通过maxmemory-policy设置策略：</div><div><ul style="line-height: 24.2667px;"><li>volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li><li>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰，<span style="line-height: 24.2667px;">这种策略使得我们可以向Redis提示哪些key更适合被eviction。</span></li><li>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰，<span style="line-height: 24.2667px;">如果我们的应用对于缓存key的访问概率相等，则可以使用这个策略。</span></li><li>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰，<span style="line-height: 24.2667px;">我们不太清楚我们应用的缓存访问分布状况，我们可以选择。</span></li><li>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</li><li>no-enviction（驱逐）：禁止驱逐数据</li></ul><div><div><span style="line-height: 24.2667px;">值得一提的是将key设置过期时间实际上会消耗更多的内存，因此我们建议使用allkeys-lru策略从而更有效率的使用内存。</span><br></div></div></div></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;"><h3>Redis应用已使用场景</h3><div>1. redis中键的生存时间（expire）</div><div>redis中可以使用expire命令设置一个键的生存时间，到时间后redis会自动删除它。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">expire  </span><span class="pun">设置生存时间（单位/秒）</span></code></li><li class="L1"><code class="language-c"><span class="pln">expire key seconds</span><span class="pun">(秒)</span></code></li><li class="L2"><code class="language-c"></code></li><li class="L3"><code class="language-c"><span class="pln">ttl </span><span class="pun">查看键的剩余生存时间</span></code></li><li class="L4"><code class="language-c"><span class="pln">ttl key</span></code></li><li class="L5"><code class="language-c"></code></li><li class="L6"><code class="language-c"><span class="pln">persist </span><span class="pun">取消生存时间</span></code></li><li class="L7"><code class="language-c"><span class="pln">persist key</span></code></li></ol></pre></div></div><div>应用场景：</div><div><ul><li>限时的优惠活动信息</li><li>网站数据缓存（对于一些需要定时更新的数据，例如：积分排行榜）</li><li>手机验证码</li></ul></div><div><div><br></div><div><i>问题：Redis数据库可以对键值对设置过期时间，当键值对过期时，redis会通过一定的机制将过期键删除？</i></div><div>redis的过期键删除策略有两种：定期删除和惰性删除。</div><div><br></div><div>1. 惰性删除 &nbsp; &nbsp;惰性删除是每次获取键值对时，都对获取的键进行过期检查，如果过期的话，就删除该键值对；如果没过期，就返回该键。<br>&nbsp; &nbsp; 1) 惰性删除策略的好处是对cpu时间比较友好，每次只检查当前处理的键值对，不会对其他过期的键值对花费cpu时间。</div><div>&nbsp; &nbsp; 2) 惰性删除策略的缺点就是对内存不友好，一个键已经过期，但是这个键还会留在数据库中，只要它不被访问，就不会被删除，一直占用这内存空间。如果 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;这些过期键长期不被访问，将永远不会被删除，我们可以视作内存泄漏——无用的数据占据了大量内存，而服务器不去释放它。</div><div>&nbsp; &nbsp;当然，用户可以通过手动执行FLUSHDB来删除过期键。<br>2. 定期删除&nbsp; &nbsp;&nbsp;定期删除是每隔一段时间，程序对数据库检查一次，删除数据库里的过期键。至于每次检查多少数据库，删除多少过期键，由算法决定。<br>&nbsp; &nbsp; 定期删除策略的关键点就是删除操作执行的时长和频率：<br></div><div>&nbsp; &nbsp; 1) 如果删除操作太过频繁或者执行时间太长，就对cpu时间不是很友好，cpu时间过多的消耗在删除过期键上。</div><div>&nbsp; &nbsp; 2) 如果删除操作执行太少或者执行时间太短，就不能及时删除过期键，导致内存浪费。</div></div><div><br></div><div>2. 发布与订阅</div><div>生产者：发布频道 "ch1" ，发布消息。</div><div>消费者：监听频道"ch1"，消费消息。可取消订阅频道。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="com">// 订阅频道数据  </span></code></li><li class="L1"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> testSubscribe</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="com">//连接Redis数据库  </span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="typ">Jedis</span><span class="pln"> jedis </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Jedis</span><span class="pun">(</span><span class="str">"192.168.33.130"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">6379</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="typ">JedisPubSub</span><span class="pln"> jedisPubSub </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">JedisPubSub</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L5"><code class="language-c"><span class="pln">  </span></code></li><li class="L6"><code class="language-c"><span class="pln">        </span><span class="com">// 当向监听的频道发送数据时，这个方法会被触发  </span></code></li><li class="L7"><code class="language-c"><span class="pln">        </span><span class="lit">@Override</span><span class="pln">  </span></code></li><li class="L8"><code class="language-c"><span class="pln">        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> onMessage</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> channel</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> message</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L9"><code class="language-c"><span class="pln">            </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"收到消息"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> message</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L0"><code class="language-c"><span class="pln">            </span><span class="com">//当收到 "unsubscribe" 消息时，调用取消订阅方法  </span></code></li><li class="L1"><code class="language-c"><span class="pln">            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="str">"unsubscribe"</span><span class="pun">.</span><span class="pln">equals</span><span class="pun">(</span><span class="pln">message</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L2"><code class="language-c"><span class="pln">                </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">unsubscribe</span><span class="pun">();</span><span class="pln">  </span></code></li><li class="L3"><code class="language-c"><span class="pln">            </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L4"><code class="language-c"><span class="pln">        </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L5"><code class="language-c"><span class="pln">  </span></code></li><li class="L6"><code class="language-c"><span class="pln">        </span><span class="com">// 当取消订阅指定频道的时候，这个方法会被触发  </span></code></li><li class="L7"><code class="language-c"><span class="pln">        </span><span class="lit">@Override</span><span class="pln">  </span></code></li><li class="L8"><code class="language-c"><span class="pln">        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> onUnsubscribe</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> channel</span><span class="pun">,</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> subscribedChannels</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L9"><code class="language-c"><span class="pln">            </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"取消订阅频道"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> channel</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L0"><code class="language-c"><span class="pln">        </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="pun">};</span><span class="pln">  </span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="com">// 订阅之后，当前进程一致处于监听状态，当被取消订阅之后，当前进程会结束  </span></code></li><li class="L4"><code class="language-c"><span class="pln">    jedis</span><span class="pun">.</span><span class="pln">subscribe</span><span class="pun">(</span><span class="pln">jedisPubSub</span><span class="pun">,</span><span class="pln"> </span><span class="str">"ch1"</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L5"><code class="language-c"><span class="pun">}</span><span class="pln">  </span></code></li><li class="L6"><code class="language-c"><span class="pln">  </span></code></li><li class="L7"><code class="language-c"><span class="pln">  </span></code></li><li class="L8"><code class="language-c"><span class="com">// 发布频道数据  </span></code></li><li class="L9"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> testPubSub</span><span class="pun">()</span><span class="pln"> throws </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="com">//链接Redis数据库  </span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="typ">Jedis</span><span class="pln"> jedis </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Jedis</span><span class="pun">(</span><span class="str">"192.168.33.130"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">6379</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="com">//发布频道 "ch1" 和消息 "hello redis"  </span></code></li><li class="L3"><code class="language-c"><span class="pln">    jedis</span><span class="pun">.</span><span class="pln">publish</span><span class="pun">(</span><span class="str">"ch1"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"hello redis"</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="com">//关闭连接  </span></code></li><li class="L5"><code class="language-c"><span class="pln">    jedis</span><span class="pun">.</span><span class="pln">close</span><span class="pun">();</span><span class="pln">  </span></code></li><li class="L6"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div></div><div>3. 限制网站访客访问频率</div><div>比如想知道什么时候封锁一个IP地址。使用k-v的v的原子递增保持计数。</div><div>比如设置1分钟内，只能访问10次。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> boolean testLogin</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> ip</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="typ">String</span><span class="pln"> value </span><span class="pun">=</span><span class="pln"> jedis</span><span class="pun">.</span><span class="pln">get</span><span class="pun">(</span><span class="pln">ip</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">value </span><span class="pun">==</span><span class="pln"> null</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L3"><code class="language-c"><span class="pln">        </span><span class="com">//初始化时设置IP访问次数为1  </span></code></li><li class="L4"><code class="language-c"><span class="pln">        jedis</span><span class="pun">.</span><span class="typ">set</span><span class="pun">(</span><span class="pln">ip</span><span class="pun">,</span><span class="pln"> </span><span class="str">"1"</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L5"><code class="language-c"><span class="pln">        </span><span class="com">//设置IP的生存时间为60秒，60秒内IP的访问次数由程序控制  </span></code></li><li class="L6"><code class="language-c"><span class="pln">        jedis</span><span class="pun">.</span><span class="pln">expire</span><span class="pun">(</span><span class="pln">ip</span><span class="pun">,</span><span class="pln"> </span><span class="lit">60</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L8"><code class="language-c"><span class="pln">        </span><span class="typ">int</span><span class="pln"> parseInt </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Integer</span><span class="pun">.</span><span class="pln">parseInt</span><span class="pun">(</span><span class="pln">value</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L9"><code class="language-c"><span class="pln">        </span><span class="com">//如果60秒内IP的访问次数超过10，返回false,实现了超过10次禁止分的功能  </span></code></li><li class="L0"><code class="language-c"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">parseInt </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">10</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L1"><code class="language-c"><span class="pln">            </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">  </span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L3"><code class="language-c"><span class="pln">            </span><span class="com">//如果没有10次，可以自增  </span></code></li><li class="L4"><code class="language-c"><span class="pln">            jedis</span><span class="pun">.</span><span class="pln">incr</span><span class="pun">(</span><span class="pln">ip</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L5"><code class="language-c"><span class="pln">        </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span><span class="pln">  </span></code></li><li class="L8"><code class="language-c"><span class="pun">}</span><span class="pln">  </span></code></li><li class="L9"><code class="language-c"><span class="lit">@Test</span><span class="pln">  </span></code></li><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> test3</span><span class="pun">()</span><span class="pln"> throws </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="com">// 模拟用户的频繁请求  </span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">20</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L3"><code class="language-c"><span class="pln">        boolean result </span><span class="pun">=</span><span class="pln"> testLogin</span><span class="pun">(</span><span class="str">"192.168.1.100"</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L4"><code class="language-c"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">result</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L5"><code class="language-c"><span class="pln">            </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"正常访问"</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L6"><code class="language-c"><span class="pln">        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L7"><code class="language-c"><span class="pln">            </span><span class="typ">System</span><span class="pun">.</span><span class="pln">err</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"访问受限"</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L8"><code class="language-c"><span class="pln">        </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L0"><code class="language-c"><span class="pln">  </span></code></li><li class="L1"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div></div><div>4. 各种计数</div><div>如商品维度计数（喜欢数，评论数，鉴定数，浏览数,etc），用户维度计数（动态数、关注数、粉丝数、喜欢商品数、发帖数 等）</div><div>采用Redis 的类型: Hash</div><div>为product定义个key product:，为每种数值定义hashkey, 譬如喜欢数xihuan</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="lit">127.0</span><span class="pun">.</span><span class="lit">0.1</span><span class="pun">:</span><span class="lit">6379</span><span class="pun">&gt;</span><span class="pln"> HSET product</span><span class="pun">:</span><span class="lit">1231233</span><span class="pln"> like </span><span class="lit">5</span></code></li><li class="L1"><code class="language-c"><span class="pun">(</span><span class="pln">integer</span><span class="pun">)</span><span class="pln">  </span><span class="lit">1</span></code></li><li class="L2"><code class="language-c"><span class="lit">127.0</span><span class="pun">.</span><span class="lit">0.1</span><span class="pun">:</span><span class="lit">6379</span><span class="pun">&gt;</span><span class="pln"> HINCRBY product</span><span class="pun">:</span><span class="lit">1231233</span><span class="pln"> like </span><span class="lit">1</span><span class="pln">     </span><span class="pun">喜欢数+</span><span class="lit">1</span></code></li><li class="L3"><code class="language-c"><span class="lit">128.</span><span class="pun">(</span><span class="pln">integer</span><span class="pun">)</span><span class="pln">  </span><span class="lit">6</span></code></li><li class="L4"><code class="language-c"><span class="lit">127.0</span><span class="pun">.</span><span class="lit">0.1</span><span class="pun">:</span><span class="lit">6379</span><span class="pun">&gt;</span><span class="pln"> HGETALL product</span><span class="pun">:</span><span class="lit">1231233</span><span class="pln">               </span><span class="pun">获取该商品的喜欢数</span></code></li><li class="L5"><code class="language-c"><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="str">"LIKE"</span></code></li><li class="L6"><code class="language-c"><span class="lit">2</span><span class="pun">)</span><span class="pln"> </span><span class="str">"6"</span></code></li><li class="L7"><code class="language-c"><span class="lit">127.0</span><span class="pun">.</span><span class="lit">0.1</span><span class="pun">:</span><span class="lit">6379</span><span class="pun">&gt;</span><span class="pln"> </span></code></li></ol></pre></div></div><div>5. 用作缓存代替Memecached</div><div>6. 利用List数据结构实现分布式的消息队列</div><div>7. 使用sorted set实现复杂的场景</div><div>8. 排行榜及相关问题。</div></span></div><div><span style="line-height: 24.2667px;"><br></span></div><h3><span style="line-height: 24.2667px;">Redis优化</span></h3><div><span style="line-height: 24.2667px;">1.&nbsp;通过设置maxmemory的值为45%或95%(取决于持久化策略)和回收策略“maxmemory-policy”为“volatile-ttl”或“allkeys-lru”(取决于过期设置)，可以比较准确的限制Redis最大内存使用率。</span></div><div><span style="line-height: 24.2667px;">2.&nbsp;Redis是个单线程模型，客户端过来的命令是按照顺序执行的，所以想要一次添加多条数据的时候可以使用管道，或者使用一次可以添加多条数据的命令。</span></div><div><span style="line-height: 24.2667px;"><div>redis的pipeline(管道)功能在命令行中没有，但是redis是支持管道的，在Java的客户端(jedis)中是可以使用的。在插入更多数据的时候，管道的优势更加明显：测试10万条数据的时候，不使用管道要40秒，实用管道378毫秒。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="com">// 测试不使用管道  </span></code></li><li class="L1"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> testInsert</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="kwd">long</span><span class="pln"> currentTimeMillis </span><span class="pun">=</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="pln">currentTimeMillis</span><span class="pun">();</span><span class="pln">  </span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="typ">Jedis</span><span class="pln"> jedis </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Jedis</span><span class="pun">(</span><span class="str">"192.168.33.130"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">6379</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">1000</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L5"><code class="language-c"><span class="pln">        jedis</span><span class="pun">.</span><span class="typ">set</span><span class="pun">(</span><span class="str">"test"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> i</span><span class="pun">,</span><span class="pln"> </span><span class="str">"test"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> i</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="kwd">long</span><span class="pln"> endTimeMillis </span><span class="pun">=</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="pln">currentTimeMillis</span><span class="pun">();</span><span class="pln">  </span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">endTimeMillis </span><span class="pun">-</span><span class="pln"> currentTimeMillis</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L9"><code class="language-c"><span class="pun">}</span></code></li><li class="L0"><code class="language-c"><span class="com">// 测试管道  </span></code></li><li class="L1"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> testPip</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="kwd">long</span><span class="pln"> currentTimeMillis </span><span class="pun">=</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="pln">currentTimeMillis</span><span class="pun">();</span><span class="pln">  </span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="typ">Jedis</span><span class="pln"> jedis </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Jedis</span><span class="pun">(</span><span class="str">"192.168.33.130"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">6379</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="typ">Pipeline</span><span class="pln"> pipelined </span><span class="pun">=</span><span class="pln"> jedis</span><span class="pun">.</span><span class="pln">pipelined</span><span class="pun">();</span><span class="pln">  </span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">1000</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L6"><code class="language-c"><span class="pln">        pipelined</span><span class="pun">.</span><span class="typ">set</span><span class="pun">(</span><span class="str">"bb"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> i</span><span class="pun">,</span><span class="pln"> i </span><span class="pun">+</span><span class="pln"> </span><span class="str">"bb"</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L8"><code class="language-c"><span class="pln">    pipelined</span><span class="pun">.</span><span class="pln">sync</span><span class="pun">();</span><span class="pln">  </span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="kwd">long</span><span class="pln"> endTimeMillis </span><span class="pun">=</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="pln">currentTimeMillis</span><span class="pun">();</span><span class="pln">  </span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">endTimeMillis </span><span class="pun">-</span><span class="pln"> currentTimeMillis</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L1"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></div></span></div><h3><span style="line-height: 24.2667px;">Redis持久化、数据同步和恢复</span></h3><h4><span style="line-height: 24.2667px;">持久化</span></h4><div><span style="line-height: 24.2667px;"><div>Redis支持两种方式的持久化，可以单独使用或者结合起来使用。</div><div>第一种：RDB方式（redis默认的持久化方式）</div><div>第二种：AOF方式</div><div><div>Redis启动时默认会在启动的目录生成RDB持久化文件dump.rdb，服务端下次启动时，如果还存在这个dump.rdb文件，则上次的数据还存在，如果不是，则不存在。这个可以在配置文件redis.conf中配置。</div><div><br></div><div><div>首先，我们应该明确持久化的数据有什么用，答案是<b>用于重启后的数据恢复</b>。Redis是一个内存数据库，无论是RDB还是AOF，都只是其保证数据恢复的措施。所以Redis在利用RDB和AOF进行恢复的时候，都会读取RDB或AOF文件，重新加载到内存中。</div></div><div><br></div><div><div>Redis的数据回写机制分同步和异步两种：</div><div><ul><li>同步回写save是由主进程进行快照操作，会阻塞其它请求。在数据大的情况下会导致系统假死很长时间，所以一般不是推荐的。<br></li><li>异步回写bgsave是由redis执行fork函数复制出一个子进程来进行快照回写磁盘，回写结束后新进程自行关闭。这样做不需要阻塞主进程，系统不会假死，一般默认会采用这个方法。</li></ul><div><br></div></div></div><div><div><b>RDB方式</b>&nbsp; &nbsp; 的持久化是通过Snapshot快照存储，是默认的持久化方式。按照一定的策略周期性的将数据保存到磁盘。对应产生的数据文件为dump.rdb，通过配置文件中的save参数来定义快照的周期策略。</div></div><div><div>下面是默认的快照策略设置：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">save </span><span class="lit">900</span><span class="pln"> </span><span class="lit">1</span><span class="pln">    </span><span class="com">#当有一条Keys数据被改变时，900秒刷新到Disk一次</span></code></li><li class="L1"><code class="language-c"><span class="pln">save </span><span class="lit">300</span><span class="pln"> </span><span class="lit">10</span><span class="pln">   </span><span class="com">#当有10条Keys数据被改变时，300秒刷新到Disk一次</span></code></li><li class="L2"><code class="language-c"><span class="pln">save </span><span class="lit">60</span><span class="pln"> </span><span class="lit">10000</span><span class="pln"> </span><span class="com">#当有10000条Keys数据被改变时，60秒刷新到Disk一次</span></code></li></ol></pre></div><div><div>手动执行save或者bgsave命令让redis执行快照。</div></div></div></div></div><div><br></div><div><div>Redis的RDB文件总是周期性的新生成，并替换掉原RDB文件。所以在生成过程中，不影响原先文件。</div></div><div><br></div><div><div>RDB的优缺点</div><div>优点：由于存储的有数据快照文件，恢复数据很方便。后面有恢复实验。</div><div>缺点：一旦数据库出现问题，RDB文件中保存的数据并不是全新的。由于是周期性备份，从上次RDB文件生成到Redis停机这段时间的数据全部丢掉了。</div></div><div></div><div><br></div><div><div>在数据恢复方面：</div><div>RDB的启动时间会更短，原因有两个：</div><div><ul><li>RDB文件中每一条数据只有一条记录，不会像AOF日志那样可能有一条数据的多次操作记录。所以每条数据只需要写一次就行了。</li><li>RDB文件的存储格式和Redis数据在内存中的编码格式是一致的，不需要再进行数据编码工作，所以在CPU消耗上要远小于AOF日志的加载。</li></ul></div></div><div><br></div><div><b>AOF方式</b>&nbsp; &nbsp; 的持久化比RDB方式有更好的持久化性。AOF方式的持久化是通过日志文件的方式，在使用AOF持久化方式时，Redis会将每一个收到的写命令都通过Write函数追加到文件中，类似于MySQL的binlog。当Redis重启是会通过重新执行文件中保存的写命令来在内存中重建整个数据库的内容。默认情况下redis没有开启aof，可以通过参数appendonly参数开启。aof文件的保存位置和rdb文件的位置相同，默认的文件名是appendonly.aof。</div><div><br></div><div><div>AOF的完全持久化方式同时也带来了另一个问题，持久化文件会变得越来越大。比如我们调用INCR test命令100次，文件中就必须保存全部的100条命令，但其实99条都是多余的。因为要恢复数据库的状态其实文件中保存一条SET test 100就够了。为了压缩AOF的持久化文件，Redis提供了bgrewriteaof命令。</div><div><br></div><div>使用bgrewriteaof命令压缩AOF的持久化文件，Redis将使用与快照类似的方式将内存中的数据以命令的方式保存到临时文件中，将整个内存中的数据库内容用命令的方式重写了一个新的AOF文件，最后替换原来的文件，以此来实现控制AOF文件的增长。</div></div><div><br></div><div>关于这两种方式，官方建议：</div><div>通常，如果你要想提供很高的数据保障性，那么建议你同时使用两种持久化方式。如果你可以接受灾难带来的几分钟的数据丢失，那么你可以仅使用RDB。很多用户仅使用了AOF，但是我们建议，既然RDB可以时不时的给数据做个完整的快照，并且提供更快的重启，所以最好还是也使用RDB。在未来（长远计划）统一AOF和RDB成一种持久化模式。<br></div><div><br></div><div>在线上环境中，由于数据都设置有过期时间，采用AOF的方式会不太实用，过于频繁的写操作会使AOF文件增长到异常的庞大，大大超过了我们实际的数据量，这也会导致在进行数据恢复时耗用大量的时间。因此，可以在Slave上仅开启Snapshot来进行本地化，同时可以考虑将save中的频率调高一些或者调用一个计划任务来进行定期bgsave的快照存储，来尽可能的保障本地化数据的完整性。<br></div><div><br></div><h4>主从同步、主从切换、数据恢复演示</h4><div><div><b>持久化的数据的作用是用于重启后的数据恢复</b>，我们有必要进行一次这样的灾难恢复模拟了。如果数据要做持久化又想保证稳定性，<b>则建议留空一半的物理内存</b>。因为在进行快照的时候，fork出来进行dump操作的子进程会占用与父进程一样的内存，真正的copy-on-write，对性能的影响和内存的耗用都是比较大的。目前，通常的设计思路是利用副本(Replication)机制来弥补aof、snapshot性能上的不足，达到了数据可持久化。即<b>Master上Snapshot和AOF都不做，来保证Master的读写性能，而Slave上则同时开启Snapshot和AOF来进行持久化，保证数据的安全性</b>。</div></div><div><div>首先，修改Master上的如下配置：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">$ sudo vim </span><span class="pun">/</span><span class="pln">opt</span><span class="pun">/</span><span class="pln">redis</span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">redis_6379</span><span class="pun">.</span><span class="pln">conf</span></code></li><li class="L1"><code class="language-c"></code></li><li class="L2"><code class="language-c"><span class="com">#save 900 1 #禁用Snapshot</span></code></li><li class="L3"><code class="language-c"><span class="com">#save 300 10</span></code></li><li class="L4"><code class="language-c"><span class="com">#save 60 10000</span></code></li><li class="L5"><code class="language-c"></code></li><li class="L6"><code class="language-c"><span class="pln">appendonly no </span><span class="com">#禁用AOF</span></code></li></ol></pre></div></div><div>接着，修改Slave上的如下配置：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">$ sudo vim </span><span class="pun">/</span><span class="pln">opt</span><span class="pun">/</span><span class="pln">redis</span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">redis_6379</span><span class="pun">.</span><span class="pln">conf</span></code></li><li class="L1"><code class="language-c"></code></li><li class="L2"><code class="language-c"><span class="pln">save </span><span class="lit">900</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="com">#启用Snapshot</span></code></li><li class="L3"><code class="language-c"><span class="pln">save </span><span class="lit">300</span><span class="pln"> </span><span class="lit">10</span></code></li><li class="L4"><code class="language-c"><span class="pln">save </span><span class="lit">60</span><span class="pln"> </span><span class="lit">10000</span></code></li><li class="L5"><code class="language-c"></code></li><li class="L6"><code class="language-c"><span class="pln">appendonly yes </span><span class="com">#启用AOF</span></code></li><li class="L7"><code class="language-c"><span class="pln">appendfilename appendonly</span><span class="pun">.</span><span class="pln">aof </span><span class="com">#AOF文件的名称</span></code></li><li class="L8"><code class="language-c"><span class="com"># appendfsync always</span></code></li><li class="L9"><code class="language-c"><span class="pln">appendfsync everysec </span><span class="com">#每秒钟强制写入磁盘一次</span></code></li><li class="L0"><code class="language-c"><span class="com"># appendfsync no  </span></code></li><li class="L1"><code class="language-c"></code></li><li class="L2"><code class="language-c"><span class="pln">no</span><span class="pun">-</span><span class="pln">appendfsync</span><span class="pun">-</span><span class="pln">on</span><span class="pun">-</span><span class="pln">rewrite yes   </span><span class="com">#在日志重写时，不进行命令追加操作</span></code></li><li class="L3"><code class="language-c"><span class="kwd">auto</span><span class="pun">-</span><span class="pln">aof</span><span class="pun">-</span><span class="pln">rewrite</span><span class="pun">-</span><span class="pln">percentage </span><span class="lit">100</span><span class="pln"> </span><span class="com">#自动启动新的日志重写过程</span></code></li><li class="L4"><code class="language-c"><span class="kwd">auto</span><span class="pun">-</span><span class="pln">aof</span><span class="pun">-</span><span class="pln">rewrite</span><span class="pun">-</span><span class="pln">min</span><span class="pun">-</span><span class="pln">size </span><span class="lit">64mb</span><span class="pln">  </span><span class="com">#启动新的日志重写过程的最小值</span></code></li></ol></pre></div></div><div>分别启动Master与Slave</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">$ </span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">init</span><span class="pun">.</span><span class="pln">d</span><span class="pun">/</span><span class="pln">redis start</span></code></li></ol></pre></div></div><div>启动完成后在Master中确认未启动Snapshot参数</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">redis </span><span class="lit">127.0</span><span class="pun">.</span><span class="lit">0.1</span><span class="pun">:</span><span class="lit">6379</span><span class="pun">&gt;</span><span class="pln"> CONFIG GET save</span></code></li><li class="L1"><code class="language-c"><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="str">"save"</span></code></li><li class="L2"><code class="language-c"><span class="lit">2</span><span class="pun">)</span><span class="pln"> </span><span class="str">""</span></code></li></ol></pre></div></div><div>使用命令<span class="pln" style="font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13px; white-space: pre; background-color: rgb(247, 247, 249);">redis</span><span class="pun" style="font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13px; white-space: pre; background-color: rgb(247, 247, 249);">-</span><span class="pln" style="font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13px; white-space: pre; background-color: rgb(247, 247, 249);">trib</span><span class="pun" style="font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13px; white-space: pre; background-color: rgb(247, 247, 249);">.</span><span class="pln" style="font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13px; white-space: pre; background-color: rgb(247, 247, 249);">rb</span>生成主从。</div><h5>主从复制</h5><div><div>Redis的RDB文件是Redis主从同步内部实现中的一环。</div><div>第一次Slave向Master：Slave向Master发出同步请求，Master先dump出rdb文件，然后将rdb文件全量传输给slave，然后Master把缓存的命令转发给Slave，初次同步完成。</div><div>第二次以及以后的同步：Master将变量的快照增量依次发送给各个Slave。但不管什么原因导致Slave和Master断开重连都会重复以上两个步骤的过程。</div><div><br></div><div><i>问题：当使用Redis读写分离，从机作为读的情况，从机宕机或者和主机断开连接都需要重新连接主机，重新连接主机都会触发全量的主从复制，这时候主机会生成内存快照，主机依然可以对外提供服务，但是作为读的从机，就无法提供对外服务了，如果数据量大，恢复的时间会相当的长。</i></div><div>为了解决Redis主从Copy的问题，有如下两个解决方案：</div><div><ol><li>主动复制&nbsp; &nbsp;&nbsp;所谓主动复制，就是业务层双写多个Redis，避开Redis自带的主从复制。但是自己干同步，就会产生一致性问题，为了保证主从一致，需要加入一系列的验证机制。而且这样的做法，会降低系统性能。</li><li>修改源代码，支持增量同步&nbsp; &nbsp;&nbsp;Redis写AOF文件，关闭Redis rewrite AOF文件功能，为了避免文件过大，可以自己实现文件分割功能。在业务低峰时期，生成内存快照，并记录快照时刻AOF所在的点。当从机重连的时候，从机发送同步命令给主机，主机收到命令后，把最新的快照文件发送给从机，从机从快照文件中恢复，并且获得了该快照对应的AOF点，从机将AOF点发送给主机，主机将AOF文件中该点之后的所有数据操作同步给从机，达到增量同步的效果。</li></ol></div></div><div><br></div><div>然后通过以下脚本在Master中生成25万条数据：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">dongguo@redis</span><span class="pun">:/</span><span class="pln">opt</span><span class="pun">/</span><span class="pln">redis</span><span class="pun">/</span><span class="pln">data</span><span class="pun">/</span><span class="lit">6379</span><span class="pln">$ cat redis</span><span class="pun">-</span><span class="pln">cli</span><span class="pun">-</span><span class="pln">generate</span><span class="pun">.</span><span class="pln">temp</span><span class="pun">.</span><span class="pln">sh</span></code></li><li class="L1"><code class="language-c"></code></li><li class="L2"><code class="language-c"><span class="com">#!/bin/bash</span></code></li><li class="L3"><code class="language-c"></code></li><li class="L4"><code class="language-c"><span class="pln">REDISCLI</span><span class="pun">=</span><span class="str">"redis-cli -a slavepass -n 1 SET"</span></code></li><li class="L5"><code class="language-c"><span class="pln">ID</span><span class="pun">=</span><span class="lit">1</span></code></li><li class="L6"><code class="language-c"></code></li><li class="L7"><code class="language-c"><span class="kwd">while</span><span class="pun">((</span><span class="pln">$ID</span><span class="pun">&lt;</span><span class="lit">50001</span><span class="pun">))</span></code></li><li class="L8"><code class="language-c"><span class="kwd">do</span></code></li><li class="L9"><code class="language-c"><span class="pln">  INSTANCE_NAME</span><span class="pun">=</span><span class="str">"i-2-$ID-VM"</span></code></li><li class="L0"><code class="language-c"><span class="pln">  UUID</span><span class="pun">=`</span><span class="pln">cat </span><span class="pun">/</span><span class="pln">proc</span><span class="pun">/</span><span class="pln">sys</span><span class="pun">/</span><span class="pln">kernel</span><span class="pun">/</span><span class="pln">random</span><span class="pun">/</span><span class="pln">uuid</span><span class="pun">`</span></code></li><li class="L1"><code class="language-c"><span class="pln">  PRIVATE_IP_ADDRESS</span><span class="pun">=</span><span class="lit">10.</span><span class="pun">`</span><span class="pln">echo </span><span class="str">"$RANDOM % 255 + 1"</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> bc</span><span class="pun">`.`</span><span class="pln">echo </span><span class="str">"$RANDOM % 255 + 1"</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> bc</span><span class="pun">`.`</span><span class="pln">echo </span><span class="str">"$RANDOM % 255 + 1"</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> bc</span><span class="pun">`</span><span class="pln">\</span></code></li><li class="L2"><code class="language-c"><span class="pln">  CREATED</span><span class="pun">=`</span><span class="pln">date </span><span class="str">"+%Y-%m-%d %H:%M:%S"</span><span class="pun">`</span></code></li><li class="L3"><code class="language-c"></code></li><li class="L4"><code class="language-c"><span class="pln">  $REDISCLI vm_instance</span><span class="pun">:</span><span class="pln">$ID</span><span class="pun">:</span><span class="pln">instance_name </span><span class="str">"$INSTANCE_NAME"</span></code></li><li class="L5"><code class="language-c"><span class="pln">  $REDISCLI vm_instance</span><span class="pun">:</span><span class="pln">$ID</span><span class="pun">:</span><span class="pln">uuid </span><span class="str">"$UUID"</span></code></li><li class="L6"><code class="language-c"><span class="pln">  $REDISCLI vm_instance</span><span class="pun">:</span><span class="pln">$ID</span><span class="pun">:</span><span class="pln">private_ip_address </span><span class="str">"$PRIVATE_IP_ADDRESS"</span></code></li><li class="L7"><code class="language-c"><span class="pln">  $REDISCLI vm_instance</span><span class="pun">:</span><span class="pln">$ID</span><span class="pun">:</span><span class="pln">created </span><span class="str">"$CREATED"</span></code></li><li class="L8"><code class="language-c"></code></li><li class="L9"><code class="language-c"><span class="pln">  $REDISCLI vm_instance</span><span class="pun">:</span><span class="pln">$INSTANCE_NAME</span><span class="pun">:</span><span class="pln">id </span><span class="str">"$ID"</span></code></li><li class="L0"><code class="language-c"></code></li><li class="L1"><code class="language-c"><span class="pln">  ID</span><span class="pun">=</span><span class="pln">$</span><span class="pun">((</span><span class="pln">$ID</span><span class="pun">+</span><span class="lit">1</span><span class="pun">))</span></code></li><li class="L2"><code class="language-c"><span class="pln">done</span></code></li><li class="L3"><code class="language-c"><span class="pln">dongguo@redis</span><span class="pun">:/</span><span class="pln">opt</span><span class="pun">/</span><span class="pln">redis</span><span class="pun">/</span><span class="pln">data</span><span class="pun">/</span><span class="lit">6379</span><span class="pln">$ </span><span class="pun">./</span><span class="pln">redis</span><span class="pun">-</span><span class="pln">cli</span><span class="pun">-</span><span class="pln">generate</span><span class="pun">.</span><span class="pln">temp</span><span class="pun">.</span><span class="pln">sh</span></code></li></ol></pre></div></div><div>在数据的生成过程中，可以很清楚的看到Master上仅在第一次做Slave同步时创建了dump.rdb文件，之后就通过增量传输命令的方式给Slave了。</div><div>dump.rdb文件没有再增大。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">dongguo@redis</span><span class="pun">:/</span><span class="pln">opt</span><span class="pun">/</span><span class="pln">redis</span><span class="pun">/</span><span class="pln">data</span><span class="pun">/</span><span class="lit">6379</span><span class="pln">$ ls </span><span class="pun">-</span><span class="pln">lh</span></code></li><li class="L1"><code class="language-c"><span class="pln">total </span><span class="lit">4.0K</span></code></li><li class="L2"><code class="language-c"><span class="pun">-</span><span class="pln">rw</span><span class="pun">-</span><span class="pln">r</span><span class="pun">--</span><span class="pln">r</span><span class="pun">--</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> root root </span><span class="lit">10</span><span class="pln"> </span><span class="typ">Sep</span><span class="pln"> </span><span class="lit">27</span><span class="pln"> </span><span class="lit">00</span><span class="pun">:</span><span class="lit">40</span><span class="pln"> dump</span><span class="pun">.</span><span class="pln">rdb</span></code></li></ol></pre></div></div><div>而Slave上则可以看到dump.rdb文件和AOF文件在不断的增大，并且AOF文件的增长速度明显大于dump.rdb文件。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">dongguo@redis</span><span class="pun">-</span><span class="pln">slave</span><span class="pun">:/</span><span class="pln">opt</span><span class="pun">/</span><span class="pln">redis</span><span class="pun">/</span><span class="pln">data</span><span class="pun">/</span><span class="lit">6379</span><span class="pln">$ ls </span><span class="pun">-</span><span class="pln">lh</span></code></li><li class="L1"><code class="language-c"><span class="pln">total </span><span class="lit">24M</span></code></li><li class="L2"><code class="language-c"><span class="pun">-</span><span class="pln">rw</span><span class="pun">-</span><span class="pln">r</span><span class="pun">--</span><span class="pln">r</span><span class="pun">--</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> root root </span><span class="lit">15M</span><span class="pln"> </span><span class="typ">Sep</span><span class="pln"> </span><span class="lit">27</span><span class="pln"> </span><span class="lit">12</span><span class="pun">:</span><span class="lit">06</span><span class="pln"> appendonly</span><span class="pun">.</span><span class="pln">aof</span></code></li><li class="L3"><code class="language-c"><span class="pun">-</span><span class="pln">rw</span><span class="pun">-</span><span class="pln">r</span><span class="pun">--</span><span class="pln">r</span><span class="pun">--</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> root root </span><span class="lit">9.2M</span><span class="pln"> </span><span class="typ">Sep</span><span class="pln"> </span><span class="lit">27</span><span class="pln"> </span><span class="lit">12</span><span class="pun">:</span><span class="lit">06</span><span class="pln"> dump</span><span class="pun">.</span><span class="pln">rdb</span></code></li></ol></pre></div></div><div>等待数据插入完成以后，首先确认当前的数据量。</div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">redis </span><span class="lit">127.0</span><span class="pun">.</span><span class="lit">0.1</span><span class="pun">:</span><span class="lit">6379</span><span class="pun">&gt;</span><span class="pln"> info</span></code></li><li class="L1"><code class="language-c"></code></li><li class="L2"><code class="language-c"><span class="pln">redis_version</span><span class="pun">:</span><span class="lit">2.4</span><span class="pun">.</span><span class="lit">17</span></code></li><li class="L3"><code class="language-c"><span class="pln">redis_git_sha1</span><span class="pun">:</span><span class="lit">00000000</span></code></li><li class="L4"><code class="language-c"><span class="pln">redis_git_dirty</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L5"><code class="language-c"><span class="pln">arch_bits</span><span class="pun">:</span><span class="lit">64</span></code></li><li class="L6"><code class="language-c"><span class="pln">multiplexing_api</span><span class="pun">:</span><span class="pln">epoll</span></code></li><li class="L6"><code class="language-c"><span class="pln">...</span></code></li><li class="L7"><code class="language-c"><span class="pln">expired_keys</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L8"><code class="language-c"><span class="pln">evicted_keys</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L9"><code class="language-c"><span class="pln">keyspace_hits</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L0"><code class="language-c"><span class="pln">keyspace_misses</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L1"><code class="language-c"><span class="pln">pubsub_channels</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L2"><code class="language-c"><span class="pln">pubsub_patterns</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L3"><code class="language-c"><span class="pln">latest_fork_usec</span><span class="pun">:</span><span class="lit">246</span></code></li><li class="L4"><code class="language-c"><span class="pln">vm_enabled</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L5"><code class="language-c"><span class="pln">role</span><span class="pun">:</span><span class="pln">master</span></code></li><li class="L6"><code class="language-c"><span class="pln">slave0</span><span class="pun">:</span><span class="lit">10.6</span><span class="pun">.</span><span class="lit">1.144</span><span class="pun">,</span><span class="lit">6379</span><span class="pun">,</span><span class="pln">online</span></code></li><li class="L7"><code class="language-c"><span class="pln">db1</span><span class="pun">:</span><span class="pln">keys</span><span class="pun">=</span><span class="lit">250000</span><span class="pun">,</span><span class="pln">expires</span><span class="pun">=</span><span class="lit">0<br></span></code></li></ol></pre></div><div>当前的数据量为25万条key，占用内存31.52M。</div><div><br></div><div>然后我们直接Kill掉Master的Redis进程，模拟灾难。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">dongguo@redis</span><span class="pun">:/</span><span class="pln">opt</span><span class="pun">/</span><span class="pln">redis</span><span class="pun">/</span><span class="pln">data</span><span class="pun">/</span><span class="lit">6379</span><span class="pln">$ sudo killall </span><span class="pun">-</span><span class="lit">9</span><span class="pln"> redis</span><span class="pun">-</span><span class="pln">server</span></code></li></ol></pre></div></div><div>我们到Slave中查看状态：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">redis </span><span class="lit">127.0</span><span class="pun">.</span><span class="lit">0.1</span><span class="pun">:</span><span class="lit">6379</span><span class="pun">&gt;</span><span class="pln"> info</span></code></li><li class="L1"><code class="language-c"></code></li><li class="L2"><code class="language-c"><span class="pln">redis_version</span><span class="pun">:</span><span class="lit">2.4</span><span class="pun">.</span><span class="lit">17</span></code></li><li class="L3"><code class="language-c"><span class="pln">redis_git_sha1</span><span class="pun">:</span><span class="lit">00000000</span></code></li><li class="L4"><code class="language-c"><span class="pln">redis_git_dirty</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L5"><code class="language-c"><span class="pln">arch_bits</span><span class="pun">:</span><span class="lit">64</span></code></li><li class="L6"><code class="language-c"><span class="pln">multiplexing_api</span><span class="pun">:</span><span class="pln">epoll</span></code></li><li class="L7"><code class="language-c"><span class="pln">gcc_version</span><span class="pun">:</span><span class="lit">4.4</span><span class="pun">.</span><span class="lit">5</span></code></li><li class="L7"><code class="language-c"><span class="lit">...</span></code></li><li class="L1"><code class="language-c"><span class="pln">pubsub_channels</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L2"><code class="language-c"><span class="pln">pubsub_patterns</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L3"><code class="language-c"><span class="pln">latest_fork_usec</span><span class="pun">:</span><span class="lit">694</span></code></li><li class="L4"><code class="language-c"><span class="pln">vm_enabled</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L5"><code class="language-c"><span class="pln">role</span><span class="pun">:</span><span class="pln">slave</span></code></li><li class="L6"><code class="language-c"><span class="pln">aof_current_size</span><span class="pun">:</span><span class="lit">17908619</span></code></li><li class="L7"><code class="language-c"><span class="pln">aof_base_size</span><span class="pun">:</span><span class="lit">16787337</span></code></li><li class="L8"><code class="language-c"><span class="pln">aof_pending_rewrite</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L9"><code class="language-c"><span class="pln">aof_buffer_length</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L0"><code class="language-c"><span class="pln">aof_pending_bio_fsync</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L1"><code class="language-c"><span class="pln">master_host</span><span class="pun">:</span><span class="lit">10.6</span><span class="pun">.</span><span class="lit">1.143</span></code></li><li class="L2"><code class="language-c"><span class="pln">master_port</span><span class="pun">:</span><span class="lit">6379</span></code></li><li class="L3"><code class="language-c"><span class="pln">master_link_status</span><span class="pun">:</span><span class="pln">down</span></code></li><li class="L4"><code class="language-c"><span class="pln">master_last_io_seconds_ago</span><span class="pun">:-</span><span class="lit">1</span></code></li><li class="L5"><code class="language-c"><span class="pln">master_sync_in_progress</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L6"><code class="language-c"><span class="pln">master_link_down_since_seconds</span><span class="pun">:</span><span class="lit">25</span></code></li><li class="L7"><code class="language-c"><span class="pln">slave_priority</span><span class="pun">:</span><span class="lit">100</span></code></li><li class="L8"><code class="language-c"><span class="pln">db1</span><span class="pun">:</span><span class="pln">keys</span><span class="pun">=</span><span class="lit">250000</span><span class="pun">,</span><span class="pln">expires</span><span class="pun">=</span><span class="lit">0</span></code></li></ol></pre></div><div><br></div></div><div>可以看到master_link_status的状态已经是down了，Master已经不可访问了。</div><div>而此时，Slave依然运行良好，并且保留有AOF与RDB文件。</div><div><br></div><div>下面我们将通过Slave上保存好的AOF与RDB文件来恢复Master上的数据。</div><div><br></div><div>首先，将Slave上的同步状态取消，避免主库在未完成数据恢复前就重启，进而直接覆盖掉从库上的数据，导致所有的数据丢失。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">redis </span><span class="lit">127.0</span><span class="pun">.</span><span class="lit">0.1</span><span class="pun">:</span><span class="lit">6379</span><span class="pun">&gt;</span><span class="pln"> SLAVEOF NO ONE</span></code></li><li class="L1"><code class="language-c"><span class="pln">OK</span></code></li></ol></pre></div></div><div>确认一下已经没有了master相关的配置信息：</div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">redis </span><span class="lit">127.0</span><span class="pun">.</span><span class="lit">0.1</span><span class="pun">:</span><span class="lit">6379</span><span class="pun">&gt;</span><span class="pln"> INFO</span></code></li><li class="L1"><code class="language-c"></code></li><li class="L2"><code class="language-c"><span class="pln">redis_version</span><span class="pun">:</span><span class="lit">2.4</span><span class="pun">.</span><span class="lit">17</span></code></li><li class="L3"><code class="language-c"><span class="pln">redis_git_sha1</span><span class="pun">:</span><span class="lit">00000000</span></code></li><li class="L4"><code class="language-c"><span class="pln">redis_git_dirty</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L5"><code class="language-c"><span class="pln">arch_bits</span><span class="pun">:</span><span class="lit">64</span></code></li><li class="L6"><code class="language-c"><span class="pln">multiplexing_api</span><span class="pun">:</span><span class="pln">epoll</span></code></li><li class="L7"><font color="#48484c">...</font></li><li class="L2"><code class="language-c"><span class="pln">pubsub_patterns</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L3"><code class="language-c"><span class="pln">latest_fork_usec</span><span class="pun">:</span><span class="lit">1119</span></code></li><li class="L4"><code class="language-c"><span class="pln">vm_enabled</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L5"><code class="language-c"><span class="pln">role</span><span class="pun">:</span><span class="pln">master</span></code></li><li class="L6"><code class="language-c"><span class="pln">aof_current_size</span><span class="pun">:</span><span class="lit">17908619</span></code></li><li class="L7"><code class="language-c"><span class="pln">aof_base_size</span><span class="pun">:</span><span class="lit">16787337</span></code></li><li class="L8"><code class="language-c"><span class="pln">aof_pending_rewrite</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L9"><code class="language-c"><span class="pln">aof_buffer_length</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L0"><code class="language-c"><span class="pln">aof_pending_bio_fsync</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L1"><code class="language-c"><span class="pln">db1</span><span class="pun">:</span><span class="pln">keys</span><span class="pun">=</span><span class="lit">250000</span><span class="pun">,</span><span class="pln">expires</span><span class="pun">=</span><span class="lit">0</span></code></li></ol></pre></div><div>在Slave上复制数据文件：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">dongguo@redis</span><span class="pun">-</span><span class="pln">slave</span><span class="pun">:/</span><span class="pln">opt</span><span class="pun">/</span><span class="pln">redis</span><span class="pun">/</span><span class="pln">data</span><span class="pun">/</span><span class="lit">6379</span><span class="pln">$ tar cvf </span><span class="pun">/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">dongguo</span><span class="pun">/</span><span class="pln">data</span><span class="pun">.</span><span class="pln">tar </span><span class="pun">*</span></code></li><li class="L1"><code class="language-c"><span class="pln">appendonly</span><span class="pun">.</span><span class="pln">aof</span></code></li><li class="L2"><code class="language-c"><span class="pln">dump</span><span class="pun">.</span><span class="pln">rdb</span></code></li></ol></pre></div></div><div>将data.tar上传到Master上，尝试恢复数据:</div><div>可以看到Master目录下有一个初始化Slave的数据文件，很小，将其删除。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">dongguo@redis</span><span class="pun">:/</span><span class="pln">opt</span><span class="pun">/</span><span class="pln">redis</span><span class="pun">/</span><span class="pln">data</span><span class="pun">/</span><span class="lit">6379</span><span class="pln">$ ls </span><span class="pun">-</span><span class="pln">l</span></code></li><li class="L1"><code class="language-c"><span class="pln">total </span><span class="lit">4</span></code></li><li class="L2"><code class="language-c"><span class="pun">-</span><span class="pln">rw</span><span class="pun">-</span><span class="pln">r</span><span class="pun">--</span><span class="pln">r</span><span class="pun">--</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> root root </span><span class="lit">10</span><span class="pln"> </span><span class="typ">Sep</span><span class="pln"> </span><span class="lit">27</span><span class="pln"> </span><span class="lit">00</span><span class="pun">:</span><span class="lit">40</span><span class="pln"> dump</span><span class="pun">.</span><span class="pln">rdb</span></code></li><li class="L3"><code class="language-c"><span class="pln">dongguo@redis</span><span class="pun">:/</span><span class="pln">opt</span><span class="pun">/</span><span class="pln">redis</span><span class="pun">/</span><span class="pln">data</span><span class="pun">/</span><span class="lit">6379</span><span class="pln">$ sudo rm </span><span class="pun">-</span><span class="pln">f dump</span><span class="pun">.</span><span class="pln">rdb</span></code></li></ol></pre></div></div><div>然后解压缩数据文件：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">dongguo@redis</span><span class="pun">:/</span><span class="pln">opt</span><span class="pun">/</span><span class="pln">redis</span><span class="pun">/</span><span class="pln">data</span><span class="pun">/</span><span class="lit">6379</span><span class="pln">$ sudo tar xf </span><span class="pun">/</span><span class="pln">home</span><span class="pun">/</span><span class="pln">dongguo</span><span class="pun">/</span><span class="pln">data</span><span class="pun">.</span><span class="pln">tar</span></code></li><li class="L1"><code class="language-c"><span class="pln">dongguo@redis</span><span class="pun">:/</span><span class="pln">opt</span><span class="pun">/</span><span class="pln">redis</span><span class="pun">/</span><span class="pln">data</span><span class="pun">/</span><span class="lit">6379</span><span class="pln">$ ls </span><span class="pun">-</span><span class="pln">lh</span></code></li><li class="L2"><code class="language-c"><span class="pln">total </span><span class="lit">29M</span></code></li><li class="L3"><code class="language-c"><span class="pun">-</span><span class="pln">rw</span><span class="pun">-</span><span class="pln">r</span><span class="pun">--</span><span class="pln">r</span><span class="pun">--</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> root root </span><span class="lit">18M</span><span class="pln"> </span><span class="typ">Sep</span><span class="pln"> </span><span class="lit">27</span><span class="pln"> </span><span class="lit">01</span><span class="pun">:</span><span class="lit">22</span><span class="pln"> appendonly</span><span class="pun">.</span><span class="pln">aof</span></code></li><li class="L4"><code class="language-c"><span class="pun">-</span><span class="pln">rw</span><span class="pun">-</span><span class="pln">r</span><span class="pun">--</span><span class="pln">r</span><span class="pun">--</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> root root </span><span class="lit">12M</span><span class="pln"> </span><span class="typ">Sep</span><span class="pln"> </span><span class="lit">27</span><span class="pln"> </span><span class="lit">01</span><span class="pun">:</span><span class="lit">22</span><span class="pln"> dump</span><span class="pun">.</span><span class="pln">rdb</span></code></li></ol></pre></div></div><div>启动Master上的Redis；</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">dongguo@redis</span><span class="pun">:/</span><span class="pln">opt</span><span class="pun">/</span><span class="pln">redis</span><span class="pun">/</span><span class="pln">data</span><span class="pun">/</span><span class="lit">6379</span><span class="pln">$ sudo </span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">init</span><span class="pun">.</span><span class="pln">d</span><span class="pun">/</span><span class="pln">redis start</span></code></li><li class="L1"><code class="language-c"><span class="typ">Starting</span><span class="pln"> </span><span class="typ">Redis</span><span class="pln"> server</span><span class="pun">...</span></code></li></ol></pre></div></div><div>查看数据是否恢复：</div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">redis </span><span class="lit">127.0</span><span class="pun">.</span><span class="lit">0.1</span><span class="pun">:</span><span class="lit">6379</span><span class="pun">&gt;</span><span class="pln"> INFO</span></code></li><li class="L1"><code class="language-c"></code></li><li class="L2"><code class="language-c"><span class="pln">redis_version</span><span class="pun">:</span><span class="lit">2.4</span><span class="pun">.</span><span class="lit">17</span></code></li><li class="L3"><code class="language-c"><span class="pln">redis_git_sha1</span><span class="pun">:</span><span class="lit">00000000</span></code></li><li class="L4"><code class="language-c"><span class="pln">redis_git_dirty</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L5"><code class="language-c"><span class="pln">arch_bits</span><span class="pun">:</span><span class="lit">64</span></code></li><li class="L6"><code class="language-c"><span class="pln">multiplexing_api</span><span class="pun">:</span><span class="pln">epoll</span></code></li><li class="L6"><code class="language-c"><span class="pln">...</span></code></li><li class="L7"><code class="language-c"><span class="pln">expired_keys</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L8"><code class="language-c"><span class="pln">evicted_keys</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L9"><code class="language-c"><span class="pln">keyspace_hits</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L0"><code class="language-c"><span class="pln">keyspace_misses</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L1"><code class="language-c"><span class="pln">pubsub_channels</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L2"><code class="language-c"><span class="pln">pubsub_patterns</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L3"><code class="language-c"><span class="pln">latest_fork_usec</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L4"><code class="language-c"><span class="pln">vm_enabled</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L5"><code class="language-c"><span class="pln">role</span><span class="pun">:</span><span class="pln">master</span></code></li><li class="L6"><code class="language-c"><span class="pln">db1</span><span class="pun">:</span><span class="pln">keys</span><span class="pun">=</span><span class="lit">250000</span><span class="pun">,</span><span class="pln">expires</span><span class="pun">=</span><span class="lit">0</span></code></li></ol></pre></div><div>可以看到25万条数据已经完整恢复到了Master上。</div><div><br></div><div>此时，可以放心的恢复Slave的同步设置了。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">redis </span><span class="lit">127.0</span><span class="pun">.</span><span class="lit">0.1</span><span class="pun">:</span><span class="lit">6379</span><span class="pun">&gt;</span><span class="pln"> SLAVEOF </span><span class="lit">10.6</span><span class="pun">.</span><span class="lit">1.143</span><span class="pln"> </span><span class="lit">6379</span></code></li><li class="L1"><code class="language-c"><span class="pln">OK</span></code></li></ol></pre></div></div><div>查看同步状态：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pln">redis </span><span class="lit">127.0</span><span class="pun">.</span><span class="lit">0.1</span><span class="pun">:</span><span class="lit">6379</span><span class="pun">&gt;</span><span class="pln"> INFO</span></code></li><li class="L1"><code class="language-c"></code></li><li class="L2"><code class="language-c"><span class="pln">redis_version</span><span class="pun">:</span><span class="lit">2.4</span><span class="pun">.</span><span class="lit">17</span></code></li><li class="L3"><code class="language-c"><span class="pln">redis_git_sha1</span><span class="pun">:</span><span class="lit">00000000</span></code></li><li class="L4"><code class="language-c"><span class="pln">redis_git_dirty</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L5"><code class="language-c"><span class="pln">arch_bits</span><span class="pun">:</span><span class="lit">64</span></code></li><li class="L6"><code class="language-c"><span class="pln">multiplexing_api</span><span class="pun">:</span><span class="pln">epoll</span></code></li><li class="L7"><code class="language-c"><span class="pln">gcc_version</span><span class="pun">:</span><span class="lit">4.4</span><span class="pun">.</span><span class="lit">5</span></code></li><li class="L8"><font color="#48484c">...</font></li><li class="L0"><code class="language-c"><span class="pln">aof_pending_bio_fsync</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L1"><code class="language-c"><span class="pln">master_host</span><span class="pun">:</span><span class="lit">10.6</span><span class="pun">.</span><span class="lit">1.143</span></code></li><li class="L2"><code class="language-c"><span class="pln">master_port</span><span class="pun">:</span><span class="lit">6379</span></code></li><li class="L3"><code class="language-c"><span class="pln">master_link_status</span><span class="pun">:</span><span class="pln">up</span></code></li><li class="L4"><code class="language-c"><span class="pln">master_last_io_seconds_ago</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L5"><code class="language-c"><span class="pln">master_sync_in_progress</span><span class="pun">:</span><span class="lit">0</span></code></li><li class="L6"><code class="language-c"><span class="pln">slave_priority</span><span class="pun">:</span><span class="lit">100</span></code></li><li class="L7"><code class="language-c"><span class="pln">db1</span><span class="pun">:</span><span class="pln">keys</span><span class="pun">=</span><span class="lit">250000</span><span class="pun">,</span><span class="pln">expires</span><span class="pun">=</span><span class="lit">0</span></code></li></ol></pre></div><div><br></div></div><div>master_link_status显示为up，同步状态正常。</div></div><div>在此次的案例中，我们通过在Slave上启用了AOF与RDB来保障了数据，并恢复了Master。<br></div><div><br></div><h5>数据恢复</h5><div>在上面恢复的过程中，<b>我们同时复制了AOF与RDB文件，那么到底是哪一个文件完成了数据的恢复呢？</b><br></div><div><div>实际上，当Redis服务器挂掉时，重启时将按照以下优先级恢复数据到内存：</div><div>1. 如果只配置AOF,重启时加载AOF文件恢复数据；</div><div>2. 如果同时 配置了RDB和AOF,启动是只加载AOF文件恢复数据;</div><div>3. 如果只配置RDB,启动是将加载dump文件恢复数据。</div><div><br></div><div>也就是说，AOF的优先级要高于RDB，这也很好理解，因为AOF本身对数据的完整性保障要高于RDB。</div></div><div><br></div><div><div>在线上环境中，由于数据都设置有过期时间，采用AOF的方式会不太实用，过于频繁的写操作会使AOF文件增长到异常的庞大，大大超过了我们实际的数据量，这也会导致在进行数据恢复时耗用大量的时间。因此，可以在Slave上仅开启Snapshot来进行本地化，同时可以考虑将save中的频率调高一些或者调用一个计划任务来进行定期bgsave的快照存储，来尽可能的保障本地化数据的完整性。在这样的架构下，如果仅仅是Master挂掉，Slave完整，数据恢复可达到100%。如果Master与Slave同时挂掉的话，数据的恢复也可以达到一个可接受的程度。</div></div><div><br></div><div>扩容缩容</div><div>直接在线切换</div><div><br></div><div>读写分离</div><div><br></div><div>对于读操作，jedis直接连接从库，写操作，jedis直接连接主库。</div></span></div><div><br></div><div>或第三方proxy实现。</div><div><br></div><h3>jedis坑</h3><div><br></div><div><br></div><div style="line-height: 24.2667px;"><br></div><div><div style="line-height: 24.2667px; font-family: 'Helvetica Neue'; border-style: solid none none; border-right-width: initial; border-right-color: initial; border-bottom-width: initial; border-bottom-color: initial; border-left-width: initial; border-left-color: initial; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; border-top-width: 3pt; border-top-color: rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>Zookeeper/etcd<br></h2></div><h3 style="line-height: 24.2667px;"><font face="黑体">Zookeeper基本使用</font></h3><div><font face="黑体"><div><span style="line-height: 24.2667px;">Zookeeper数据模型：分层结构，树形结构的每个节点叫做Znode，每个Znode都有数据，也可以有子节点。数据变化时，版本号会递增。</span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">每个ZNode数据节点，用于存储数据，数据节点分为：</span></div><div><span style="line-height: 24.2667px;">持久节点(PERSISTENT)：一旦创建，除非主动调用删除操作，否则一直存储在zk上；</span></div><div><span style="line-height: 24.2667px;">临时节点(EPHEMERAL)：与客户端的会话绑定，一旦客户端会话失败，这个客户端创建的所有临时节点都会被移除；</span></div><div><span style="line-height: 24.2667px;">SEQUENTIAL Znode：创建节点时，如果设置属性SEQUENTIAL，则会自动在节点名后面追加一个整型数字。</span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">ZK中引入了watcher机制来实现了发布/订阅功能，能够让多个订阅者同时监听某一个主题对象，当这个主题对象自身状态变化时，会通知所有订阅者。</span></div><div><span style="line-height: 24.2667px;">Watcher作用于Znode节点上，分为数据更新和子节点状态等通知。</span></div><div><span style="line-height: 24.2667px;">Watcher中的事件：</span></div><div><span style="line-height: 24.2667px;">NodeDataChanged事件 &nbsp; &nbsp; &nbsp; 节点数据变化</span></div><div><span style="line-height: 24.2667px;">NodeChildrenChanged事件 &nbsp; &nbsp; &nbsp; 新增节点或者删除节点</span></div><div><span style="line-height: 24.2667px;">AutoFailed事件 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;授权失败</span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">Watcher设置后，一旦触发一次即会失效，如果需要一直监听，就需要再注册。</span></div><div><br></div><div><span style="line-height: 24.2667px;">ACL（访问权限控制列表）：</span></div><div><span style="line-height: 24.2667px;">CREATE：创建子节点的权限</span></div><div><span style="line-height: 24.2667px;">READ：获取节点数据和子节点列表的权限</span></div><div><span style="line-height: 24.2667px;">WRITE：更新节点数据的权限</span></div><div><span style="line-height: 24.2667px;">DELETE：删除子节点的权限</span></div><div><span style="line-height: 24.2667px;">ADMIN：设置节点ACL的权限</span></div><div><br></div><div><span style="line-height: 24.2667px;">zkclient使用：</span></div><div><div style="line-height: 24.2667px;"><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-go"><span class="com">//1.创建会话</span></code></li><li class="L1"><code class="language-go"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L2"><code class="language-go"><span class="pln">    </span><span class="com">//zk集群的地址  </span></code></li><li class="L3"><code class="language-go"><span class="pln">    </span><span class="typ">String</span><span class="pln"> </span><span class="typ">ZKServers</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"192.168.30.164:2181,192.168.30.165:2181,192.168.30.166:2181"</span><span class="pun">;</span><span class="pln">  </span></code></li><li class="L4"><code class="language-go"><span class="pln">  </span></code></li><li class="L5"><code class="language-go"><span class="pln">    </span><span class="com">/** </span></code></li><li class="L6"><code class="language-go"><span class="com">     * 创建会话 </span></code></li><li class="L7"><code class="language-go"><span class="com">     * new SerializableSerializer() 创建序列化器接口，用来序列化和反序列化 </span></code></li><li class="L8"><code class="language-go"><span class="com">     */</span><span class="pln">  </span></code></li><li class="L9"><code class="language-go"><span class="pln">    </span><span class="typ">ZkClient</span><span class="pln"> zkClient </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ZkClient</span><span class="pun">(</span><span class="typ">ZKServers</span><span class="pun">,</span><span class="lit">10000</span><span class="pun">,</span><span class="lit">10000</span><span class="pun">,</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SerializableSerializer</span><span class="pun">());</span><span class="pln">  </span></code></li><li class="L0"><code class="language-go"><span class="pln">      </span></code></li><li class="L1"><code class="language-go"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"conneted ok!"</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L2"><code class="language-go"><span class="pln">      </span></code></li><li class="L3"><code class="language-go"><span class="pun">}</span></code></li><li class="L4"><code class="language-go"><span class="com">//2.创建节点</span></code></li><li class="L5"><code class="language-go"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L6"><code class="language-go"><span class="pln">    </span><span class="com">//zk集群的地址  </span></code></li><li class="L7"><code class="language-go"><span class="pln">    </span><span class="typ">String</span><span class="pln"> </span><span class="typ">ZKServers</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"192.168.30.164:2181,192.168.30.165:2181,192.168.30.166:2181"</span><span class="pun">;</span><span class="pln">  </span></code></li><li class="L8"><code class="language-go"><span class="pln">    </span><span class="typ">ZkClient</span><span class="pln"> zkClient </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ZkClient</span><span class="pun">(</span><span class="typ">ZKServers</span><span class="pun">,</span><span class="lit">10000</span><span class="pun">,</span><span class="lit">10000</span><span class="pun">,</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SerializableSerializer</span><span class="pun">());</span><span class="pln">  </span></code></li><li class="L9"><code class="language-go"><span class="pln">      </span></code></li><li class="L0"><code class="language-go"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"conneted ok!"</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L1"><code class="language-go"><span class="pln">      </span></code></li><li class="L2"><code class="language-go"><span class="pln">    </span><span class="typ">User</span><span class="pln"> user </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">User</span><span class="pun">();</span><span class="pln">  </span></code></li><li class="L3"><code class="language-go"><span class="pln">    user</span><span class="pun">.</span><span class="pln">setId</span><span class="pun">(</span><span class="lit">1</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L4"><code class="language-go"><span class="pln">    user</span><span class="pun">.</span><span class="pln">setName</span><span class="pun">(</span><span class="str">"testUser"</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L5"><code class="language-go"><span class="pln">      </span></code></li><li class="L6"><code class="language-go"><span class="pln">    </span><span class="com">/** </span></code></li><li class="L7"><code class="language-go"><span class="com">     * "/testUserNode" :节点的地址 </span></code></li><li class="L8"><code class="language-go"><span class="com">     * user：数据的对象 </span></code></li><li class="L9"><code class="language-go"><span class="com">     * CreateMode.PERSISTENT：创建的节点类型 </span></code></li><li class="L0"><code class="language-go"><span class="com">     */</span><span class="pln">  </span></code></li><li class="L1"><code class="language-go"><span class="pln">    </span><span class="typ">String</span><span class="pln"> path </span><span class="pun">=</span><span class="pln"> zkClient</span><span class="pun">.</span><span class="pln">create</span><span class="pun">(</span><span class="str">"/testUserNode"</span><span class="pun">,</span><span class="pln"> user</span><span class="pun">,</span><span class="pln"> </span><span class="typ">CreateMode</span><span class="pun">.</span><span class="pln">PERSISTENT</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L2"><code class="language-go"><span class="pln">    </span><span class="com">//输出创建节点的路径  </span></code></li><li class="L3"><code class="language-go"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"created path:"</span><span class="pun">+</span><span class="pln">path</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L4"><code class="language-go"><span class="pun">}</span></code></li><li class="L5"><code class="language-go"><span class="com">//3.获取节点中的数据</span></code></li><li class="L6"><code class="language-go"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L7"><code class="language-go"><span class="pln">    </span><span class="com">//zk集群的地址  </span></code></li><li class="L8"><code class="language-go"><span class="pln">    </span><span class="typ">String</span><span class="pln"> </span><span class="typ">ZKServers</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"192.168.30.164:2181,192.168.30.165:2181,192.168.30.166:2181"</span><span class="pun">;</span><span class="pln">  </span></code></li><li class="L9"><code class="language-go"><span class="pln">    </span><span class="typ">ZkClient</span><span class="pln"> zkClient </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ZkClient</span><span class="pun">(</span><span class="typ">ZKServers</span><span class="pun">,</span><span class="lit">10000</span><span class="pun">,</span><span class="lit">10000</span><span class="pun">,</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SerializableSerializer</span><span class="pun">());</span><span class="pln">  </span></code></li><li class="L0"><code class="language-go"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"conneted ok!"</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L1"><code class="language-go"><span class="pln">      </span></code></li><li class="L2"><code class="language-go"><span class="pln">    </span><span class="typ">Stat</span><span class="pln"> stat </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Stat</span><span class="pun">();</span><span class="pln">  </span></code></li><li class="L3"><code class="language-go"><span class="pln">    </span><span class="com">//获取 节点中的对象  </span></code></li><li class="L4"><code class="language-go"><span class="pln">    </span><span class="typ">User</span><span class="pln">  user </span><span class="pun">=</span><span class="pln"> zkClient</span><span class="pun">.</span><span class="pln">readData</span><span class="pun">(</span><span class="str">"/testUserNode"</span><span class="pun">,</span><span class="pln">stat</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L5"><code class="language-go"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">user</span><span class="pun">.</span><span class="pln">getName</span><span class="pun">());</span><span class="pln">  </span></code></li><li class="L6"><code class="language-go"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">stat</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L7"><code class="language-go"><span class="pun">}</span></code></li><li class="L8"><code class="language-go"><span class="com">//4.判断节点是否存在</span></code></li><li class="L9"><code class="language-go"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L0"><code class="language-go"><span class="pln">    </span><span class="com">//zk集群的地址  </span></code></li><li class="L1"><code class="language-go"><span class="pln">    </span><span class="typ">String</span><span class="pln"> </span><span class="typ">ZKServers</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"192.168.30.164:2181,192.168.30.165:2181,192.168.30.166:2181"</span><span class="pun">;</span><span class="pln">  </span></code></li><li class="L2"><code class="language-go"><span class="pln">    </span><span class="typ">ZkClient</span><span class="pln"> zkClient </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ZkClient</span><span class="pun">(</span><span class="typ">ZKServers</span><span class="pun">,</span><span class="lit">10000</span><span class="pun">,</span><span class="lit">10000</span><span class="pun">,</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SerializableSerializer</span><span class="pun">());</span><span class="pln">  </span></code></li><li class="L3"><code class="language-go"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"conneted ok!"</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L4"><code class="language-go"><span class="pln">      </span></code></li><li class="L5"><code class="language-go"><span class="pln">    </span><span class="kwd">boolean</span><span class="pln"> e </span><span class="pun">=</span><span class="pln"> zkClient</span><span class="pun">.</span><span class="pln">exists</span><span class="pun">(</span><span class="str">"/testUserNode"</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L6"><code class="language-go"><span class="pln">    </span><span class="com">//返回 true表示节点存在 ，false表示不存在  </span></code></li><li class="L7"><code class="language-go"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">e</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L8"><code class="language-go"><span class="pun">}</span></code></li><li class="L9"><code class="language-go"><span class="com">//5.删除节点</span></code></li><li class="L0"><code class="language-go"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L1"><code class="language-go"><span class="pln">    </span><span class="com">//zk集群的地址  </span></code></li><li class="L2"><code class="language-go"><span class="pln">    </span><span class="typ">String</span><span class="pln"> </span><span class="typ">ZKServers</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"192.168.30.164:2181,192.168.30.165:2181,192.168.30.166:2181"</span><span class="pun">;</span><span class="pln">  </span></code></li><li class="L3"><code class="language-go"><span class="pln">    </span><span class="typ">ZkClient</span><span class="pln"> zkClient </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ZkClient</span><span class="pun">(</span><span class="typ">ZKServers</span><span class="pun">,</span><span class="lit">10000</span><span class="pun">,</span><span class="lit">10000</span><span class="pun">,</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SerializableSerializer</span><span class="pun">());</span><span class="pln">  </span></code></li><li class="L4"><code class="language-go"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"conneted ok!"</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L5"><code class="language-go"><span class="pln">      </span></code></li><li class="L6"><code class="language-go"><span class="pln">    </span><span class="com">//删除单独一个节点，返回true表示成功  </span></code></li><li class="L7"><code class="language-go"><span class="pln">    </span><span class="kwd">boolean</span><span class="pln"> e1 </span><span class="pun">=</span><span class="pln"> zkClient</span><span class="pun">.</span><span class="kwd">delete</span><span class="pun">(</span><span class="str">"/testUserNode"</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L8"><code class="language-go"><span class="pln">    </span><span class="com">//删除含有子节点的节点  </span></code></li><li class="L9"><code class="language-go"><span class="pln">    </span><span class="kwd">boolean</span><span class="pln"> e2 </span><span class="pun">=</span><span class="pln"> zkClient</span><span class="pun">.</span><span class="pln">deleteRecursive</span><span class="pun">(</span><span class="str">"/test"</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L0"><code class="language-go"><span class="pln">      </span></code></li><li class="L1"><code class="language-go"><span class="pln">    </span><span class="com">//返回 true表示节点成功 ，false表示删除失败  </span></code></li><li class="L2"><code class="language-go"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">e1</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L3"><code class="language-go"><span class="pun">}</span></code></li><li class="L4"><code class="language-go"><span class="com">//6.更新数据</span></code></li><li class="L5"><code class="language-go"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L6"><code class="language-go"><span class="pln">    </span><span class="com">//zk集群的地址  </span></code></li><li class="L7"><code class="language-go"><span class="pln">    </span><span class="typ">String</span><span class="pln"> </span><span class="typ">ZKServers</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"192.168.30.164:2181,192.168.30.165:2181,192.168.30.166:2181"</span><span class="pun">;</span><span class="pln">  </span></code></li><li class="L8"><code class="language-go"><span class="pln">    </span><span class="typ">ZkClient</span><span class="pln"> zkClient </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ZkClient</span><span class="pun">(</span><span class="typ">ZKServers</span><span class="pun">,</span><span class="lit">10000</span><span class="pun">,</span><span class="lit">10000</span><span class="pun">,</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SerializableSerializer</span><span class="pun">());</span><span class="pln">  </span></code></li><li class="L9"><code class="language-go"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"conneted ok!"</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L0"><code class="language-go"><span class="pln">      </span></code></li><li class="L1"><code class="language-go"><span class="pln">    </span><span class="typ">User</span><span class="pln"> user </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">User</span><span class="pun">();</span><span class="pln">  </span></code></li><li class="L2"><code class="language-go"><span class="pln">    user</span><span class="pun">.</span><span class="pln">setId</span><span class="pun">(</span><span class="lit">2</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L3"><code class="language-go"><span class="pln">    user</span><span class="pun">.</span><span class="pln">setName</span><span class="pun">(</span><span class="str">"testUser2"</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L4"><code class="language-go"><span class="pln">    </span><span class="com">/** </span></code></li><li class="L5"><code class="language-go"><span class="com">     * testUserNode 节点的路径 </span></code></li><li class="L6"><code class="language-go"><span class="com">     * user 传入的数据对象 </span></code></li><li class="L7"><code class="language-go"><span class="com">     */</span><span class="pln">  </span></code></li><li class="L8"><code class="language-go"><span class="pln">    zkClient</span><span class="pun">.</span><span class="pln">writeData</span><span class="pun">(</span><span class="str">"/testUserNode"</span><span class="pun">,</span><span class="pln"> user</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L9"><code class="language-go"><span class="pun">}</span></code></li><li class="L0"><code class="language-go"><span class="com">//7.订阅节点的信息改变（创建节点，删除节点，添加子节点）</span></code></li><li class="L1"><code class="language-go"><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ZKChildListener</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">IZkChildListener</span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L2"><code class="language-go"><span class="pln">    </span><span class="com">/** </span></code></li><li class="L3"><code class="language-go"><span class="com">     * handleChildChange： 用来处理服务器端发送过来的通知 </span></code></li><li class="L4"><code class="language-go"><span class="com">     * parentPath：对应的父节点的路径 </span></code></li><li class="L5"><code class="language-go"><span class="com">     * currentChilds：子节点的相对路径 </span></code></li><li class="L6"><code class="language-go"><span class="com">     */</span><span class="pln">  </span></code></li><li class="L7"><code class="language-go"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> handleChildChange</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> parentPath</span><span class="pun">,</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> currentChilds</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L8"><code class="language-go"><span class="pln">          </span></code></li><li class="L9"><code class="language-go"><span class="pln">        </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">parentPath</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L0"><code class="language-go"><span class="pln">        </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">currentChilds</span><span class="pun">.</span><span class="pln">toString</span><span class="pun">());</span><span class="pln">  </span></code></li><li class="L1"><code class="language-go"><span class="pln">          </span></code></li><li class="L2"><code class="language-go"><span class="pln">    </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L3"><code class="language-go"><span class="pln">      </span></code></li><li class="L4"><code class="language-go"><span class="pun">}</span><span class="pln">  </span></code></li><li class="L5"><code class="language-go"><span class="pln">  </span></code></li><li class="L6"><code class="language-go"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">InterruptedException</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L7"><code class="language-go"><span class="pln">    </span><span class="com">//zk集群的地址  </span></code></li><li class="L8"><code class="language-go"><span class="pln">    </span><span class="typ">String</span><span class="pln"> </span><span class="typ">ZKServers</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"192.168.30.164:2181,192.168.30.165:2181,192.168.30.166:2181"</span><span class="pun">;</span><span class="pln">  </span></code></li><li class="L9"><code class="language-go"><span class="pln">    </span><span class="typ">ZkClient</span><span class="pln"> zkClient </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ZkClient</span><span class="pun">(</span><span class="typ">ZKServers</span><span class="pun">,</span><span class="lit">10000</span><span class="pun">,</span><span class="lit">10000</span><span class="pun">,</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SerializableSerializer</span><span class="pun">());</span><span class="pln">  </span></code></li><li class="L0"><code class="language-go"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"conneted ok!"</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L1"><code class="language-go"><span class="pln">    </span><span class="com">/** </span></code></li><li class="L2"><code class="language-go"><span class="com">     * "/testUserNode" 监听的节点，可以是现在存在的也可以是不存在的 </span></code></li><li class="L3"><code class="language-go"><span class="com">     */</span><span class="pln">  </span></code></li><li class="L4"><code class="language-go"><span class="pln">    zkClient</span><span class="pun">.</span><span class="pln">subscribeChildChanges</span><span class="pun">(</span><span class="str">"/testUserNode3"</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ZKChildListener</span><span class="pun">());</span><span class="pln">  </span></code></li><li class="L5"><code class="language-go"><span class="pln">    </span><span class="typ">Thread</span><span class="pun">.</span><span class="pln">sleep</span><span class="pun">(</span><span class="typ">Integer</span><span class="pun">.</span><span class="pln">MAX_VALUE</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L6"><code class="language-go"><span class="pun">}</span><span class="pln"> </span></code></li><li class="L7"><code class="language-go"><span class="com">//8.订阅节点的数据内容的变化</span></code></li><li class="L8"><code class="language-go"><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ZKDataListener</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">IZkDataListener</span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L9"><code class="language-go"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> handleDataChange</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> dataPath</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Object</span><span class="pln"> data</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L0"><code class="language-go"><span class="pln">        </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">dataPath</span><span class="pun">+</span><span class="str">":"</span><span class="pun">+</span><span class="pln">data</span><span class="pun">.</span><span class="pln">toString</span><span class="pun">());</span><span class="pln">  </span></code></li><li class="L1"><code class="language-go"><span class="pln">    </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L2"><code class="language-go"><span class="pln">    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> handleDataDeleted</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> dataPath</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln">     </span></code></li><li class="L3"><code class="language-go"><span class="pln">        </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">dataPath</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L4"><code class="language-go"><span class="pln">    </span><span class="pun">}</span><span class="pln">    </span></code></li><li class="L5"><code class="language-go"><span class="pun">}</span><span class="pln">  </span></code></li><li class="L6"><code class="language-go"><span class="pln">  </span></code></li><li class="L7"><code class="language-go"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">InterruptedException</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L8"><code class="language-go"><span class="pln">    </span><span class="com">//zk集群的地址  </span></code></li><li class="L9"><code class="language-go"><span class="pln">    </span><span class="typ">String</span><span class="pln"> </span><span class="typ">ZKServers</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"192.168.30.164:2181,192.168.30.165:2181,192.168.30.166:2181"</span><span class="pun">;</span><span class="pln">  </span></code></li><li class="L0"><code class="language-go"><span class="pln">    </span><span class="typ">ZkClient</span><span class="pln"> zkClient </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ZkClient</span><span class="pun">(</span><span class="typ">ZKServers</span><span class="pun">,</span><span class="lit">10000</span><span class="pun">,</span><span class="lit">10000</span><span class="pun">,</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SerializableSerializer</span><span class="pun">());</span><span class="pln">  </span></code></li><li class="L1"><code class="language-go"><span class="pln">    </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"conneted ok!"</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L2"><code class="language-go"></code></li><li class="L3"><code class="language-go"><span class="pln">    zkClient</span><span class="pun">.</span><span class="pln">subscribeDataChanges</span><span class="pun">(</span><span class="str">"/testUserNode"</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ZKDataListener</span><span class="pun">());</span><span class="pln">  </span></code></li><li class="L4"><code class="language-go"><span class="pln">    </span><span class="typ">Thread</span><span class="pun">.</span><span class="pln">sleep</span><span class="pun">(</span><span class="typ">Integer</span><span class="pun">.</span><span class="pln">MAX_VALUE</span><span class="pun">);</span><span class="pln">  </span></code></li><li class="L5"><code class="language-go"><span class="pln">      </span></code></li><li class="L6"><code class="language-go"><span class="pun">}</span></code></li></ol></pre></div><div><div><span style="line-height: 24.2667px;"><br></span></div><h3><span style="line-height: 24.2667px;">Zookeeper典型应用场景</span></h3><div><span style="line-height: 24.2667px;">1.利用Zookeeper实现配置管理：</span></div><div><span style="line-height: 24.2667px;">&nbsp; &nbsp; 利用发布/订阅实现，发送者将数据发布到zk的一个或者一系列节点上，订阅者进行数据订阅，当数据变化时，可以及时得到数据的变化通知。</span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">2.master选举：</span></div><div><span style="line-height: 24.2667px;">1)zk上创建节点/servers节点；</span></div><div><span style="line-height: 24.2667px;">2)各个服务器在启动过程中，首先会到ZK节点下的servers节点下，去创建一个临时节点，并把自己的基本信息写入到这个临时节点中，这个过程叫服务注册；</span></div><div><span style="line-height: 24.2667px;">3)紧接着这些服务器会尝试着去创建/master临时节点，谁能创建成功谁就是master节点，其他的两台机子就作为slave。</span></div><div><span style="line-height: 24.2667px;">4)所有的服务器必须监听/master节点的删除事件（因为ZK的临时节点会话失效后就会立刻被删除），一旦master节点宕机，其他的节点就会立刻发现，然后重新选举。</span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">3.Zookeeper的发布和订阅：</span></div><div><span style="line-height: 24.2667px;">发布订阅模式可以看成一对多的关系：多个订阅者对象同时监听一个主题对象，这个主题对象在自身状态发生变化时，会通知所有的订阅者对象，使他们能够自动的更新自己的状态。</span></div><div><span style="line-height: 24.2667px;">发布订阅模式在分布式系统的典型应用有， 配置管理和服务发现。</span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">4.ZooKeeper 实现分布式锁：</span></div><div><span style="line-height: 24.2667px;">分布式锁：分布式锁指的是在分布式环境下，保护跨进程，跨主机，跨网络的共享资源，实现互斥访问，保证一致性。</span></div><div><span style="line-height: 24.2667px;">1)客户端在/lockers/node节点下创建顺序节点，返回一个顺序节点node_k；</span></div><div><span style="line-height: 24.2667px;">2)立刻获取所有/lockers/下所有节点，看k之前是否有节点，如果有，说明有其他客户端都拿到锁了，这时阻塞监听node_(k-1)节点删除事件，如果监听到，当前客户端就拿到了锁，其他客户端也在watch这个节点。</span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">5.ZooKeeper 实现分布式队列</span></div><div><span style="line-height: 24.2667px;">1)生产者通过在/queue节点下创建顺序节点来存放数据；</span></div><div><span style="line-height: 24.2667px;">2)消费者读取queue下所有子节点列表children，按由小到大的排序，读取最小的那个子节点的数据，读取到数据后，删除该节点。</span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">6.ZooKeeper 实现命名服务</span></div><div><span style="line-height: 24.2667px;">可以理解成一个分布式的ID生成器</span></div><div><span style="line-height: 24.2667px;">命名服务可以理解为提供名字的服务</span></div><div><span style="line-height: 24.2667px;">Zookeeper的命名服务，有两个应用方向：</span></div><div><span style="line-height: 24.2667px;">1.提供类似JNDI的功能：</span></div><div><span style="line-height: 24.2667px;">利用zookeeper中的树形分层结构，可以把系统中的各种服务的名称，地址以及目录信息存放在zookeeper中，需要的时候去zookeeper中去读取</span></div><div><span style="line-height: 24.2667px;">2.利用zookeeper中的顺序节点的特性，制作分布式的序列号生成器（ID生成器）。创建持久的顺序节点，返回节点名称，删除该节点。</span></div></div></div><h3><span style="line-height: 24.2667px;">Zookeeper使用遇到问题</span></h3><div><span style="line-height: 24.2667px;">Watch是一次性触发器，如果你得到了一个watch事件，而你希望在以后发生变更时继续得到通知，你应该再设置一个watch,当然ZKClient已经帮你实现了这个事情。因 为watch是一次性触发器，而获得事件再发送一个新的设置watch的请求这一过程会有延时，所以你无法确保你看到了所有发生在ZooKeeper上的 一个节点上的事件。所以请处理好在这个时间窗口中可能会发生多次znode变更的这种情况。当你从一个服务器上断开时（比如服务器出故障了），在再次连接上之前，你将无法获得任何watch。请使用这些会话事件来进入安全模式：在disconnected状态下你将不会收到事件，所以你的程序在此期间应该谨慎行事。</span><br></div><h3><span style="line-height: 24.2667px;">etcd基本使用</span></h3><div><span style="line-height: 24.2667px;">etcd作为HTTP+JSON的API，用curl命令可以轻松使用，提供可选SSL客户端认证机制。</span><br></div><div><span style="line-height: 24.2667px;">etcdctl包含了etcd所有的操作，基本等同于ZooKeeper的功能。</span><br></div><div><span style="line-height: 24.2667px;"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-go"><span class="com">#设置一个键的值</span></code></li><li class="L1"><code class="language-go"><span class="pln">etcdctl </span><span class="kwd">set</span><span class="pln"> </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">bar </span><span class="str">"hello world"</span></code></li><li class="L2"><code class="language-go"><span class="pln">hello world</span></code></li><li class="L3"><code class="language-go"><span class="com">#设置一个带time to live的键</span></code></li><li class="L4"><code class="language-go"><span class="pln">etcdctl </span><span class="kwd">set</span><span class="pln"> </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">bar </span><span class="str">"hello world"</span><span class="pln"> </span><span class="pun">--</span><span class="pln">ttl </span><span class="lit">60</span></code></li><li class="L5"><code class="language-go"><span class="pln">hello world</span></code></li><li class="L6"><code class="language-go"><span class="com">#当值为"hello world"时，替换为"Goodbye world"。</span></code></li><li class="L7"><code class="language-go"><span class="pln">etcdctl </span><span class="kwd">set</span><span class="pln"> </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">bar </span><span class="str">"Goodbye world"</span><span class="pln"> </span><span class="pun">--</span><span class="pln">swap</span><span class="pun">-</span><span class="kwd">with</span><span class="pun">-</span><span class="pln">value </span><span class="str">"hello world"</span></code></li><li class="L8"><code class="language-go"><span class="pln">etcdctl </span><span class="kwd">set</span><span class="pln"> </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">bar </span><span class="str">"Goodbye world"</span><span class="pln"> </span><span class="pun">--</span><span class="pln">swap</span><span class="pun">-</span><span class="kwd">with</span><span class="pun">-</span><span class="pln">value </span><span class="str">"hello world"</span></code></li><li class="L9"><code class="language-go"><span class="typ">Goodbye</span><span class="pln"> world</span></code></li><li class="L0"><code class="language-go"><span class="pln">etcdctl </span><span class="kwd">set</span><span class="pln"> </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">bar </span><span class="str">"Goodbye world"</span><span class="pln"> </span><span class="pun">--</span><span class="pln">swap</span><span class="pun">-</span><span class="kwd">with</span><span class="pun">-</span><span class="pln">value </span><span class="str">"hello world"</span></code></li><li class="L1"><code class="language-go"><span class="typ">Error</span><span class="pun">:</span><span class="pln">  </span><span class="lit">101</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Compare</span><span class="pln"> failed </span><span class="pun">([</span><span class="pln">hello world </span><span class="pun">!=</span><span class="pln"> </span><span class="typ">Goodbye</span><span class="pln"> world</span><span class="pun">])</span><span class="pln"> </span><span class="pun">[</span><span class="lit">7</span><span class="pun">]</span></code></li><li class="L2"><code class="language-go"><span class="com">#仅当不存在时创建</span></code></li><li class="L3"><code class="language-go"><span class="pln">etcdctl mk </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">new_bar </span><span class="str">"Hello world"</span></code></li><li class="L4"><code class="language-go"><span class="typ">Hello</span><span class="pln"> world</span></code></li><li class="L5"><code class="language-go"><span class="pln">etcdctl mk </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">new_bar </span><span class="str">"Hello world"</span></code></li><li class="L6"><code class="language-go"><span class="typ">Error</span><span class="pun">:</span><span class="pln">  </span><span class="lit">105</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Key</span><span class="pln"> already exists </span><span class="pun">(</span><span class="str">/foo/</span><span class="pln">new_bar</span><span class="pun">)</span><span class="pln"> </span><span class="pun">[</span><span class="lit">8</span><span class="pun">]</span></code></li><li class="L7"><code class="language-go"><span class="com">#仅当存在时更新建</span></code></li><li class="L8"><code class="language-go"><span class="pln">etcdctl update </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">bar </span><span class="str">"hello etcd"</span></code></li><li class="L9"><code class="language-go"><span class="pln">hello etcd</span></code></li><li class="L0"><code class="language-go"><span class="com">#创建一个directory node</span></code></li><li class="L1"><code class="language-go"><span class="pln">etcdctl mkdir </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">dir</span></code></li><li class="L2"><code class="language-go"><span class="com">#创建一个directory node，或者将一个file node设置成directory node</span></code></li><li class="L3"><code class="language-go"><span class="pln">etcdctl setDir  </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">dir</span></code></li><li class="L4"><code class="language-go"><span class="com">#删除file node</span></code></li><li class="L5"><code class="language-go"><span class="pln">etcdctl rm </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">bar</span></code></li><li class="L6"><code class="language-go"><span class="com">#删除directory node</span></code></li><li class="L7"><code class="language-go"><span class="pln">etcdctl rmdir </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">dir</span></code></li><li class="L8"><code class="language-go"><span class="pln">etcdctl rm </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">dir </span><span class="pun">--</span><span class="pln">dir</span></code></li><li class="L9"><code class="language-go"><span class="com">#递归删除</span></code></li><li class="L0"><code class="language-go"><span class="pln">etcdctl rm </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">dir </span><span class="pun">--</span><span class="pln">recursive</span></code></li><li class="L1"><code class="language-go"><span class="com">#当值为"Hello world"时删除</span></code></li><li class="L2"><code class="language-go"><span class="pln">etcdctl rm </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">bar </span><span class="pun">--</span><span class="kwd">with</span><span class="pun">-</span><span class="pln">value </span><span class="str">"Hello world"</span></code></li><li class="L3"><code class="language-go"><span class="com">#获得某个键的值</span></code></li><li class="L4"><code class="language-go"><span class="pln">etcdctl </span><span class="kwd">get</span><span class="pln"> </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">bar</span></code></li><li class="L5"><code class="language-go"><span class="pln">hello</span><span class="pun">,</span><span class="pln"> etcd</span></code></li><li class="L6"><code class="language-go"><span class="com">#获得某个键在集群内的一致性值</span></code></li><li class="L7"><code class="language-go"><span class="pln">etcdctl </span><span class="kwd">get</span><span class="pln"> </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">bar </span><span class="pun">--</span><span class="pln">consistent</span></code></li><li class="L8"><code class="language-go"><span class="pln">hello</span><span class="pun">,</span><span class="pln"> etcd</span></code></li><li class="L9"><code class="language-go"><span class="com">#获得一些扩展的元信息</span></code></li><li class="L0"><code class="language-go"><span class="pln">etcdctl </span><span class="pun">-</span><span class="pln">o extended </span><span class="kwd">get</span><span class="pln"> </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">bar</span></code></li><li class="L1"><code class="language-go"><span class="typ">Key</span><span class="pun">:</span><span class="pln"> </span><span class="str">/foo/</span><span class="pln">bar</span></code></li><li class="L2"><code class="language-go"><span class="typ">Created</span><span class="pun">-</span><span class="typ">Index</span><span class="pun">:</span><span class="pln"> </span><span class="lit">14</span></code></li><li class="L3"><code class="language-go"><span class="typ">Modified</span><span class="pun">-</span><span class="typ">Index</span><span class="pun">:</span><span class="pln"> </span><span class="lit">14</span></code></li><li class="L4"><code class="language-go"><span class="pln">TTL</span><span class="pun">:</span><span class="pln"> </span><span class="lit">0</span></code></li><li class="L5"><code class="language-go"><span class="typ">Etcd</span><span class="pun">-</span><span class="typ">Index</span><span class="pun">:</span><span class="pln"> </span><span class="lit">14</span></code></li><li class="L6"><code class="language-go"><span class="typ">Raft</span><span class="pun">-</span><span class="typ">Index</span><span class="pun">:</span><span class="pln"> </span><span class="lit">5013</span></code></li><li class="L7"><code class="language-go"><span class="typ">Raft</span><span class="pun">-</span><span class="typ">Term</span><span class="pun">:</span><span class="pln"> </span><span class="lit">0</span></code></li><li class="L8"><code class="language-go"><span class="pln"> </span></code></li><li class="L9"><code class="language-go"><span class="pln">hello</span><span class="pun">,</span><span class="pln"> etcd</span></code></li><li class="L0"><code class="language-go"><span class="com">#其中，索引是一个对于etcd上任何改变中唯一、单调递增的整数。这个特殊的索引反映了etcd在某个key被创建后的时间点的etcd状态机。比如此时新建一个/foo/bar1，那么该节点的created-index和modified-index为15，代表了当前etcd的最新改变。</span></code></li><li class="L1"><code class="language-go"><span class="com">#列出目录的内容,-p则对directory node以/结尾</span></code></li><li class="L2"><code class="language-go"><span class="pln">etcdctl ls</span></code></li><li class="L3"><code class="language-go"><span class="pun">/</span><span class="pln">foo</span></code></li><li class="L4"><code class="language-go"><span class="pln">etcdctl ls </span><span class="pun">/</span><span class="pln">foo</span></code></li><li class="L5"><code class="language-go"><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">bar</span></code></li><li class="L6"><code class="language-go"><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">new_bar</span></code></li><li class="L7"><code class="language-go"><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">dir</span></code></li><li class="L8"><code class="language-go"><span class="pln">etcdctl ls </span><span class="pun">/</span><span class="pln"> </span><span class="pun">--</span><span class="pln">recursive</span></code></li><li class="L9"><code class="language-go"><span class="pun">/</span><span class="pln">foo</span></code></li><li class="L0"><code class="language-go"><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">bar</span></code></li><li class="L1"><code class="language-go"><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">new_bar</span></code></li><li class="L2"><code class="language-go"><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">dir</span></code></li><li class="L3"><code class="language-go"><span class="pln"> </span></code></li><li class="L4"><code class="language-go"><span class="com">#设置监视（watch）,此时该命令会一直等待并输出下一次变化。</span></code></li><li class="L5"><code class="language-go"><span class="pln">etcdctl watch </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">bar</span></code></li><li class="L6"><code class="language-go"><span class="pln">hello</span><span class="pun">,</span><span class="pln"> etcd</span><span class="pun">!</span></code></li><li class="L7"><code class="language-go"><span class="com">#while another terminal</span></code></li><li class="L8"><code class="language-go"><span class="pln">etcdctl update </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">bar </span><span class="str">"hello, etcd!"</span></code></li><li class="L9"><code class="language-go"><span class="pln">hello</span><span class="pun">,</span><span class="pln"> etcd</span><span class="pun">!</span></code></li><li class="L0"><code class="language-go"><span class="com">#持续监视更新</span></code></li><li class="L1"><code class="language-go"><span class="pln">etcdctl watch </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">bar </span><span class="pun">--</span><span class="pln">forever</span></code></li><li class="L2"><code class="language-go"><span class="pun">......</span></code></li><li class="L3"><code class="language-go"><span class="com">#使用Ctrl+c结束</span></code></li><li class="L4"><code class="language-go"><span class="com">#当反生变化时执行一个应用</span></code></li><li class="L5"><code class="language-go"><span class="pln">etcdctl </span><span class="kwd">exec</span><span class="pun">-</span><span class="pln">watch </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">bar </span><span class="pun">--</span><span class="pln"> sh </span><span class="pun">-</span><span class="pln">c </span><span class="str">"echo hi"</span></code></li><li class="L6"><code class="language-go"><span class="pln">hi</span></code></li><li class="L7"><code class="language-go"><span class="pln">hi</span></code></li><li class="L8"><code class="language-go"><span class="pun">......</span></code></li><li class="L9"><code class="language-go"><span class="com">#监视目录下所有节点的改变</span></code></li><li class="L0"><code class="language-go"><span class="pln">etcdctl </span><span class="kwd">exec</span><span class="pun">-</span><span class="pln">watch </span><span class="pun">--</span><span class="pln">recursive </span><span class="pun">/</span><span class="pln">foo </span><span class="pun">--</span><span class="pln"> sh </span><span class="pun">-</span><span class="pln">c </span><span class="str">"echo hi"</span></code></li></ol></pre></div><div>通过curl维护etcd</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-go"><span class="com">#获得版本</span></code></li><li class="L1"><code class="language-go"><span class="pln">curl </span><span class="pun">-</span><span class="pln">L http</span><span class="pun">:</span><span class="com">//127.0.0.1:4001/version</span></code></li><li class="L2"><code class="language-go"><span class="pln">etcd </span><span class="lit">0.4</span><span class="pun">.</span><span class="lit">6</span></code></li><li class="L3"><code class="language-go"><span class="pun">查看集群信息</span></code></li><li class="L4"><code class="language-go"><span class="com"># 查看leader</span></code></li><li class="L5"><code class="language-go"><span class="pln">curl </span><span class="pun">-</span><span class="pln">L http</span><span class="pun">:</span><span class="com">//127.0.0.1:4001/v2/leader</span></code></li><li class="L6"><code class="language-go"><span class="pln">http</span><span class="pun">:</span><span class="com">//127.0.0.1:7001</span></code></li><li class="L7"><code class="language-go"><span class="com"># 查看peers</span></code></li><li class="L8"><code class="language-go"><span class="pln">curl </span><span class="pun">-</span><span class="pln">L http</span><span class="pun">:</span><span class="com">//127.0.0.1:4001/v2/machines</span></code></li><li class="L9"><code class="language-go"><span class="pln">http</span><span class="pun">:</span><span class="com">//127.0.0.1:4001, http://127.0.0.1:4002, http://127.0.0.1:4003</span></code></li><li class="L0"><code class="language-go"><span class="com"># 获得一致性get</span></code></li><li class="L1"><code class="language-go"><span class="pln">etcdctl </span><span class="kwd">set</span><span class="pln"> </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">bar </span><span class="str">"Hi, etcd cluster"</span></code></li><li class="L2"><code class="language-go"><span class="pln">  </span><span class="typ">Hi</span><span class="pun">,</span><span class="pln"> etcd cluster</span></code></li><li class="L3"><code class="language-go"><span class="pln">etcdctl </span><span class="kwd">get</span><span class="pln"> </span><span class="pun">/</span><span class="pln">foo</span><span class="pun">/</span><span class="pln">bar </span><span class="pun">--</span><span class="pln">consistent</span></code></li><li class="L4"><code class="language-go"><span class="pln">  </span><span class="typ">Hi</span><span class="pun">,</span><span class="pln"> etcd cluster</span></code></li><li class="L5"><code class="language-go"><span class="com"># 干掉etcd1(http://127.0.0.1:4001)服务进程后，检查leader。已经成功切换到etcd3</span></code></li><li class="L6"><code class="language-go"><span class="pln">curl </span><span class="pun">-</span><span class="pln">L http</span><span class="pun">:</span><span class="com">//127.0.0.1:4002/v2/leader</span></code></li><li class="L7"><code class="language-go"><span class="pln">  http</span><span class="pun">:</span><span class="com">//127.0.0.1:7003</span></code></li><li class="L8"><code class="language-go"><span class="com">#set操作，URL为http://127.0.0.1:4001/v2/keys</span></code></li><li class="L9"><code class="language-go"><span class="pln">curl </span><span class="pun">-</span><span class="pln">L http</span><span class="pun">:</span><span class="com">//127.0.0.1:4001/v2/keys/foo/bar -XPUT -d value="hi, etcd"</span></code></li><li class="L0"><code class="language-go"><span class="pun">{</span><span class="str">"action"</span><span class="pun">:</span><span class="str">"set"</span><span class="pun">,</span><span class="str">"node"</span><span class="pun">:{</span><span class="str">"key"</span><span class="pun">:</span><span class="str">"/foo/bar"</span><span class="pun">,</span><span class="str">"value"</span><span class="pun">:</span><span class="str">"hi, etcd"</span><span class="pun">,</span><span class="str">"modifiedIndex"</span><span class="pun">:</span><span class="lit">27</span><span class="pun">,</span><span class="str">"createdIndex"</span><span class="pun">:</span><span class="lit">27</span><span class="pun">},</span><span class="str">"prevNode"</span><span class="pun">:{</span><span class="str">"key"</span><span class="pun">:</span><span class="str">"/foo/bar"</span><span class="pun">,</span><span class="str">"value"</span><span class="pun">:</span><span class="str">"hello, etcd!"</span><span class="pun">,</span><span class="str">"modifiedIndex"</span><span class="pun">:</span><span class="lit">22</span><span class="pun">,</span><span class="str">"createdIndex"</span><span class="pun">:</span><span class="lit">22</span><span class="pun">}}</span></code></li><li class="L1"><code class="language-go"><span class="com">#get操作</span></code></li><li class="L2"><code class="language-go"><span class="pln">curl </span><span class="pun">-</span><span class="pln">L http</span><span class="pun">:</span><span class="com">//127.0.0.1:4001/v2/keys/foo/bar </span></code></li><li class="L3"><code class="language-go"><span class="pun">{</span><span class="str">"action"</span><span class="pun">:</span><span class="str">"get"</span><span class="pun">,</span><span class="str">"node"</span><span class="pun">:{</span><span class="str">"key"</span><span class="pun">:</span><span class="str">"/foo/bar"</span><span class="pun">,</span><span class="str">"value"</span><span class="pun">:</span><span class="str">"hi, etcd"</span><span class="pun">,</span><span class="str">"modifiedIndex"</span><span class="pun">:</span><span class="lit">27</span><span class="pun">,</span><span class="str">"createdIndex"</span><span class="pun">:</span><span class="lit">27</span><span class="pun">}}</span></code></li><li class="L4"><code class="language-go"><span class="com">#rm操作</span></code></li><li class="L5"><code class="language-go"><span class="pln">curl </span><span class="pun">-</span><span class="pln">L http</span><span class="pun">:</span><span class="com">//127.0.0.1:4001/v2/keys/foo/bar -XDELETE</span></code></li><li class="L6"><code class="language-go"><span class="pun">{</span><span class="str">"action"</span><span class="pun">:</span><span class="str">"delete"</span><span class="pun">,</span><span class="str">"node"</span><span class="pun">:{</span><span class="str">"key"</span><span class="pun">:</span><span class="str">"/foo/bar"</span><span class="pun">,</span><span class="str">"modifiedIndex"</span><span class="pun">:</span><span class="lit">28</span><span class="pun">,</span><span class="str">"createdIndex"</span><span class="pun">:</span><span class="lit">27</span><span class="pun">},</span><span class="str">"prevNode"</span><span class="pun">:{</span><span class="str">"key"</span><span class="pun">:</span><span class="str">"/foo/bar"</span><span class="pun">,</span><span class="str">"value"</span><span class="pun">:</span><span class="str">"hi, etcd"</span><span class="pun">,</span><span class="str">"modifiedIndex"</span><span class="pun">:</span><span class="lit">27</span><span class="pun">,</span><span class="str">"createdIndex"</span><span class="pun">:</span><span class="lit">27</span><span class="pun">}}</span></code></li><li class="L7"><code class="language-go"><span class="com">#获得版本</span></code></li><li class="L8"><code class="language-go"><span class="pln">curl </span><span class="pun">-</span><span class="pln">L http</span><span class="pun">:</span><span class="com">//127.0.0.1:4001/version</span></code></li><li class="L9"><code class="language-go"><span class="pln">etcd </span><span class="lit">0.4</span><span class="pun">.</span><span class="lit">6</span></code></li><li class="L0"><code class="language-go"><span class="com">#set操作，URL为http://127.0.0.1:4001/v2/keys</span></code></li><li class="L1"><code class="language-go"><span class="pln">curl </span><span class="pun">-</span><span class="pln">L http</span><span class="pun">:</span><span class="com">//127.0.0.1:4001/v2/keys/foo/bar -XPUT -d value="hi, etcd"</span></code></li><li class="L2"><code class="language-go"><span class="pun">{</span><span class="str">"action"</span><span class="pun">:</span><span class="str">"set"</span><span class="pun">,</span><span class="str">"node"</span><span class="pun">:{</span><span class="str">"key"</span><span class="pun">:</span><span class="str">"/foo/bar"</span><span class="pun">,</span><span class="str">"value"</span><span class="pun">:</span><span class="str">"hi, etcd"</span><span class="pun">,</span><span class="str">"modifiedIndex"</span><span class="pun">:</span><span class="lit">27</span><span class="pun">,</span><span class="str">"createdIndex"</span><span class="pun">:</span><span class="lit">27</span><span class="pun">},</span><span class="str">"prevNode"</span><span class="pun">:{</span><span class="str">"key"</span><span class="pun">:</span><span class="str">"/foo/bar"</span><span class="pun">,</span><span class="str">"value"</span><span class="pun">:</span><span class="str">"hello, etcd!"</span><span class="pun">,</span><span class="str">"modifiedIndex"</span><span class="pun">:</span><span class="lit">22</span><span class="pun">,</span><span class="str">"createdIndex"</span><span class="pun">:</span><span class="lit">22</span><span class="pun">}}</span></code></li><li class="L3"><code class="language-go"><span class="com">#get操作</span></code></li><li class="L4"><code class="language-go"><span class="pln">curl </span><span class="pun">-</span><span class="pln">L http</span><span class="pun">:</span><span class="com">//127.0.0.1:4001/v2/keys/foo/bar </span></code></li><li class="L5"><code class="language-go"><span class="pun">{</span><span class="str">"action"</span><span class="pun">:</span><span class="str">"get"</span><span class="pun">,</span><span class="str">"node"</span><span class="pun">:{</span><span class="str">"key"</span><span class="pun">:</span><span class="str">"/foo/bar"</span><span class="pun">,</span><span class="str">"value"</span><span class="pun">:</span><span class="str">"hi, etcd"</span><span class="pun">,</span><span class="str">"modifiedIndex"</span><span class="pun">:</span><span class="lit">27</span><span class="pun">,</span><span class="str">"createdIndex"</span><span class="pun">:</span><span class="lit">27</span><span class="pun">}}</span></code></li><li class="L6"><code class="language-go"><span class="com">#rm操作</span></code></li><li class="L7"><code class="language-go"><span class="pln">curl </span><span class="pun">-</span><span class="pln">L http</span><span class="pun">:</span><span class="com">//127.0.0.1:4001/v2/keys/foo/bar -XDELETE</span></code></li><li class="L8"><code class="language-go"><span class="pun">{</span><span class="str">"action"</span><span class="pun">:</span><span class="str">"delete"</span><span class="pun">,</span><span class="str">"node"</span><span class="pun">:{</span><span class="str">"key"</span><span class="pun">:</span><span class="str">"/foo/bar"</span><span class="pun">,</span><span class="str">"modifiedIndex"</span><span class="pun">:</span><span class="lit">28</span><span class="pun">,</span><span class="str">"createdIndex"</span><span class="pun">:</span><span class="lit">27</span><span class="pun">},</span><span class="str">"prevNode"</span><span class="pun">:{</span><span class="str">"key"</span><span class="pun">:</span><span class="str">"/foo/bar"</span><span class="pun">,</span><span class="str">"value"</span><span class="pun">:</span><span class="str">"hi, etcd"</span><span class="pun">,</span><span class="str">"modifiedIndex"</span><span class="pun">:</span><span class="lit">27</span><span class="pun">,</span><span class="str">"createdIndex"</span><span class="pun">:</span><span class="lit">27</span><span class="pun">}}</span></code></li></ol></pre></div><div><br></div></div></span></div><h3><span style="line-height: 24.2667px;">etcd使用场景</span></h3><div><div><span style="line-height: 24.2667px;">1.服务发现：借助一个强一致性/高可用的服务存储目录，实现服务动态添加。</span></div><div><span style="line-height: 24.2667px;">2.消息发布与订阅 &nbsp; 数据提供者发布消息，消费者订阅</span></div><div><span style="line-height: 24.2667px;">3.软负载均衡</span></div><div><span style="line-height: 24.2667px;">4.分布式通知与协调 &nbsp;使用watch具体目录。</span></div><div><span style="line-height: 24.2667px;">5.分布式锁</span></div><div><span style="line-height: 24.2667px;">6.分布式队列</span></div></div><h3><span style="line-height: 24.2667px;">etcd使用遇到问题</span></h3><div><span style="line-height: 24.2667px;">无</span></div><h3><span style="line-height: 24.2667px;">Zookeeper和etcd和consul对比</span></h3><div><div style="font-family: Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;"><font face="黑体"><span style="line-height: 24.2667px;"></span><div style="font-family: Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;">zookeepr与etcd对比：</div><div style="font-family: Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;">zk复杂，使用Paxos强一致性算法，zk使用也比较复杂，需要安装客户端。</div><div style="font-family: Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;">java编写</div><div style="font-family: Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;">etcd简单，使用go编写，部署简单，作为HTTP+JSON的API，用curl命令可以轻松使用，提供可选SSL客户端认证机制。</div></font></div></div><div><font face="黑体"><span style="line-height: 24.2667px;"><br></span></font></div><div><span style="line-height: 24.2667px;"><div>Zookeeper提供了临时节点，sequence，和变更通知。利用Zookeeper的这3个特性实现了按照sequence的顺序依次获取锁和成为主。</div><div>etcd没有临时节点的概念，但是通过租约的方式提供了类似的功能。etcd没有sequence的概念，但是提供了全局递增的序列号revision，通过判断每个key的revision，也可以实现类似的sequence功能。提供多键条件事务（类似etcdv2的Compare-and-Swap）。虽然提供的机制不同与Zookeeper，但是实现的锁方式和选主方式与zookeeper非常类似，也是按照key建立时间依次获得锁和成为主。</div></span></div></font></div><h4 style="line-height: 24.2667px;"><font face="黑体">Paxos/ZAB/raft协议对比</font></h4><div><font face="黑体"><h5 style="line-height: 24.2667px;">zab协议</h5><div><div><span style="line-height: 24.2667px;">zookeeper是基于paxos的简化版zab，ZAB即Zookeeper原子消息广播协议，选举过程和数据写入过程都需要依赖此协议。写只在一个节点去写，一个数据的变更，由两个提议组成，一个提议是对数据修改的本身，另一个提议是数据事务的提交。</span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">服务器的三种角色：</span></div><div><span style="line-height: 24.2667px;">Leader：事务请求的唯一调度和处理者，集群内各服务器的调度者</span></div><div><span style="line-height: 24.2667px;">Follower：处理客户端非事务请求；转发事务请求给Leader；参与事务请求Proposal的投票；参与Leader选举投票。</span></div><div><span style="line-height: 24.2667px;">Observer：处理客户端非事务请求；转发事务请求给Leader；不存于任何形式（事务请求和选举Leader）投票。</span></div><div><span style="line-height: 24.2667px;">服务器的状态：</span></div><div><span style="line-height: 24.2667px;">LOOKING：寻找Leader状态，当处于当前状态时，表示没有Leader，需要进入选举流程；</span></div><div><span style="line-height: 24.2667px;">FOLLOWING：当前服务器已经是Follower。</span></div><div><span style="line-height: 24.2667px;">OBSERVING：当前服务器时Observer角色。</span></div><div><span style="line-height: 24.2667px;">LEADING：当前服务器时Leader。</span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">ZAB协议的三个阶段：</span></div><div><span style="line-height: 24.2667px;">1.发现，即选举Leader过程；</span></div><div><span style="line-height: 24.2667px;">2.同步，选举出新的Leader后，Follower或者Observer从Leader同步最新的数据；</span></div><div><span style="line-height: 24.2667px;">3.广播，同步完成后，就可以接收客户端新的事务请求，并进行消息广播，实现数据在集群节点的副本存储。</span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">ZAB具体流程：</span></div><div><span style="line-height: 24.2667px;">为避免两个节点之间的TCP连接，zk按照myid数值方向建立连接，比如id为1的向id为2的发起tcp连接。并且数据同步端口2888，投票端口3888，分开的。</span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">集群启动前，每个都有一个myid文件，myid中数字越大的就会被选举成为Leader，当集群中已经有Leader时，新加入的节点不会影响原来的集群。通过事务id(zxid)的大小来表示数据的新旧，越大代表数据越新。</span></div><div><span style="line-height: 24.2667px;">1.初次启动，三个zk节点，对应的myid为1,2,3。</span></div><div><span style="line-height: 24.2667px;">1)启动myid为1的节点，此时zxid为0，此时没法选举出主节点。</span></div><div><span style="line-height: 24.2667px;">2)启动myid为2的节点，它的zxid也为0，此时2这个节点成为主节点</span></div><div><span style="line-height: 24.2667px;">3)启动myid为3的节点，因为已经有主节点，则3加入集群，2还是Leader.</span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">当Leader突然宕机后，其他节点的状态变更为LOOKING。</span></div><div><span style="line-height: 24.2667px;">1)每个server发出一个投自己的票的投票。生成投票信息(myid,zxid)，server1为(1,123)，server3为(2,122)，server1发给server3，server3发给server1。</span></div><div><span style="line-height: 24.2667px;">2)server3收到server1，因为server1的123比122大，所以，server3修改自己的投票为(1,123)，然后发给server1.server1收到server3的投票，因为123大于122，因此不改变自己的投票。</span></div><div><span style="line-height: 24.2667px;">3)各个服务器开始统计自己的票，server3统计，自己收到的投票(包含自己投的)中，(1,123)是两票，server1统计，自己受到投票(包含自己投的)中，(1,123)手机两票。因此，server3选出的leader是1，而自己是3，因此自己进入following状态，即follower角色。server1，选出的leader是1，自己就是1，因此自己进入LEADING状态，即自己是leader角色。</span></div><div><span style="line-height: 24.2667px;">4)当leader完成选举后，follower需要与新的leader同步数据，同步前准备：</span></div><div><span style="line-height: 24.2667px;">Leader端，告诉其他follower当前最新数据是什么即zxid是什么。Leader构建一个NEWLEADER的包，包括当前最大的zxid，发送给所有的follower或者Observer。然后，Leader给每个follower创建一个线程LearnerHandler来负责处理每个follower的数据同步请求，同时主线程开始阻塞，只有超过一半的follower同步完成，同步过程才完成，leader才能成为真正的leader。</span></div><div><span style="line-height: 24.2667px;">follower端，选举完成后，尝试与leader建立同步连接，如果一段时间没有连接上就报超时，重新回到选举状态。</span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">集群选举完成，并且完成数据同步后，即可开始对外服务，接收读写请求：</span></div><div><span style="line-height: 24.2667px;">Leader是唯一的可以对事务请求进行写操作的节点，客户端不仅可以连接Leader，还可以连接Follower，但是Follower节点收到写请求后，要把写的事务请求转发给Leader节点，Follower节点可以处理客户端的读请求。</span></div><div><span style="line-height: 24.2667px;">1)当接收到客户端新的事务请求后，会生成对应的事务proposal，并根据zxid的顺序向所有的follower发送提案(proposal)；</span></div><div><span style="line-height: 24.2667px;">2)当follower收到leader的事务proposal时，根据接收的先后顺序处理这些proposal，即如果先后收到1,2,3条，则如果处理完了第3条，则代表1,2两条一定已经处理成功；</span></div><div><span style="line-height: 24.2667px;">3)当leader收到过半的follower针对某个事务proposal的ack后，则发送事务提交，重新发起一个commit的proposal；</span></div><div><span style="line-height: 24.2667px;">4)follower收到commit的proposal后，记录事务提交，并把数据更新到内存数据库。</span></div><div style="line-height: 24.2667px;"><br></div></div><h5 style="line-height: 24.2667px;">raft协议</h5><div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">etcd 集群的工作原理基于 raft 共识算法。raft 共识算法的优点在于可以在高效的解决分布式系统中各个节点日志内容一致性问题的同时，也使得集群具备一定的容错能力。即使集群中出现部分节点故障、网络故障等问题，仍可保证其余大多数节点正确的步进。甚至当更多的节点（一般来说超过集群节点总数的一半）出现故障而导致集群不可用时，依然可以保证节点中的数据不会出现错误的结果。</span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">raft 集群中的每个节点都可以根据集群运行的情况在三种状态间切换：follower(选民，完全被动), candidate(候选人，类似Proposer律师，可以被选为一个新的领导人) 与 leader。leader 向 follower 同步日志，follower 只从 leader 处获取日志。</span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">在 raft 集群中，所有日志都必须首先提交至 leader 节点。leader 在每个 heartbeat 向 follower 同步日志，follower 在收到日志之后向 leader 反馈结果，leader 在确认日志内容正确之后将此条目提交并存储于本地磁盘。</span></div><div><span style="line-height: 24.2667px;">1)首先有一条 uncommitted 的日志条目提交至 leader 节点。</span></div><div><span style="line-height: 24.2667px;">2)在下一个 heartbeat，leader 将此条目复制给所有的 follower。</span></div><div><span style="line-height: 24.2667px;">3)当大多数节点记录此条目之后，leader 节点认定此条目有效，将此条目设定为已提交并存储于本地磁盘。</span></div><div><span style="line-height: 24.2667px;">4)在下一个 heartbeat，leader 通知所有 follower 提交这一日志条目并存储于各自的磁盘内。</span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">1. 集群建立与状态机（集群初始状态）</span></div><div><span style="line-height: 24.2667px;">在节点初始启动时，节点的 raft 状态机将处于 follower 状态并被设定一个 election timeout，如果在这一时间周期内没有收到来自 leader 的 heartbeat，节点将发起选举：节点在将自己的状态切换为 candidate 之后，向集群中其它 follower 节点发送请求，询问其是否选举自己成为 leader。当收到来自集群中过半数节点的接受投票后，节点即成为 leader，开始接收保存 client 的数据并向其它的 follower 节点同步日志。leader 节点依靠定时向 follower 发送 heartbeat 来保持其地位。任何时候如果其它 follower 在 election timeout 期间都没有收到来自 leader 的 heartbeat，同样会将自己的状态切换为 candidate 并发起选举。每成功选举一次，新 leader 的步进数都会比之前 leader 的步进数大1。</span></div><div><span style="line-height: 24.2667px;">下面为一个 etcd 集群选举过程的简单描述：</span></div><div><span style="line-height: 24.2667px;">1)初始状态下集群中的所有节点都处于 follower 状态。</span></div><div><span style="line-height: 24.2667px;">2)某一时刻，其中的一个 follower 由于没有收到 leader 的 heartbeat 率先发生 election timeout 进而发起选举。</span></div><div><span style="line-height: 24.2667px;">3)只要集群中超过半数的节点接受投票，candidate 节点将成为即切换 leader 状态。</span></div><div><span style="line-height: 24.2667px;">4)成为 leader 节点之后，leader 将定时向 follower 节点同步日志并发送 heartbeat。</span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">2. 节点异常</span></div><div><span style="line-height: 24.2667px;">节点的异常大致可以分为四种类型：leader 不可用；follower 不可用；多个 candidate 或多个 leader；新节点加入集群。</span></div><div><span style="line-height: 24.2667px;">2.1 leader 不可用</span></div><div><span style="line-height: 24.2667px;">1)一般情况下，leader 节点定时发送 heartbeat 到 follower 节点。</span></div><div><span style="line-height: 24.2667px;">2)由于某些异常导致 leader 不再发送 heartbeat ，或 follower 无法收到 heartbeat 。</span></div><div><span style="line-height: 24.2667px;">3)当某一 follower 发生 election timeout 时，其状态变更为 candidate，并向其他 follower 发起投票。</span></div><div><span style="line-height: 24.2667px;">4)当超过半数的 follower 接受投票后，这一节点将成为新的 leader，leader 的步进数加1并开始向 follower 同步日志。</span></div><div><span style="line-height: 24.2667px;">5)当一段时间之后，如果之前的 leader 再次加入集群，则两个 leader 比较彼此的步进数，步进数低的 leader 将切换自己的状态为 follower。</span></div><div><span style="line-height: 24.2667px;">6)较早前 leader 中不一致的日志将被清除，并与现有 leader 中的日志保持一致。</span></div><div><span style="line-height: 24.2667px;">2.2 follower 节点不可用</span></div><div><span style="line-height: 24.2667px;">1)集群中的某个 follower 节点发生异常，不再同步日志以及接收 heartbeat。</span></div><div><span style="line-height: 24.2667px;">2)经过一段时间之后，原来的 follower 节点重新加入集群。</span></div><div><span style="line-height: 24.2667px;">3)这一节点的日志将从当时的 leader 处同步。</span></div><div><span style="line-height: 24.2667px;">2.3 多个 candidate 或多个 leader</span></div><div><span style="line-height: 24.2667px;">在集群中出现多个 candidate 或多个 leader 通常是由于数据传输不畅造成的。出现多个 leader 的情况相对少见，但多个 candidate 比较容易出现在集群节点启动初期尚未选出 leader 的“混沌”时期。</span></div><div><span style="line-height: 24.2667px;">1)初始状态下集群中的所有节点都处于 follower 状态。</span></div><div><span style="line-height: 24.2667px;">2)两个节点同时成为 candidate 发起选举。</span></div><div><span style="line-height: 24.2667px;">3)两个 candidate 都只得到了少部分 follower 的接受投票。</span></div><div><span style="line-height: 24.2667px;">4)candidate 继续向其他的 follower 询问。</span></div><div><span style="line-height: 24.2667px;">5)由于一些 follower 已经投过票了，所以均返回拒绝接受。</span></div><div><span style="line-height: 24.2667px;">6)candidate 也可能向一个 candidate 询问投票。</span></div><div><span style="line-height: 24.2667px;">7)在步进数相同的情况下，candidate 将拒绝接受另一个 candidate 的请求。</span></div><div><span style="line-height: 24.2667px;">8)由于第一次未选出 leader，candidate 将随机选择一个等待间隔（150ms ~ 300ms）再次发起投票。</span></div><div><span style="line-height: 24.2667px;">9)如果得到集群中半数以上的 follower 的接受，这一 candidate 将成为 leader。</span></div><div><span style="line-height: 24.2667px;">10)稍后另一个 candidate 也将再次发起投票。</span></div><div><span style="line-height: 24.2667px;">11)由于集群中已经选出 leader，candidate 将收到拒绝接受的投票。</span></div><div><span style="line-height: 24.2667px;">12)在被多数节点拒绝之后，并已知集群中已存在 leader 后，这一 candidate 节点将终止投票请求、切换为 follower，从 leader 节点同步日志。</span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">一个 etcd 节点的核心由三部分组成：</span></div><div><span style="line-height: 24.2667px;"><br></span></div><div><span style="line-height: 24.2667px;">Raft：raft 状态机是对 raft 共识算法的实现</span></div><div><span style="line-height: 24.2667px;">WAL：raft 日志存储</span></div><div><span style="line-height: 24.2667px;">Storage：数据的存储与索引</span></div><div><span style="line-height: 24.2667px;">WAL (Write-ahead logging)，是用于向系统提供原子性和持久性的一系列技术。</span></div></div><div><span style="line-height: 24.2667px;"><br></span></div></font></div></div></span></w:sdt></span></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN"><div style="font-family: &quot;Helvetica Neue&quot;;"><br></div><div><div style="font-family: &quot;Helvetica Neue&quot;; border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>分布式文件系统</h2></div><div style="line-height: 24.2667px;"><font face="黑体">Ceph</font></div></div><div style="line-height: 24.2667px;"><font face="黑体"></font></div><div style="line-height: 24.2667px;"><font face="黑体"><div style="line-height: 24.2667px;">FastDFS&nbsp;</div><div style="line-height: 24.2667px;">FastDFS 服务端有两个角色：跟踪器（ tracker）和存储节点（ storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。存储节点存储文件，完成文件管理的所有功能。</div><div style="line-height: 24.2667px;">Keepalived+Nginx连接多个跟踪器，实现和Web一样的高可用。直接访问这个VIP，获取文件。上传下载也直接写这个VIP。</div><div style="line-height: 24.2667px;">跟踪器和存储节点都可以由一台多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。各个存储节点上安装Nginx可以提供Web直接访问文件。哪个及其，就哪个IP访问。或者直接写VIP。</div></font></div><div style="line-height: 24.2667px;"><font face="黑体"><div><img border="0" src="All in_files/63922394.png"></div></font></div></span></w:sdt></span></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN"><div style="font-family: &quot;Helvetica Neue&quot;;"><br></div><div><div style="font-family: &quot;Helvetica Neue&quot;; border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>分布式事务<br></h2></div><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;">分布式事务解决方案：消息最终一致性（异步确保性）、最大努力通知、TCC事务补偿性（也属于两阶段型）。不管哪种方案，都要求实现幂等性（每次执行结果都相同）和可查询性（可查询这个唯一服务）。</div><h3 style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;">消息最终一致性</h3><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;"><div><div><img border="0" src="All in_files/62857625.png"></div></div><div><div>我们可以把上面紫色那部分称为可靠的消息服务来实现可靠消息的投递。</div><div>对于每块虚框部分，都是一个独立的事务域。</div><div><br></div><div>我们从消息最终一致性的四个维护分析：</div><div><br></div><div>1. 从消息发送一致性的正向流程分析，我们还是以支付订单，收到银行订单通知后和会计系统记账为例，我们通过消息实现异步的可靠一致性。</div><div>在主动方应用系统中，由于预发送消息、业务操作、发送业务操作结果在同一个本地域事务中，在更新订单之前，我先预发送一个消息，发送会计记账凭证，在消息服务子系统中，先存储预发送消息，状态为“预发送”，但这个消息还不能被消费，如果存储域发送消息失败，业务也不会继续执行，直接回滚。如果存储预发送消息成功，返回成果标记给主动方，主动方继续业务操作，执行完业务操作后，又发送业务操作结果，这时在消息服务子系统中，调确认并发送消息接口，把刚才预存储的消息状态改为“可发送”，并把消息扔给实时消息系统MQ中，接着就被消息业务消费端实时的监听并被消费掉。</div><div><br></div><div>2. 我们看消息发送一致性的异常处理流程：主动方发给消息服务子系统预发送消息，如果消息服务子系统出错，则会返回出错，主动方不会继续执行业务，而且还会回滚。如果主动方业务操作完毕后，发送业务操作结果网络中断，或业务操作失败，消息服务子系统未收到确认并发送消息，或者这个消息一直是一直是发送中，消息服务子系统发送给实时消息服务MQ失败，这时消息确认状态子系统就起作用了，消息确认状态子系统其实就是个定时任务，定时轮询，定时请求主动方应用，查询消息数据库中状态确认超时的消息，拿出请求主动方，主动方应该提供对应的业务查询接口，提供业务是否被处理成功。如果是处理成功了，消息状态确认子系统会确认消息，修改消息状态为“可发送”，并发送消息给实时消息系统MQ，被消费掉。如果业务返回的是业务没有被处理成功，消息状态确认子系统会调用消息服务子系统去删除这条“预发送”消息。</div><div><br></div><div>3. 我们看消息消费的正向流程：投递进实时消息服务MQ的消息，会被监听这个队列的消息业务消费端监听到，当监听到后，会调被动方应用服务，被动方在本地进行业务处理，业务处理一旦成功，会返回一个结果，是成功或失败，消息业务消费端收到返回状态后，会给实时消息服务MQ发送一个MQ的ACK，从队列里面删除这条消息。同时会调消息服务子系统中的确认消息已被成功消费接口，确认后，消息服务子系统会从消息服务中将这条消息删除掉，或修改状态为“已消费”。<br></div><div><br></div><div>4. 我们看消息消费的异常处理流程：消息业务消费端和被动方应用系统可能是网络通信，在消费端可能会存在网络问题，导致消息业务消费端不能请求MQ的ACK，或调确认消息已被成功消费接口，这时消息恢复子系统就起作用了，它定时的查询消息确认超时的消息，拿出来，把它重新的投递到实时消息服务中让重做，消费端是要实现幂等性的，重做多次的结果都一样，直到消费端返回成功接口。</div><div><br></div><div>另外可以提供一个消息管理子系统WebUI，提供对积累消息的查看，手动管理 。</div><div><br></div><div><div>这个方案的优点：</div><div>1、消息服务独立部署、独立维护、独立伸缩；</div><div>2、消息存储可以按需选择不同的数据库来集成实现；</div><div>3、消息服务可以被相同的使用场景公用，降低重复建设消息服务的成本；</div><div>4、从应用（分布式服务）设计开发的角度实现了消息数据的可靠性，消息数据的可靠性不依赖于MQ中间件，弱化了对MQ中间件特性的依赖；</div><div>5、降低了业务系统与消息系统间的耦合，有利于系统的扩展维护；图中紫色部分是独立的，业务只需要提供一个查询业务执行状态接口。</div><div><br></div><div>弊端/局限：</div><div>1、一次消息发送需要两次请求；</div><div>2、主动方应用系统需要实现业务操作状态校验查询接口。</div></div></div><div><br></div><div>我们只需要MQ的消息队列功能，不需要配置MQ重试。因为我们的服务会自己重试。</div></div><h3 style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;">最大努力通知</h3><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">最大努力通知：</div><div style="line-height: 24.2667px;">1. 业务活动的主动方在完成业务处理后，向消息服务队列中发送通知消息；<br></div><div style="line-height: 24.2667px;">2. 接收消息服务端在收到MQ消息以后，它会在通知接收端失败后，还重复的再投递消息，最大努力的保证通知成功。而不是收到消息以后，只通知一次。接收消息服务端使用了一个叫DeplayQueue，在一个这个队列中，每个对象都有一个延时时间，当哪个的延时时间到了后它才会出队列。</div><div style="line-height: 24.2667px;"><br></div></div><h3 style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;">TCC事务补偿</h3></div><div style="font-family: &quot;Helvetica Neue&quot;;"></div></span></w:sdt></span></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN"><div style="font-family: &quot;Helvetica Neue&quot;;"><div>TCC适用范围：</div><div><ul style="margin-bottom: 0px;"><li>强隔离性、严格一致性要求的业务活动；<br></li><li>适用于执行时间较短的业务（比如处理账户、收费等业务），要求实时性比较高的业务。</li></ul><div>TCC中间件+业务配合使用流程：</div></div><div><div><img border="0" src="All in_files/63141931.png"></div></div><div>1. 进订单服务主TRY方法前，Compensable拦截，ROOT类型，生成一个Transaction（类型为主支），又被TransactionContext拦截，ROOT类型，生一个新的TransactionXid xid，xid两个属性，参数1为食物TransactionID，参数2为UUID&nbsp;<span style="font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13px; line-height: 1.6;">branchQualifier</span><span style="line-height: 1.6;">字符串，获取confirm方法名和cancel方法名，构建ConfirmInvocation和CancelInvocation，使用confirmInvo和CancelInvo构成Terminal，Terminal和</span><span style="line-height: 1.6;">xid构成一个Participant放到Transaction中。开始执行TRY方法</span></div><div><span style="line-height: 1.6;">2.&nbsp;</span>消费方法被TransactionContext拦截，CONSUMER类型，获取当前Transaction，生一个新的TransactionXid xid，xid两个属性，参数1为食物TransactionID，参数2为UUID&nbsp;branchQualifier字符串，生TransactionContext对象（参数1传xid，参数2传当前事务状态为TRYING)，构建ConfirmInvocation和CancelInvocation，confirm和cancel方法的参数1是TransactionContext对象（参数1传xid，参数2传事务状态分别为CONFIRMING和CANCELING)。方法名都为账户服务的TRY方法名，使用confirmInvo和CancelInvo构成Terminal，Terminal和xid构成一个Participant放到Transaction中。开始执行TRY方法。远程调用资金账户服务</div><div>3. 进资金账户服务从TRY方法前，Compensable拦截，<span style="font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13px; line-height: 1.6;">PROVIDER</span><span style="line-height: 1.6;">类型，获取当前的中</span><span style="font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13px; line-height: 1.6;">transactionContext</span><span style="line-height: 1.6;">保存的事务状态，当前为TRYING状态，生成一个Transaction（类型为分支），又被TransactionContext拦截，PROVIDER</span><span style="line-height: 1.6;">类型，</span><span style="line-height: 1.6;">生一个新的TransactionXid xid，xid两个属性，参数1为食物TransactionID，参数2为UUID&nbsp;</span><span style="line-height: 1.6;">branchQualifier</span><span style="line-height: 1.6;">字符串，获取confirm方法名和cancel方法名，构建ConfirmInvocation和CancelInvocation，使用confirmInvo和CancelInvo构成Terminal，Terminal和</span><span style="line-height: 1.6;">xid构成一个Participant放到Transaction中。开始执行TRY方法</span></div><div><span style="line-height: 1.6;">4.&nbsp;</span>又开始积分的消费方法，完了后，主中一个Transaction，里包含3个Participant。Transaction的状态为TRYING，积分服务和资金服务各包含一个Transaction，里包含1个Participant。Transaction的状态为TRYING。</div><div>5. 如果上面3个TRY任意有失败，或者成功</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">private</span><span class="pln"> </span><span class="typ">Object</span><span class="pln"> rootMethodProceed</span><span class="pun">(</span><span class="typ">ProceedingJoinPoint</span><span class="pln"> pjp</span><span class="pun">)</span><span class="pln"> throws </span><span class="typ">Throwable</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">    logger</span><span class="pun">.</span><span class="pln">debug</span><span class="pun">(</span><span class="str">"==&gt;rootMethodProceed"</span><span class="pun">);</span></code></li><li class="L2"><code class="language-c"><span class="pln">    transactionConfigurator</span><span class="pun">.</span><span class="pln">getTransactionManager</span><span class="pun">().</span><span class="pln">begin</span><span class="pun">();</span><span class="pln"> </span><span class="com">// 事务开始（创建事务日志记录，并在当前线程缓存该事务日志记录）</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="typ">Object</span><span class="pln"> returnValue </span><span class="pun">=</span><span class="pln"> null</span><span class="pun">;</span><span class="pln"> </span><span class="com">// 返回值</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-c"><span class="pln">        </span></code></li><li class="L6"><code class="language-c"><span class="pln">        logger</span><span class="pun">.</span><span class="pln">debug</span><span class="pun">(</span><span class="str">"==&gt;rootMethodProceed try begin"</span><span class="pun">);</span></code></li><li class="L7"><code class="language-c"><span class="pln">        returnValue </span><span class="pun">=</span><span class="pln"> pjp</span><span class="pun">.</span><span class="pln">proceed</span><span class="pun">();</span><span class="pln">  </span><span class="com">// Try (开始执行被拦截的方法)</span></code></li><li class="L8"><code class="language-c"><span class="pln">        logger</span><span class="pun">.</span><span class="pln">debug</span><span class="pun">(</span><span class="str">"==&gt;rootMethodProceed try end"</span><span class="pun">);</span></code></li><li class="L9"><code class="language-c"><span class="pln">        </span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">OptimisticLockException</span><span class="pln"> e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">        logger</span><span class="pun">.</span><span class="pln">warn</span><span class="pun">(</span><span class="str">"==&gt;compensable transaction trying exception."</span><span class="pun">,</span><span class="pln"> e</span><span class="pun">);</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="kwd">throw</span><span class="pln"> e</span><span class="pun">;</span><span class="pln"> </span><span class="com">//do not rollback, waiting for recovery job</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Throwable</span><span class="pln"> tryingException</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-c"><span class="pln">        logger</span><span class="pun">.</span><span class="pln">warn</span><span class="pun">(</span><span class="str">"compensable transaction trying failed."</span><span class="pun">,</span><span class="pln"> tryingException</span><span class="pun">);</span></code></li><li class="L5"><code class="language-c"><span class="pln">        transactionConfigurator</span><span class="pun">.</span><span class="pln">getTransactionManager</span><span class="pun">().</span><span class="pln">rollback</span><span class="pun">();</span></code></li><li class="L6"><code class="language-c"><span class="pln">        </span><span class="kwd">throw</span><span class="pln"> tryingException</span><span class="pun">;</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L8"><code class="language-c"><span class="pln">    logger</span><span class="pun">.</span><span class="pln">info</span><span class="pun">(</span><span class="str">"===&gt;rootMethodProceed begin commit()"</span><span class="pun">);</span></code></li><li class="L9"><code class="language-c"><span class="pln">    transactionConfigurator</span><span class="pun">.</span><span class="pln">getTransactionManager</span><span class="pun">().</span><span class="pln">commit</span><span class="pun">();</span><span class="pln"> </span><span class="com">// Try检验正常后提交(事务管理器在控制提交)</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> returnValue</span><span class="pun">;</span></code></li><li class="L1"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div>rollback和commit方法差不多一样。我们现在就说执行commit方法<br></div></div><div>6. 主的commit方法中</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> commit</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">    LOG</span><span class="pun">.</span><span class="pln">debug</span><span class="pun">(</span><span class="str">"==&gt;TransactionManager commit()"</span><span class="pun">);</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="typ">Transaction</span><span class="pln"> transaction </span><span class="pun">=</span><span class="pln"> getCurrentTransaction</span><span class="pun">();</span></code></li><li class="L3"><code class="language-c"><span class="pln">    transaction</span><span class="pun">.</span><span class="pln">changeStatus</span><span class="pun">(</span><span class="typ">TransactionStatus</span><span class="pun">.</span><span class="pln">CONFIRMING</span><span class="pun">);</span></code></li><li class="L4"><code class="language-c"><span class="pln">    LOG</span><span class="pun">.</span><span class="pln">debug</span><span class="pun">(</span><span class="str">"==&gt;update transaction status to CONFIRMING"</span><span class="pun">);</span></code></li><li class="L5"><code class="language-c"><span class="pln">    transactionConfigurator</span><span class="pun">.</span><span class="pln">getTransactionRepository</span><span class="pun">().</span><span class="pln">update</span><span class="pun">(</span><span class="pln">transaction</span><span class="pun">);</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-c"><span class="pln">        LOG</span><span class="pun">.</span><span class="pln">info</span><span class="pun">(</span><span class="str">"==&gt;transaction begin commit()"</span><span class="pun">);</span></code></li><li class="L8"><code class="language-c"><span class="pln">        transaction</span><span class="pun">.</span><span class="pln">commit</span><span class="pun">();</span><span class="com">//阻塞，3个Participant</span></code></li><li class="L9"><code class="language-c"><span class="pln">        transactionConfigurator</span><span class="pun">.</span><span class="pln">getTransactionRepository</span><span class="pun">().</span><span class="kwd">delete</span><span class="pun">(</span><span class="pln">transaction</span><span class="pun">);</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Throwable</span><span class="pln"> commitException</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">        LOG</span><span class="pun">.</span><span class="pln">error</span><span class="pun">(</span><span class="str">"compensable transaction confirm failed."</span><span class="pun">,</span><span class="pln"> commitException</span><span class="pun">);</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ConfirmingException</span><span class="pun">(</span><span class="pln">commitException</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L4"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div><div>修改事务Transaction状态为CONFIRMING，然后阻塞执行事务的commit。执行完commit后，才删除这个事务。</div>阻塞的过程都干了什么<br></div></div><div>7. 循环执行每个Participant的commit方法，这个方法里会动态的执行每个Confirm方法。</div><div>8. 执行主的confirm方法，如果抛出异常了，直接抛出一场，然后进上面第6步的<span class="typ">Throwable</span><span class="pln">&nbsp;commitException，如果成功了，接着第二个Participant</span></div><div><span class="pln">9.&nbsp;</span>进入资金账户的TRY方法，参数1的TransactionContext的事务类型为CONFIRMING。被Compensable拦截，PROVIDER类型，transactionContext类型为<span style="font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13px; line-height: 1.6; color: rgb(102, 14, 122); font-weight: bold; font-style: italic;">CONFIRMING</span><span style="line-height: 1.6;">，取出当前的事务Transaction，修改事务状态为CONFIRMING，然后执行</span></div><span style="line-height: 1.6;"><pre>transactionConfigurator.getTransactionManager().commit();</pre>这个执行这个事务里的所有Participant，执行真正的confirm方法，</span><br></div><div style="font-family: &quot;Helvetica Neue&quot;;"><span style="line-height: 1.6;">10.&nbsp;<div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> commit</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">    LOG</span><span class="pun">.</span><span class="pln">debug</span><span class="pun">(</span><span class="str">"==&gt;TransactionManager commit()"</span><span class="pun">);</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="typ">Transaction</span><span class="pln"> transaction </span><span class="pun">=</span><span class="pln"> getCurrentTransaction</span><span class="pun">();</span></code></li><li class="L3"><code class="language-c"><span class="pln">    transaction</span><span class="pun">.</span><span class="pln">changeStatus</span><span class="pun">(</span><span class="typ">TransactionStatus</span><span class="pun">.</span><span class="pln">CONFIRMING</span><span class="pun">);</span></code></li><li class="L4"><code class="language-c"><span class="pln">    LOG</span><span class="pun">.</span><span class="pln">debug</span><span class="pun">(</span><span class="str">"==&gt;update transaction status to CONFIRMING"</span><span class="pun">);</span></code></li><li class="L5"><code class="language-c"><span class="pln">    transactionConfigurator</span><span class="pun">.</span><span class="pln">getTransactionRepository</span><span class="pun">().</span><span class="pln">update</span><span class="pun">(</span><span class="pln">transaction</span><span class="pun">);</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-c"><span class="pln">        LOG</span><span class="pun">.</span><span class="pln">info</span><span class="pun">(</span><span class="str">"==&gt;transaction begin commit()"</span><span class="pun">);</span></code></li><li class="L8"><code class="language-c"><span class="pln">        transaction</span><span class="pun">.</span><span class="pln">commit</span><span class="pun">();</span></code></li><li class="L9"><code class="language-c"><span class="pln">        transactionConfigurator</span><span class="pun">.</span><span class="pln">getTransactionRepository</span><span class="pun">().</span><span class="kwd">delete</span><span class="pun">(</span><span class="pln">transaction</span><span class="pun">);</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Throwable</span><span class="pln"> commitException</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-c"><span class="pln">        LOG</span><span class="pun">.</span><span class="pln">error</span><span class="pun">(</span><span class="str">"compensable transaction confirm failed."</span><span class="pun">,</span><span class="pln"> commitException</span><span class="pun">);</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ConfirmingException</span><span class="pun">(</span><span class="pln">commitException</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L4"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div>执行完后，删除这个Transaction<br></div><div>11. 继续积分服务，和第9步一样</div><div>12. 接着第6步的commit完后的删除这个Transaction。</div><div><br></div><div><br></div><div><br></div></span></div><div><div style="font-family: &quot;Helvetica Neue&quot;; border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>分布式配置</h2></div><div style="line-height: 24.2667px;"><font face="黑体">我们以前使用maven profile里配置，现在跨语言了，基于disconf。</font></div><div style="line-height: 24.2667px;"><span style="font-family: 黑体;">同一个上线包，无须改动配置，即可在多个环境中(RD/QA/PRODUCTION) 上线</span></div><div style="line-height: 24.2667px;"><font face="黑体">更改配置，无需重新打包或重启，即可实时生效</font></div><div style="line-height: 24.2667px;"><font face="黑体">提供web平台，统一管理 多个环境(RD/QA/PRODUCTION)、多个产品 的所有配置</font></div></div></span></w:sdt></span></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN"><div style="font-family: &quot;Helvetica Neue&quot;;"><br></div><div><div style="font-family: &quot;Helvetica Neue&quot;; border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>分布式跟踪</h2></div><div style="line-height: 24.2667px;"><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;">Zipkin 是一款开源的分布式实时数据追踪系统（Distributed Tracking System），由 Twitter 开发。其主要功能是聚集来自各个异构系统的实时监控数据，用来追踪微服务架构下的系统延时问题。</div><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;"><br></div><div><div>Zipkin 以 Trace 结构表示对一次请求的追踪，又把每个 Trace 拆分为若干个有依赖关系的 Span。在微服务架构中，一次用户请求可能会由后台若干个服务负责处理，那么每个处理请求的服务就可以理解为一个 Span（可以包括 API 服务，缓存服务，数据库服务以及报表服务等）。当然这个服务也可能继续请求其他的服务，因此 Span 是一个树形结构，以体现服务之间的调用关系。</div><div><br></div><div>Zipkin 的用户界面除了可以查看 Span 的依赖关系之外，还以瀑布图的形式显示了每个 Span 的耗时情况，可以一目了然的看到各个服务的性能状况。打开每个 Span，还有更详细的数据以键值对的形式呈现，而且这些数据可以在装备应用的时候自行添加。</div><div style="font-family: &quot;Helvetica Neue&quot;;"><br></div></div><div><div>Zipkin 主要由四部分构成：收集器、数据存储、查询以及 Web 界面。Zipkin 的收集器负责将各系统报告过来的追踪数据进行接收；而数据存储默认使用 Cassandra，也可以替换为 MySQL；查询服务用来向其他服务提供数据查询的能力，而 Web 服务是官方默认提供的一个图形用户界面。而各个异构的系统服务向 Zipkin 报告数据。</div><div><br></div><div>Brave 是用来装备 Java 程序的类库，提供了面向 Standard Servlet、Spring MVC、Http Client、JAX RS、Jersey、Resteasy 和 MySQL 、JDBC等接口的装备能力，可以通过编写简单的配置和代码，让基于这些框架构建的应用可以向 Zipkin 报告数据。同时 Brave 也提供了非常简单且标准化的接口，在以上封装无法满足要求的时候可以方便扩展与定制。</div></div><div><br></div><div>对于其他语言，都有对应的Zipkin装备插件。</div><div><div><br class="Apple-interchange-newline"><br></div><div><div style="border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>Session共享</h2></div><div style="line-height: 24.2667px;"><h3 style="line-height: 24.2667px;">Session、Cookie</h3><div><div>一、cookie机制和session机制的区别</div><div>cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案。</div><div><br></div><div>二、会话cookie和持久cookie的区别</div><div>如果不设置过期时间，当关闭浏览器窗口，cookie就消失了。这种cookie被称为会话cookie。会话cookie一般不保存在硬盘上而是保存在内存里。如果设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie依然有效直到超过设定的过期时间。</div><div>session不区分路径，同一个用户在访问一个网站期间，它的session在任何一个地方都可以获取到。而cookie中如果设置了路径参数，那么同一个网站中不同路径下的cookie互相是访问不到的。&nbsp;<br></div><div><br></div><div>三、理解session机制</div><div>session机制是一种服务器端的机制，服务器使用hash表来保存信息，hash数据，key为每一个JSESSIONID，值为map，放多组key/value。客户端每次自动发送SESSIONID给服务器，有就发，没有就不发。</div><div>1. 当程序需要为某个客户端的请求创建一个session的时候，服务器首先检查这个客户端的请求里是否已包含了一个session标识 - 称为session id，如果已包含一个session id，则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来使用；</div><div>2. 如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个 session id将被在本次响应中返回给客户端保存。服务端每次都会更新自己这个session的时间，重设过期时间。</div><div>3. 客户端保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的把这个标识符发给服务器。一般这个cookie的名字都叫JSESSIONID。比如JSESSIONID= yOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764，由于cookie可以被人为的禁止，必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器：</div><div>方法一：URL重写，就是把session id直接附加在URL路径的后面。附加方式也有两种，一种是作为URL路径的附加信息，表现形式为http://...../xxx;jsessionid= ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764，另一种是作为查询字符串附加在URL后面，表现形式为http://...../xxx?jsessionid=ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764。</div><div>方法二：表单隐藏字段。服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器。</div><div><br></div><div><br></div><div>Session共享</div></div><div>做Session共享，主要就是在传递JSESSIONID给后端服务，后端服务可以从hash表中读取session中保存的对象。</div><div><br></div></div></div></div></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN"><div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN"><div style="font-family: &quot;Helvetica Neue&quot;;"><br></div><div><div style="font-family: &quot;Helvetica Neue&quot;; border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>LVS、Nginx、Haproxy、Keepalived<br></h2></div><div style="line-height: 24.2667px;"><h3 style="line-height: 24.2667px;">计算机集群分类</h3><div style="line-height: 24.2667px;">计算机集群架构按照功能和结构一般分成以下几类：</div><div style="line-height: 24.2667px;">1）负载均衡集群（Loadbalancingclusters）简称LBC</div><div style="line-height: 24.2667px;">负载均衡运行时，一般通过一个或多个前端负载均衡器将客户访问请求分发到后端一组服务器上，从而达到整个系统的高性能和高可用性。如LVS、Haproxy、Nginx。</div><div style="line-height: 24.2667px;">2）高可用性集群（High-availabilityclusters）简称HAC</div><div style="line-height: 24.2667px;">指当集群中的任意一个节点失效的情况下，节点上的所有任务自动转移到其他正常的节点上，并且此过程不影响整个集群的运行，不影响业务的提供。<span class="Apple-tab-span" style="white-space:pre"> </span>如keepalived</div><div style="line-height: 24.2667px;">3）高性能计算集群（High-perfomanceclusters）简称HPC</div><div style="line-height: 24.2667px;">高性能计算集群采用将计算任务分配到集群的不同计算节点儿提高计算能力。</div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;">负载均衡技术有很多实现方案，如基于DNS域名轮流解析的方法、基于客户端调度访问的方法、基于应用层系统负载的调度方法，还有基于IP地址的调度方法，在这些负载调度算法中，执行效率最高的就是IP负载均衡技术。</div><div style="line-height: 24.2667px;"><br></div><h3 style="line-height: 24.2667px;">NAT/SNAT/DNAT</h3><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">NAT（Network Address Translation，网络地址转换）是将IP 数据包头中的IP 地址转换为另一个IP 地址的过程。在实际应用中，NAT 主要用于实现私有网络访问公共网络的功能。这种通过使用少量的公有IP 地址代表较多的私有IP 地址的方式，将有助于减缓可用IP地址空间的枯竭.</div><div style="line-height: 24.2667px;">DNAT Destination Network Address Translation 目的网络地址转换.</div><div style="line-height: 24.2667px;">SNAT Source Network Address Translation 源网络地址转换，其作用是将ip数据包的源地址转换成另外一个地址.</div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;">为什么要进行ip地址转换啊?我们要看一下局域网用户上公网的原理：</div><div style="line-height: 24.2667px;">内部地址要访问公网上的服务时（如web访问），内部地址会主动发起连接，由路由器或者防火墙上的网关对内部地址做个地址转换，将内部地址的私有IP转换为公网的公有IP，网关的这个地址转换称为SNAT，主要用于内部共享IP访问外部。</div><div style="line-height: 24.2667px;">当内部需要提供对外服务时（如对外发布web网站），外部地址发起主动连接，由路由器或者防火墙上的网关接收这个连接，然后将连接转换到内部，此过程是由带有公网IP的网关替代内部服务来接收外部的连接，然后在内部做地址转换，此转换称为DNAT，主要用于内部服务对外发布。</div></div></div><h3 style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;">LVS</h3><div style="line-height: 24.2667px;">LVS的IP负载均衡技术是通过ipvs内核模块来实现的，ipvs是LVS集群系统的核心软件，它的主要作用是：安装在Director Server上，同时在Director Server上虚拟出一个IP地址，用户必须通过这个虚拟的IP地址访问集群服务。这个虚拟IP一般称为LVS的VIP，即Virtual IP。访问的请求首先经过VIP到达负载调度器，然后由负载调度器从Real Server列表中选取一个服务节点响应用户的请求。当用户的请求到达负载调度器后，调度器如何将请求发送到提供服务的Real Server节点，而Real Server节点如何返回数据给用户，是ipvs实现的重点技术。</div><div style="line-height: 24.2667px;">ipvs实现负载均衡机制有四种，分别是NAT、TUN、DR、以及后来经淘宝开发的FullNat。下面将详细介绍这四种机制的工作模型。<br></div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">LVS分为两个部件：ipvs和ipvsadm</div><div style="line-height: 24.2667px;">ipvsadm是给用户使用的工具，有它给在内核工作的ipvs分配策略。</div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;">Director Server在收到客户端请求时，会基于调度算法从Real Server中选择一个响应客户机的请求。10种调度算法：<br></div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">1）RR &nbsp; 轮询(Round Robin)<span class="Apple-tab-span" style="white-space:pre">  </span>无需记录所有连接状态，新的连接请求被轮流分配至各RealServer；</div><div style="line-height: 24.2667px;">2）WRR &nbsp;加权轮询(Weighted RR)<span class="Apple-tab-span" style="white-space:pre"> </span>无需记录所有连接状态，通过设定一定的权重值来分配连接请求；</div><div style="line-height: 24.2667px;">3）SH &nbsp; 源地址哈希(Source Hashing)<span class="Apple-tab-span" style="white-space:pre"> </span>通过一个散列函数将去往同一个目的IP的请求映射到一台服务器或链路上；&nbsp;</div><div style="line-height: 24.2667px;">4）DH &nbsp; 目标地址哈希(Destination Hashing)<span class="Apple-tab-span" style="white-space:pre">  </span>通过一个散列函数将来自同一个源IP的请求映射到一台服务器或链路上；</div><div style="line-height: 24.2667px;">5）LC &nbsp; 最少连接数(Least Connection)<span class="Apple-tab-span" style="white-space:pre"> </span>根据当前各服务器的连接数来估计服务器的负载情况，把新的连接分配给连接数最小的服务器;</div><div style="line-height: 24.2667px;">6）WLC &nbsp; 加权最少连接数(Weighted LC)<span class="Apple-tab-span" style="white-space:pre">  </span>与LC类似，根据当前各服务器的连接数来估计服务器的负载情况，把新的连接分配给连接数最小的服务器；</div><div style="line-height: 24.2667px;">7）SED &nbsp; 最短期望延迟(Shortest Expect Delay)<span class="Apple-tab-span" style="white-space:pre"> </span>这个算法主要是优化LC的，在服务均在请求少的时候避免负载到一台服务器上做的优化；</div><div style="line-height: 24.2667px;">8）NQ &nbsp; 永不排队(Nerver Queue)<span class="Apple-tab-span" style="white-space:pre"> </span>在负载低时，请求直接分配到空闲服务器上，不会产生请求等待；当服务器都很忙时，将轮询；</div><div style="line-height: 24.2667px;">9）LBLC &nbsp; 基于本地最少连接（Locality-Based Least Connection）根据请求的目标IP地址找出该目标IP地址最近使用的RealServer，若该Real Server是可用的且没有超载，将请求发送到该服务器；若服务器不存在，或者该服务器超载且有服务器处于一半的工作负载，则用“最少链接”的原则选出一个可用的服务器，将请求发送到该服务器。</div><div style="line-height: 24.2667px;">10）LBLCR &nbsp; 带复制的基于本地最少连接(Replicated and Locality-Based Least Connection)<span class="Apple-tab-span" style="white-space:pre"> </span>根据请求的目标IP地址找出该目标IP地址对应的服务器组，按“最小连接”原则从服务器组中选出一台服务器，若服务器没有超载，将请求发送到该服务器；若服务器超载，则按“最小连接”原则从这个集群中选出一台服务器，将该服务器加入到服务器组中，将请求发送到该服务器。</div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;">ipvs有如下4种工作模式：</div><div style="line-height: 24.2667px;"><b>1 NAT</b></div><div style="line-height: 24.2667px;"><span style="color: rgb(85, 85, 85); font-family: &quot;Microsoft YaHei&quot;, 微软雅黑, Arial, &quot;Open Sans&quot;, SimSun, sans-serif; font-size: 16px;">修改请求报文的目标IP,相当于多目标IP的DNAT</span><br></div><div style="line-height: 24.2667px;">DR只需要将VIP配置到DR上，它的工作机制是，将收到的集群服务请求报文目标IP地址转换成经调度算法计算得出的后端主机IP地址，然后后端主机将响应报文发送至DR，再由DR将源地址转换成VIP的地址。</div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;">流程：</div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">client-ip =&gt; direct-ip &nbsp; &nbsp;80</div><div style="line-height: 24.2667px;">client-ip =&gt; real-ip &nbsp; &nbsp;9000 &nbsp; &nbsp;DNAT</div><div style="line-height: 24.2667px;">client-ip =&gt; real-ip &nbsp; &nbsp;9000<br></div><div style="line-height: 24.2667px;">direct-ip =&gt; client-ip &nbsp; &nbsp;80 &nbsp; &nbsp;SNAT</div><div style="line-height: 24.2667px;">原理简述：<br></div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">1)客户端请求数据，目标IP为VIP</div><div style="line-height: 24.2667px;">2)请求数据到达LB服务器，LB根据调度算法将目的地址修改为RIP地址及对应端口（此RIP地址是根据调度算法得出的。）并在连接HASH表中记录下这个连接。</div><div style="line-height: 24.2667px;">3)数据包从LB服务器到达RS服务器webserver，然后webserver进行响应。Webserver的网关必须是LB，然后将数据返回给LB服务器。</div><div style="line-height: 24.2667px;">4)收到RS的返回后的数据，根据连接HASH表修改源地址VIP&amp;目标地址CIP，及对应端口80.然后数据就从LB出发到达客户端。</div><div style="line-height: 24.2667px;">5)客户端收到的就只能看到VIP\DIP信息。</div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">NAT模式优缺点：</div><div style="line-height: 24.2667px;">1、NAT技术将请求的报文和响应的报文都需要通过LB进行地址改写，因此网站访问量比较大的时候LB负载均衡调度器有比较大的瓶颈，一般要求最多之能10-20台节点；</div><div style="line-height: 24.2667px;">2、只需要在LB上配置一个公网IP地址就可以了；</div><div style="line-height: 24.2667px;">3、每台内部的节点服务器的网关地址必须是调度器LB的内网地址，RIP和DIP必须在同一网段内；</div><div style="line-height: 24.2667px;">4、NAT模式支持对IP地址和端口进行转换。即用户请求的端口和真实服务器的端口可以不一致。</div><div style="line-height: 24.2667px;">5、效率低</div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;"><b>2 DR</b></div><div style="line-height: 24.2667px;"><span style="color: rgb(85, 85, 85); font-family: &quot;Microsoft YaHei&quot;, 微软雅黑, Arial, &quot;Open Sans&quot;, SimSun, sans-serif; font-size: 16px;">操纵封装新的MAC地址（默认）</span><br></div><div style="line-height: 24.2667px;">client向目标vip发出请求，Director Server接收，LVS根据负载均衡算法选择一台Real Server，将IP数据包中的目标mac地址改为Real Server的地址，发送到局域网（IP数据包封装到以太网，送到局域网，先ARP广播活得目标IP，重新封包），Real Server收到这个帧，发现目标IP与它匹配，处理报文，随后重新封装报文，目标IP为client，源IP为它自己Real Server。</div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;"><br class="Apple-interchange-newline">流程：</div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;"></div><div style="line-height: 24.2667px;"></div><div style="line-height: 24.2667px;">direct-mac + client-ip =&gt; direct-ip &nbsp; &nbsp;80</div><div style="line-height: 24.2667px;">direct-mac =&gt; real-mac &nbsp; &nbsp;修改mac</div><div style="line-height: 24.2667px;">real-mac + client-ip =&gt; direct-ip &nbsp; &nbsp;80</div><div style="line-height: 24.2667px;">real-ip =&gt; client-ip</div><div style="line-height: 24.2667px;">原理简述：<br></div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;"></div><div style="line-height: 24.2667px;"></div><div style="line-height: 24.2667px;">在DR模式中，调度器根据各个真实服务器的负载情况，连接数多少等，动态地选择一台服务器，不修改目标IP地址和目标端口，也不封装IP报文，而是将请求报文的数据帧的目标MAC地址改为真实服务器的MAC地址。然后再将修改的数据帧在服务器组的局域网上发送。因为数据帧的MAC地址是真实服务器的MAC地址，并且又在同一个局域网。那么根据局域网的通讯原理，真实复位是一定能够收到由LB发出的数据包。真实服务器接收到请求数据包的时候，解开IP包头查看到的目标IP是VIP。（此时只有自己的IP符合目标IP才会接收进来，所以我们需要在本地的回环接口上面配置VIP。另：由于网络接口都会进行ARP广播响应，但集群的其他机器都有这个VIP的lo接口，都响应就会冲突。所以我们需要把真实服务器的lo接口的ARP响应关闭掉。）然后真实服务器做成请求响应，之后根据自己的路由信息将这个响应数据包发送回给客户，并且源IP地址还是VIP。<br></div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">DR模式优缺点：</div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">1、通过在调度器LB上修改数据包的目的MAC地址实现转发。注意源地址仍然是CIP，目的地址仍然是VIP地址。</div><div style="line-height: 24.2667px;">2、请求的报文经过调度器，而RS响应处理后的报文无需经过调度器LB，因此并发访问量大时使用效率很高（和NAT模式比）</div><div style="line-height: 24.2667px;">3、因为DR模式是通过MAC地址改写机制实现转发，因此所有RS节点和调度器LB只能在一个局域网里面</div><div style="line-height: 24.2667px;">4、RS主机需要绑定VIP地址在LO接口上，并且需要配置ARP抑制。</div><div style="line-height: 24.2667px;">5、RS节点的默认网关不需要配置成LB，而是直接配置为上级路由的网关，能让RS直接出网就可以。</div><div style="line-height: 24.2667px;">6、由于DR模式的调度器仅做MAC地址的改写，所以调度器LB就不能改写目标端口，那么RS服务器就得使用和VIP相同的端口提供服务。</div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">7、RS跟DR要在同一物理网络内（不能由路由器分隔）；</div><div style="line-height: 24.2667px;">8、请求报文经过DR，但响应报文一定不经过DR</div><div style="line-height: 24.2667px;">9、不支持端口映射；</div><div style="line-height: 24.2667px;">10、性能最高，但不能跨域LAN</div><div style="line-height: 24.2667px;"><br></div></div></div><div style="line-height: 24.2667px;"></div></div></div></div></div></div></div></div></div><div style="line-height: 24.2667px;"><b>3 TUN</b></div><div style="line-height: 24.2667px;"><span style="color: rgb(85, 85, 85); font-family: &quot;Microsoft YaHei&quot;, 微软雅黑, Arial, &quot;Open Sans&quot;, SimSun, sans-serif; font-size: 16px;">在原请求IP报文之外新加一个IP首部，ip隧道</span><br></div><div style="line-height: 24.2667px;">在数据包必须传递到另一个网络或因特网上时，可以使用ip隧道，ip隧道能够将数据包从一个子网或虚拟局域网（VLAN）转发到另一个子网或虚拟局域网（VLAN）。<br></div><div style="line-height: 24.2667px;">TUN转发方法允许你将集群节点放在与Director不同的网络上。<br></div><div style="line-height: 24.2667px;">DR是直接在数据包中直接添加IP首部（源IP:DR和目标IP:RS），这样就是隧道技术。</div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;"><br class="Apple-interchange-newline">流程：</div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;"></div><div style="line-height: 24.2667px;"></div><div style="line-height: 24.2667px;">client-ip =&gt; direct-ip &nbsp; &nbsp;80</div><div style="line-height: 24.2667px;"></div><div style="line-height: 24.2667px;">ip-tunnel client-ip =&gt; direct-ip</div><div style="line-height: 24.2667px;">real-ip =&gt; client-ip</div><div style="line-height: 24.2667px;">原理简述：<br></div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;"></div><div style="line-height: 24.2667px;"></div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">1)客户请求数据包，目标地址VIP发送到LB上。</div><div style="line-height: 24.2667px;">2)LB接收到客户请求包，进行IP Tunnel封装。即在原有的包头加上IP Tunnel的包头。然后发送出去。</div><div style="line-height: 24.2667px;">3RS节点服务器根据IP Tunnel包头信息（一种逻辑上的隐形隧道，只有LB和RS之间懂）收到请求包，然后解开IP Tunnel包头信息，得到客户的请求包并进行响应处理。</div><div style="line-height: 24.2667px;">4响应处理完毕之后，RS服务器使用自己的出公网的线路，将这个响应数据包发送给客户端。源IP地址还是VIP地址。</div></div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">tun模式优缺点：</div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;"></div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;"></div><div><div style="line-height: 24.2667px;">1、RIP、DIP、VIP都得是公网地址；</div><div style="line-height: 24.2667px;">2、RS的网关不会指向也不可能指向DIP；</div><div style="line-height: 24.2667px;">3、请求报文经过DR，但响应报文一定不经过DR；</div><div style="line-height: 24.2667px;">4、不支持端口映射；</div><div style="line-height: 24.2667px;">5、RS的OS必须得支持隧道功能；</div></div><div style="line-height: 24.2667px;">6、需要隧道支持</div><div style="line-height: 24.2667px;"><br></div></div></div></div></div></div></div><div style="line-height: 24.2667px;"><b>4 Fullnat</b></div></div><div style="line-height: 24.2667px;"><span style="color: rgb(85, 85, 85); font-family: &quot;Microsoft YaHei&quot;, 微软雅黑, Arial, &quot;Open Sans&quot;, SimSun, sans-serif; font-size: 16px;">同时修改请求报文的源和目标IP</span><br></div><div style="line-height: 24.2667px;">Fullnat是淘宝开源的一种lvs转发模式，主要思想：引入local address（内网ip地址），cip-vip转换为lip-&gt;rip，而 lip和rip均为IDC内网ip，可以跨vlan通讯，这刚好符合我们的需求，因为我们的内网是划分了vlan的。<br></div><div style="line-height: 24.2667px;">FULLNAT模式要重编LVS机器内核。</div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">client-ip =&gt; direct-ip &nbsp; &nbsp;80</div><div style="line-height: 24.2667px;">lvs local-ip =&gt; real-ip &nbsp; &nbsp;SNAT + DNAT</div><div style="line-height: 24.2667px;">real-ip =&gt;lvs local-ip</div><div style="line-height: 24.2667px;">direct-ip =&gt; client-ip &nbsp; &nbsp;SNAT + DNAT &nbsp;</div></div></div><h3 style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;">Nginx</h3><div style="line-height: 24.2667px;"><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;">NGINX以高性能的负载均衡器，缓存，和web服务器闻名，相较于Apache、lighttpd具有占有内存少，稳定性高等优势。nginx不采用每客户机一线程的设计模型，而是充分使用异步逻辑，削减了上下文调度开销，所以并发服务能力更强。整体采用模块化设计，有丰富的模块库和第三方模块库，配置灵活。 在Linux操作系统下，nginx使用epoll事件模型，得益于此，nginx在linux操作系统下效率相当高。</div><h4 style="line-height: 24.2667px;">Nginx内核</h4><div style="line-height: 24.2667px;">Nginx由内核和模块组成，其中，内核的设计简洁，完成的工作也非常简单，仅仅通过查找配置文件将客户端请求映射到一个location block（location是Nginx配置中的一个指令，用于URL匹配），而在这个location中所配置的每个指令将会启动不同的模块去完成相应的工作。<br></div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">Nginx的模块从结构上分为核心模块、基础模块和第三方模块：</div><div style="line-height: 24.2667px;"><ul><li>核心模块：HTTP模块、EVENT模块和MAIL模块</li><li>基础模块：HTTP Access模块、HTTP FastCGI模块、HTTP Proxy模块和HTTP Rewrite模块，</li><li>第三方模块：HTTP Upstream Request Hash模块、Notice模块和HTTP Access Key模块。</li></ul>用户根据自己的需要开发的模块都属于第三方模块。正是有了这么多模块的支撑，Nginx的功能才会如此强大。<br></div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;">Nginx的模块直接被编译进Nginx，因此属于静态编译方式。启动Nginx后，Nginx的模块被自动加载，不像Apache，首先将模块编译为一个so文件，然后在配置文件中指定是否进行加载。在解析配置文件时，Nginx的每个模块都有可能去处理某个请求，但是同一个处理请求只能由一个模块来完成。&nbsp;<br></div><div style="line-height: 24.2667px;"><br></div><h4 style="line-height: 24.2667px;">Nginx的进程模型</h4><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">在工作方式上，Nginx分为单工作进程和多工作进程两种模式。</div><div style="line-height: 24.2667px;"><ul><li>在单工作进程模式下，除主进程外，还有一个工作进程，工作进程是单线程的；</li><li>在多工作进程模式下，每个工作进程包含多个线程。</li></ul>Nginx默认为单工作进程模式。<br></div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;">Nginx在启动后，会有一个master进程和多个worker进程。</div><div style="line-height: 24.2667px;"><ul><li>master进程，主要用来管理worker进程，包含：接收来自外界的信号，向各worker进程发送信号，监控worker进程的运行状态，当worker进程退出后(异常情况下)，会自动重新启动新的worker进程。我们要控制nginx，只需要通过kill向master进程发送信号就行了。</li><li>worker进程，都会被master fork创建出来的，基本的网络事件，则是放在worker进程中来处理了。多个worker进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的。一个请求，只可能在一个worker进程中处理，一个worker进程。worker进程的个数是可以设置的，一般我们会设置与机器cpu核数一致。</li></ul>这里面的原因与nginx的进程模型以及事件处理模型是分不开的。在master里面，先建立需要listen的socket（listenfd），然后再fork出多个worker进程。当用户请求nginx服务的时候，每个worker的listenfd变的可读，并且这些worker会抢一个叫accept_mutex的东西，accept_mutex是互斥的，一个worker得到了，其他的worker就歇菜了。而抢到这个accept_mutex的worker就开始“读取请求--解析请求--处理请求”，数据彻底返回客户端之后（目标网页出现在电脑屏幕上），这个事件就算彻底结束。<br></div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">nginx底下的worker进程抢注用户的要求，同时搭配“异步非阻塞”的方式，实现高并发量。</div><div style="line-height: 24.2667px;">在nginx根部设置异步非阻塞</div><div style="line-height: 24.2667px;"><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="com">#工作模式及每个进程连接数上限      </span></code></li><li class="L1"><code class="language-c"><span class="pln">events </span><span class="pun">{</span><span class="pln">      </span></code></li><li class="L2"><code class="language-c"><span class="pln">    use epoll</span><span class="pun">;</span><span class="pln">      </span></code></li><li class="L3"><code class="language-c"><span class="pln">    worker_connections </span><span class="lit">1024</span><span class="pun">;</span><span class="pln">     </span><span class="com">#所以nginx支持的总连接数就等于worker_processes * worker_connections    </span></code></li><li class="L4"><code class="language-c"><span class="pun">}</span><span class="pln"> </span></code></li></ol></pre></div><div>常见配置：</div></div></div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">1. 编写一个Nginx的access模块，要求准许192.168.3.29/24的机器访问，准许10.1.20.6/16这个网段的所有机器访问，准许34.26.157.0/24这个网段访问,除此之外的机器不准许访问。</div><div style="line-height: 24.2667px;">location/{</div><div style="line-height: 24.2667px;">access 192.168.3.29/24;</div><div style="line-height: 24.2667px;">access 10.1.20.6/16;</div><div style="line-height: 24.2667px;">access 34.26.157.0/24;</div><div style="line-height: 24.2667px;">deny all;</div><div style="line-height: 24.2667px;">}</div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">2. Nginx实现多Tomcat负载均衡</div><div style="line-height: 24.2667px;">Tomcat服务</div><div style="line-height: 24.2667px;">192.168.1.177:8001</div><div style="line-height: 24.2667px;">192.168.1.177:8002</div><div style="line-height: 24.2667px;">192.168.1.177:8003</div><div style="line-height: 24.2667px;">Nginx配置</div><div style="line-height: 24.2667px;">upstream mytomcats {&nbsp;</div><div style="line-height: 24.2667px;">server 192.168.1.177:8001;&nbsp;</div><div style="line-height: 24.2667px;">server 192.168.1.177:8002;&nbsp;</div><div style="line-height: 24.2667px;">server 192.168.1.177:8003;&nbsp;</div><div style="line-height: 24.2667px;">}</div><div style="line-height: 24.2667px;">server {&nbsp;</div><div style="line-height: 24.2667px;">listen 80;&nbsp;</div><div style="line-height: 24.2667px;">server_name www.iu14.com;</div><div style="line-height: 24.2667px;">location ~* \.(jpg|gif|png|swf|flv|wma|wmv|asf|mp3|mmf|zip|rar)$ {&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; root /web/www/html/;&nbsp;</div><div style="line-height: 24.2667px;">}&nbsp;</div><div style="line-height: 24.2667px;">location / {&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; proxy_pass http://mytomcats;&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; proxy_redirect off;&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; proxy_set_header Host $host;&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; proxy_set_header X-Real-IP $remote_addr;&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; client_max_body_size 10m;&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; client_body_buffer_size 128k;&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; proxy_connect_timeout 90;&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; proxy_send_timeout 90;&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; proxy_read_timeout 90;&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; proxy_buffer_size 4k;&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; proxy_buffers 4 32k;&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; proxy_busy_buffers_size 64k;&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; proxy_temp_file_write_size 64k;</div><div style="line-height: 24.2667px;">}</div><div style="line-height: 24.2667px;">}</div><div style="line-height: 24.2667px;">upstream指定负载均衡组，指定其Tomcat成员</div><div style="line-height: 24.2667px;">location ~* \.(jpg|gif|……实现了静态资源分离。ps：在location指令使用正则表达式后再用alias指令，Nginx是不支持的。</div><div style="line-height: 24.2667px;">3. Nginx实现静态资源分离</div><div style="line-height: 24.2667px;">Tomcat服务</div><div style="line-height: 24.2667px;">192.168.1.177:8000</div><div style="line-height: 24.2667px;">Nginx配置</div><div style="line-height: 24.2667px;">server {&nbsp;</div><div style="line-height: 24.2667px;">listen 80;&nbsp;</div><div style="line-height: 24.2667px;">server_name www.iu14.com;&nbsp;</div><div style="line-height: 24.2667px;">root /web/www/html;</div><div style="line-height: 24.2667px;">location /img/ {&nbsp;</div><div style="line-height: 24.2667px;">alias /web/www/html/img/;&nbsp;</div><div style="line-height: 24.2667px;">}</div><div style="line-height: 24.2667px;">location ~ (\.jsp)|(\.do)$ {&nbsp;</div><div style="line-height: 24.2667px;">proxy_pass http://192.168.1.177:8000;&nbsp;</div><div style="line-height: 24.2667px;">proxy_redirect off;&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; proxy_set_header Host $host;&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; proxy_set_header X-Real-IP $remote_addr;&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; client_max_body_size 10m;&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; client_body_buffer_size 128k;&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; proxy_connect_timeout 90;&nbsp;</div><div style="line-height: 24.2667px;">proxy_send_timeout 90;&nbsp;</div><div style="line-height: 24.2667px;">proxy_read_timeout 90;&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; proxy_buffer_size 4k;&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; proxy_buffers 4 32k;&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; proxy_busy_buffers_size 64k;&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp; &nbsp; &nbsp; proxy_temp_file_write_size 64k;&nbsp;</div><div style="line-height: 24.2667px;">} &nbsp;</div><div style="line-height: 24.2667px;">}</div><div style="line-height: 24.2667px;">第一个location指令将/web/www/html/img/目录下的静态文件交给Nginx来完成。最后一个location指令将所有以.jsp、.do结尾的文件都交给Tomcat服务器的8080端口来处理。</div></div></div></div></div></div><h3 style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;">haproxy</h3></div><div style="font-family: &quot;Helvetica Neue&quot;;"></div></span></w:sdt></span></div></div><div style="font-family: &quot;Helvetica Neue&quot;;"></div></span></w:sdt></span></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN"><div>LVS是基于Linux ipvs实现的一种软负载，HAProxy是开源的并且基于第三应用实现的软负载。HAProxy相比LVS的使用要简单很多，功能也丰富。当 前，HAProxy支持两种主要的代理模式:四层的TCP和七层HTTP。在4层模式下，HAProxy仅在客户端和服务器之间转发双向流量。7层模式下，HAProxy会分析协议，并且能通过允许、拒绝、交换、增加、修改或者删除请求 (request)或者回应(response)里指定内容来控制协议，这种操作要基于特定规则。<br></div><div>HAProxy主要功能就是负载均衡，负载均衡算法支持很多，支持健康检查，支持各种会话保持方式，支持远程信息获取等。<br></div><div>HAProxy可以作为MySQL、邮件或其它的非web的负载均衡，我们常用于它作为mysql(读)负载均衡；<br></div><div>HAProxy的负载均衡能力虽不如LVS，但也是相当不错，但提供了七层工作，LVS没有。<br></div><div><div><img border="0" src="All in_files/62552014.png"></div></div><h3 style="font-family: &quot;Helvetica Neue&quot;;">LVS、Nginx、Haproxy对比</h3><div style="font-family: &quot;Helvetica Neue&quot;;">Nginx优点：</div><div style="font-family: &quot;Helvetica Neue&quot;;"><div>1、工作在网络的7层之上，可以针对http应用做一些分流的策略，比如针对域名、目录结构，它的正则规则比HAProxy更为强大和灵活，这也是它目前广泛流行的主要原因之一。</div><div>2、Nginx对网络稳定性的依赖非常小，理论上能ping通就就能进行负载功能，这个也是它的优势之一；相反LVS对网络稳定性依赖比较大，这点本人深有体会；</div><div>3、Nginx安装和配置比较简单，测试起来比较方便，它基本能把错误用日志打印出来。LVS的配置、测试就要花比较长的时间了，LVS对网络依赖比较大。</div><div>3、可以承担高负载压力且稳定，负载度比LVS相对小些。</div><div>4、Nginx可以通过端口检测到服务器内部的故障，比如根据服务器处理网页返回的状态码、超时等等，并且会把返回错误的请求重新提交到另一个节点，不过其中缺点就是不支持url来检测。比如用户正在上传一个文件，而处理该上传的节点刚好在上传过程中出现故障，Nginx会把上传切到另一台服务器重新处理，而LVS就直接断掉了，如果是上传一个很大的文件或者很重要的文件的话，用户可能会因此而不满。</div><div>5、Nginx不仅仅是一款负载均衡器/反向代理软件，它同时也是功能强大的Web应用服务器。</div><div>6、Nginx现在作为Web反向加速缓存越来越成熟了，速度比传统的Squid服务器更快。</div><div>7、Nginx也可作为静态网页和图片服务器，这方面的性能也无对手。还有Nginx第三方模块也很多。</div></div><div style="font-family: &quot;Helvetica Neue&quot;;">Nginx缺点：</div><div style="font-family: &quot;Helvetica Neue&quot;;"><div>1、Nginx仅能支持http、https和Email协议，这个是它的缺点。</div><div>2、对后端服务器的健康检查，只支持通过端口来检测，不支持通过url来检测。</div><div>3、不支持Session的直接保持，但能通过ip_hash来解决。</div><div><br></div></div><div style="font-family: &quot;Helvetica Neue&quot;;">LVS优点：</div><div style="font-family: &quot;Helvetica Neue&quot;;"><div>1、抗负载能力强、是工作在网络4层之上仅作分发之用，没有流量的产生，这个特点也决定了它在负载均衡软件里的性能最强的，对内存和cpu资源消耗比较低。</div><div>2、配置性比较低，这是一个缺点也是一个优点。</div><div>3、工作稳定，因为其本身抗负载能力很强，自身有完整的双机热备方案，如LVS+Keepalived，不过我们在项目实施中用得最多的还是LVS/DR+Keepalived。</div><div>4、无流量，LVS只分发请求，而流量并不从它本身出去。</div></div><div style="font-family: &quot;Helvetica Neue&quot;;">LVS缺点：</div><div style="font-family: &quot;Helvetica Neue&quot;;"><div>1、不支持正则表达式处理，不能做动静分离；而现在许多网站在这方面都有较强的需求，这个是Nginx/HAProxy+Keepalived的优势所在。</div><div><br></div></div><div style="font-family: &quot;Helvetica Neue&quot;;">Haproxy优点：&nbsp;</div><div style="font-family: &quot;Helvetica Neue&quot;;"><div>1、HAProxy的优点能够补充Nginx的一些缺点，比如支持Session的保持，Cookie的引导；同时支持通过获取指定的url来检测后端服务器的状态。</div><div>3、HAProxy跟LVS类似，本身就只是一款负载均衡软件；单纯从效率上来讲HAProxy会比Nginx有更出色的负载均衡速度，在并发处理上也是优于Nginx的。</div><div>4、HAProxy支持TCP协议的负载均衡转发，可以对MySQL读进行负载均衡，对后端的MySQL节点进行检测和负载均衡，可以用LVS+Keepalived对MySQL主从做负载均衡。</div></div><div style="font-family: &quot;Helvetica Neue&quot;;">Haproxy缺点：</div><div><div>haproxy上扩展性很差，添加新功能很费劲<br></div><div><br></div><h3>四层和七层负载均衡区别</h3><div>二层负载均衡会通过一个虚拟MAC地址接收请求，然后再分配到真实的MAC地址；</div><div>三层负载均衡会通过一个虚拟IP地址接收请求，然后再分配到真实的IP地址；</div><div>四层通过虚拟IP+端口接收请求，然后再分配到真实的服务器；</div><div>七层通过虚拟的URL或主机名接收请求，然后再分配到真实的服务器。<br></div><div><br></div><div>负载均衡器通常称为四层交换机或七层交换机。四层交换机主要分析IP层及TCP/UDP层，实现四层流量负载均衡。七层交换机除了支持四层负载均衡以外，还有分析应用层的信息，如HTTP协议URI或Cookie信息。</div><div><br></div><div><div>负载均衡分为L4 switch（四层交换），即在OSI第4层工作，就是TCP层啦。此种Load Balance不理解应用协议（如HTTP/FTP/MySQL等等）。例子：LVS，F5。</div><div>另一种叫做L7 switch（七层交换），OSI的最高层，应用层。此时，该Load Balancer能理解应用协议。例子： haproxy，MySQL Proxy。</div></div><div><br></div><div><br></div><div>最终形成比较理想的基本架构为：Array/LVS — Nginx/Haproxy — Squid/Varnish — AppServer。</div><div style="font-family: &quot;Helvetica Neue&quot;;"><br></div></div><h3 style="font-family: &quot;Helvetica Neue&quot;;">Keepalived</h3><h4>VRRP协议产生</h4><div>对于局域网用户来说，能够时刻与外部网络保持联系是非常重要的。通常情况下，内部网络中的所有主机都设置一条相同的缺省路由，指向出口网关，实现主机与外部网络的通信。局域网客户端判定哪个路由器应该为其到达目标主机的下一跳网关的方式有动态及静态决策两种方式，动态决策方式如Proxy ARP，客户端使用ARP协议获取其想要到达的目标，而后，由某路由以其MAC地址响应此ARP请求；动态路由发现协议的不足之处在于它会导致在客户端引起一定的配置和处理方面的开销，并且，如果路由器故障，切换至其它路由器的过程会比较慢。解决此类问题的一个方案是为客户端静态配置默认路由设备，这大大简化了客户端的处理过程，但也会带来单点故障类的题。于是就有了VRRP协议。<br></div><div>VRRP虚拟路由冗余协议，来解决局域网主机访问外部网络的可靠性问题。VRRP可以通过在一个路由器组(一个VRRP组)之间共享一个虚拟IP(VIP)，此时仅需要客户端以VIP作为其默认网关即可。</div><div>可以认为VRRP是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组，这个组里面有一个MASTER和多个BACKUP，MASTER上有一个对外提供服务的VIP（该路由器所在局域网内其他机器的默认路由为该VIP），MASTER会发组播，当BACKUP收不到vrrp包时就认为MASTER宕掉了，这时就需要根据VRRP的优先级来选举一个BACKUP当MASTER，及时将业务切换到其它设备，从而保持通讯的连续性和可靠性，消除了静态路由配置的单点故障。VRRP协议仅适用于IPv4。<br></div><h4>VRRP协议工作原理</h4><div><div>1、一个VRRP路由器有唯一的标识：&nbsp;</div><div>VRID，范围为0-255。该路由器对外表现为唯一的虚拟MAC地址，地址的格式为00-00-5E- 00-01-[VRID]。主控路由器负责对ARP请求用该MAC地址做应答这样，无论如何切换，保证给终端设备的是唯一一致的IP和MAC地址，减少了切换对终端设备的影响。&nbsp;</div><div>2、VRRP控制报文只有一种：&nbsp;</div><div>VRRP通告它使用IP多播数据包进行封装，组地址为224.0.0.18，发布范围只限于同一局域网内。这保证了VRID在不同网络中可以重复使用。为了减少网络带宽消耗，只有主控路由器才可以周期性的发送VRRP通告报文，备份路由器在连续三个通告间隔内收不到VRRP或收到优先级为0的通告则启动新的一轮VRRP选举。&nbsp;</div><div>3、在VRRP路由器组中按优先级选举主控路由器：&nbsp;</div><div>VRRP协议中优先级范围是0-255。在主控路由器的选举中，高优先级的虚拟路由器获胜。对于相同优先级的候选路由器，则按照IP地址大小顺序选举。VRRP还提供了优先级抢占策略，如果配置了该策略，高优先级的备份路由器便会剥夺当前低优先级的主控路由器而成为新的主控路由器。&nbsp;</div><div>4、为了保证VRRP协议的安全性，提供了两种安全认证措施：&nbsp;</div><div>明文认证和IP头认证明文认证方式要求：在加入一个VRRP路由器组时，必须同时提供相同的VRID和明文密码适合于避免在局域网内的配置错误，但不能防止通过网络监听方式获得密码IP头认证的方式提供了更高的安全性，能够防止报文重放和修改等攻击。</div></div><div><br></div><div>Keepalived是基于VRRP协议实现的保证集群高可用的一个服务软件。它的主要功能是实现真机的故障隔离及负载均衡器间的失败切换FailOver，可以防止单点故障。<br></div><div>keepalived 负责为该服务器抢占 vip(虚拟 ip)，抢占到 vip 后，对该主机的访问可以通过原来的 ip访问，也可以直接通过 vip访问。<br></div><div><br></div><div>在不指定配置文件位置的状态下—keepalived默认先查找文件 /etc/keepalived/keepalived.conf&nbsp;<br></div><div><br></div><div>keepalived+nginx双击热备+负载均衡keepalive.conf<span style="color: rgb(190, 190, 197); background-color: rgb(247, 247, 249); font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13px;"></span></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">!</span><span class="pln"> </span><span class="typ">Configuration</span><span class="pln"> </span><span class="typ">File</span><span class="pln"> </span><span class="kwd">for</span><span class="pln"> keepalived  </span></code></li><li class="L1"><code class="language-c"><span class="com">#全局定义块主要配置故障发生时的通知对象以及机器标识</span></code></li><li class="L2"><code class="language-c"><span class="pln">global_defs </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L3"><code class="language-c"><span class="pln">   notification_email </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L4"><code class="language-c"><span class="pln">     </span><span class="com">#acassen@firewall.loc  </span></code></li><li class="L5"><code class="language-c"><span class="pln">     </span><span class="com">#failover@firewall.loc  </span></code></li><li class="L6"><code class="language-c"><span class="pln">     </span><span class="com">#sysadmin@firewall.loc  </span></code></li><li class="L7"><code class="language-c"><span class="pln">   </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L8"><code class="language-c"><span class="pln">   </span><span class="com">#notification_email_from Alexandre.Cassen@firewall.loc  </span></code></li><li class="L9"><code class="language-c"><span class="pln">   </span><span class="com">#smtp_server 192.168.200.1  </span></code></li><li class="L0"><code class="language-c"><span class="pln">   </span><span class="com">#smtp_connect_timeout 30  </span></code></li><li class="L1"><code class="language-c"><span class="pln">   router_id LVS_DEVEL  </span><span class="com">#标识本节点的字条串，故障发生时，邮件通知会用到</span></code></li><li class="L2"><code class="language-c"><span class="pun">}</span><span class="pln">  </span></code></li><li class="L3"><code class="language-c"><span class="com">#vrrp_script区域主要用来做健康检查的，当时检查失败时会将vrrp_instance的priority减少相应的值。</span></code></li><li class="L4"><code class="language-c"><span class="pln">vrrp_script chk_http_port </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L5"><code class="language-c"><span class="pln">    script </span><span class="str">"&lt;/dev/tcp/127.0.0.1/8088"</span><span class="pln">  </span></code></li><li class="L6"><code class="language-c"><span class="pln">    interval </span><span class="lit">1</span><span class="pln">  </span></code></li><li class="L7"><code class="language-c"><span class="pln">    weight </span><span class="pun">-</span><span class="lit">2</span><span class="pln">  </span></code></li><li class="L8"><code class="language-c"><span class="pun">}</span><span class="pln">  </span></code></li><li class="L9"><code class="language-c"><span class="com">#VRRP实例定义块主要用来定义对外提供服务的VIP区域及其相关属性</span></code></li><li class="L0"><code class="language-c"><span class="pln">vrrp_instance VI_1 </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L1"><code class="language-c"><span class="pln">    state MASTER  </span><span class="com">#可以是MASTER或BACKUP，不过当其他节点keepalived启动时会将priority比较大的节点选举为MASTER</span></code></li><li class="L2"><code class="language-c"><span class="pln">    interface eth2  </span><span class="com">#对外提供服务的网络接口，用来发VRRP包</span></code></li><li class="L3"><code class="language-c"><span class="pln">    virtual_router_id </span><span class="lit">51</span><span class="pln">  </span><span class="com"># 取值在0-255之间，用来区分多个instance的VRRP组播， 同一网段中该值不能重复，并且同一个vrrp实例使用唯一的标识</span></code></li><li class="L4"><code class="language-c"><span class="pln">    priority </span><span class="lit">100</span><span class="pln">  </span><span class="com">#用来选举master的，要成为master，那么这个选项的值最好高于其他机器50个点，该项取值范围是1-255（在此范围之外会被识别成默认值100）</span></code></li><li class="L5"><code class="language-c"><span class="pln">    advert_int </span><span class="lit">1</span><span class="pln">  </span><span class="com">#发VRRP包的时间间隔，即多久进行一次master选举，可以认为是健康查检时间间隔，单位为秒</span></code></li><li class="L6"><code class="language-c"><span class="pln">    authentication </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L7"><code class="language-c"><span class="pln">        auth_type PASS  </span></code></li><li class="L8"><code class="language-c"><span class="pln">        auth_pass </span><span class="lit">1111</span><span class="pln">  </span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L0"><code class="language-c"><span class="pln">    virtual_ipaddress </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L1"><code class="language-c"><span class="pln">        </span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">232.16</span><span class="pln">  </span><span class="com">#可以有多个VIP地址，每个地址占一行，不需要指定子网掩码，必须与RealServer上设定的VIP相一致</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L3"><code class="language-c"><span class="pln">    track_script </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L4"><code class="language-c"><span class="pln">        chk_http_port  </span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L6"><code class="language-c"><span class="pun">}</span></code></li></ol></pre></div><div>Haproxy+Keepalived负载均衡</div></div><div>keepalived.conf</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="com"># Configuration File for keepalived    </span></code></li><li class="L1"><code class="language-c"><span class="pln">  </span></code></li><li class="L2"><code class="language-c"><span class="pln">global_defs </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L3"><code class="language-c"><span class="pln">   router_id LVS_DEVEL  </span></code></li><li class="L4"><code class="language-c"><span class="pun">}</span><span class="pln">  </span></code></li><li class="L5"><code class="language-c"><span class="pln">  </span></code></li><li class="L6"><code class="language-c"><span class="pln">  </span></code></li><li class="L7"><code class="language-c"><span class="pln">vrrp_script chk_http_port </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L8"><code class="language-c"><span class="pln">     script </span><span class="str">"/etc/keepalived/checkHaproxy.sh"</span><span class="pln">  </span></code></li><li class="L9"><code class="language-c"><span class="pln">     interval </span><span class="lit">2</span><span class="pln">  </span></code></li><li class="L0"><code class="language-c"><span class="pln">     weight </span><span class="lit">2</span><span class="pln">  </span></code></li><li class="L1"><code class="language-c"><span class="pun">}</span><span class="pln">  </span></code></li><li class="L2"><code class="language-c"><span class="pln">  </span></code></li><li class="L3"><code class="language-c"><span class="pln">vrrp_instance VI_1 </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L4"><code class="language-c"><span class="pln">    state MASTER                </span><span class="com">#从keepalived这里改成BACKUP  </span></code></li><li class="L5"><code class="language-c"><span class="pln">    interface eth0  </span></code></li><li class="L6"><code class="language-c"><span class="pln">    virtual_router_id </span><span class="lit">51</span><span class="pln">  </span></code></li><li class="L7"><code class="language-c"><span class="pln">    priority </span><span class="lit">104</span><span class="pln">                </span><span class="com">#从keepalived这里改成100吧，只要从比主小就行，数字是从0~255，数字越大权重越大  </span></code></li><li class="L8"><code class="language-c"><span class="pln">    advert_int </span><span class="lit">1</span><span class="pln">  </span></code></li><li class="L9"><code class="language-c"><span class="pln">    authentication </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L0"><code class="language-c"><span class="pln">        auth_type PASS  </span></code></li><li class="L1"><code class="language-c"><span class="pln">        auth_pass </span><span class="lit">1111</span><span class="pln">  </span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L3"><code class="language-c"><span class="pln">    track_script </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L4"><code class="language-c"><span class="pln">        chk_http_port  </span></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L6"><code class="language-c"><span class="pln">    virtual_ipaddress </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L7"><code class="language-c"><span class="pln">        </span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">207.141</span><span class="pln">  </span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L9"><code class="language-c"><span class="pun">}</span><span class="pln"> </span></code></li></ol></pre></div><div>checkHaproxy.sh<br></div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="com">#!/bin/bash  </span></code></li><li class="L1"><code class="language-c"><span class="pln">A</span><span class="pun">=`</span><span class="pln">ps </span><span class="pun">-</span><span class="pln">C haproxy </span><span class="pun">--</span><span class="pln">no</span><span class="pun">-</span><span class="pln">header </span><span class="pun">|</span><span class="pln"> wc </span><span class="pun">-</span><span class="pln">l</span><span class="pun">`</span><span class="pln">  </span></code></li><li class="L2"><code class="language-c"><span class="kwd">if</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> $A </span><span class="pun">-</span><span class="pln">eq </span><span class="lit">0</span><span class="pln"> </span><span class="pun">];</span><span class="pln">then  </span></code></li><li class="L3"><code class="language-c"><span class="pln">        </span><span class="pun">/</span><span class="pln">usr</span><span class="pun">/</span><span class="pln">local</span><span class="pun">/</span><span class="pln">sbin</span><span class="pun">/</span><span class="pln">haproxy </span><span class="pun">-</span><span class="pln">f </span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">haproxy</span><span class="pun">.</span><span class="pln">cfg  </span></code></li><li class="L4"><code class="language-c"><span class="pln">        echo </span><span class="str">"Haproxy start"</span><span class="pln">  </span></code></li><li class="L5"><code class="language-c"><span class="pln">        sleep </span><span class="lit">3</span><span class="pln">  </span></code></li><li class="L6"><code class="language-c"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="pun">`</span><span class="pln">ps </span><span class="pun">-</span><span class="pln">C haproxy </span><span class="pun">--</span><span class="pln">no</span><span class="pun">-</span><span class="pln">header </span><span class="pun">|</span><span class="pln"> wc </span><span class="pun">-</span><span class="pln">l</span><span class="pun">`</span><span class="pln"> </span><span class="pun">-</span><span class="pln">eq </span><span class="lit">0</span><span class="pln"> </span><span class="pun">];</span><span class="pln">then  </span></code></li><li class="L7"><code class="language-c"><span class="pln">                </span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">init</span><span class="pun">.</span><span class="pln">d</span><span class="pun">/</span><span class="pln">keepalived stop  </span></code></li><li class="L8"><code class="language-c"><span class="pln">                echo </span><span class="str">"keepalived stop"</span><span class="pln">  </span></code></li><li class="L9"><code class="language-c"><span class="pln">        fi  </span></code></li><li class="L0"><code class="language-c"><span class="pln">fi  </span></code></li></ol></pre></div><div>LVS+Keepalived负载均衡</div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-c"><span class="pun">!</span><span class="pln"> </span><span class="typ">Configuration</span><span class="pln"> </span><span class="typ">File</span><span class="pln"> </span><span class="kwd">for</span><span class="pln"> keepalived  </span></code></li><li class="L1"><code class="language-c"><span class="pln">global_defs </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L2"><code class="language-c"><span class="pln">   notification_email </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L3"><code class="language-c"><span class="pln">         root@localhost</span><span class="pun">.</span><span class="pln">localdomain  </span></code></li><li class="L4"><code class="language-c"><span class="pln">   </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L5"><code class="language-c"><span class="pln">   notification_email_from sns</span><span class="pun">-</span><span class="pln">lvs@gmail</span><span class="pun">.</span><span class="pln">com  </span></code></li><li class="L6"><code class="language-c"><span class="pln">   smtp_server </span><span class="lit">127.0</span><span class="pun">.</span><span class="lit">0.1</span><span class="pln">  </span></code></li><li class="L7"><code class="language-c"><span class="pln">   router_id LVS_DEVEL  </span></code></li><li class="L8"><code class="language-c"><span class="pun">}</span><span class="pln">  </span></code></li><li class="L9"><code class="language-c"><span class="pln">vrrp_instance VI_1 </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L0"><code class="language-c"><span class="pln">    state MASTER                      </span><span class="com">#从keepalived要写成BACKUP  </span></code></li><li class="L1"><code class="language-c"><span class="pln">    interface eth0  </span></code></li><li class="L2"><code class="language-c"><span class="pln">    virtual_router_id </span><span class="lit">51</span><span class="pln">  </span></code></li><li class="L3"><code class="language-c"><span class="pln">    priority </span><span class="lit">100</span><span class="pln">                      </span><span class="com">#从keepalived要写成小于100的数，就写成99就可以了，范围是0~255，但是主要比从大，这样权重才会大  </span></code></li><li class="L4"><code class="language-c"><span class="pln">    advert_int </span><span class="lit">1</span><span class="pln">  </span></code></li><li class="L5"><code class="language-c"><span class="pln">    authentication </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L6"><code class="language-c"><span class="pln">        auth_type PASS  </span></code></li><li class="L7"><code class="language-c"><span class="pln">        auth_pass </span><span class="lit">1111</span><span class="pln">  </span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L9"><code class="language-c"><span class="pln">    virtual_ipaddress </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L0"><code class="language-c"><span class="pln">        </span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">207.140</span><span class="pln">  </span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L2"><code class="language-c"><span class="pun">}</span><span class="pln">  </span></code></li><li class="L3"><code class="language-c"><span class="pln">virtual_server </span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">207.140</span><span class="pln"> </span><span class="lit">80</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L4"><code class="language-c"><span class="pln">    delay_loop </span><span class="lit">6</span><span class="pln">  </span></code></li><li class="L5"><code class="language-c"><span class="pln">    lb_algo wrr  </span></code></li><li class="L6"><code class="language-c"><span class="pln">    lb_kind DR  </span></code></li><li class="L7"><code class="language-c"><span class="com">#    persistence_timeout 60             #这里就不要开启持久连接了，为了更方便的查看负载均和的效果  </span></code></li><li class="L8"><code class="language-c"><span class="pln">    protocol TCP  </span></code></li><li class="L9"><code class="language-c"><span class="pln">    real_server </span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">207.129</span><span class="pln"> </span><span class="lit">80</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L0"><code class="language-c"><span class="pln">        weight </span><span class="lit">3</span><span class="pln">  </span></code></li><li class="L1"><code class="language-c"><span class="pln">        TCP_CHECK </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L2"><code class="language-c"><span class="pln">        connect_timeout </span><span class="lit">10</span><span class="pln">  </span></code></li><li class="L3"><code class="language-c"><span class="pln">        nb_get_retry </span><span class="lit">3</span><span class="pln">  </span></code></li><li class="L4"><code class="language-c"><span class="pln">        delay_before_retry </span><span class="lit">3</span><span class="pln">  </span></code></li><li class="L5"><code class="language-c"><span class="pln">        connect_port </span><span class="lit">80</span><span class="pln">  </span></code></li><li class="L6"><code class="language-c"><span class="pln">         </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L8"><code class="language-c"><span class="pln">    real_server </span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">207.130</span><span class="pln"> </span><span class="lit">80</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L9"><code class="language-c"><span class="pln">        weight </span><span class="lit">3</span><span class="pln">  </span></code></li><li class="L0"><code class="language-c"><span class="pln">        TCP_CHECK </span><span class="pun">{</span><span class="pln">  </span></code></li><li class="L1"><code class="language-c"><span class="pln">        connect_timeout </span><span class="lit">10</span><span class="pln">  </span></code></li><li class="L2"><code class="language-c"><span class="pln">        nb_get_retry </span><span class="lit">3</span><span class="pln">  </span></code></li><li class="L3"><code class="language-c"><span class="pln">        delay_before_retry </span><span class="lit">3</span><span class="pln">  </span></code></li><li class="L4"><code class="language-c"><span class="pln">        connect_port </span><span class="lit">80</span><span class="pln">  </span></code></li><li class="L5"><code class="language-c"><span class="pln">        </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L6"><code class="language-c"><span class="pln">     </span><span class="pun">}</span><span class="pln">  </span></code></li><li class="L7"><code class="language-c"><span class="pun">}</span><span class="pln"> </span></code></li></ol></pre></div><div><br></div></div></span></w:sdt></span></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN"><div style="font-family: &quot;Helvetica Neue&quot;;"><br></div><div><div style="font-family: &quot;Helvetica Neue&quot;; border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>压测</h2></div><div style="line-height: 24.2667px;"><font face="黑体">电商压测、mysql压测不用写了，想看就看《乐视电商压力测试</font><span style="font-family: 黑体;">》和《</span><font face="黑体">1Nginx_1Mycat_5tomcat_10mysql——下单性能测试</font><span style="font-family: 黑体;">》文章。</span></div><div style="line-height: 24.2667px;"><span style="font-family: 黑体;">直接了解清楚现在leengine、matrix自身的能力和支持业务的能力。</span></div></div><div style="font-family: &quot;Helvetica Neue&quot;;"></div></span></w:sdt></span></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN"><div style="font-family: &quot;Helvetica Neue&quot;;"><br class="Apple-interchange-newline"><br></div><div><div style="font-family: &quot;Helvetica Neue&quot;; border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>DevOps</h2></div><div style="line-height: 24.2667px;"><font face="黑体">源代码库：Gitlab</font></div></div><div style="line-height: 24.2667px;"><font face="黑体">构建代码：CI、Sonar代码质量分析</font></div><div style="line-height: 24.2667px;"><font face="黑体">测试代码：Junit、JMeter</font></div><div style="line-height: 24.2667px;"><font face="黑体">部署代码：SaltStack、Ansible、Vagrant、Docker、Kubernetes</font></div><div style="line-height: 24.2667px;"><font face="黑体">监控代码：ELK、Open Fallcon。</font></div><div style="line-height: 24.2667px;"><font face="黑体">白板系统：Benarychat</font></div><div style="font-family: &quot;Helvetica Neue&quot;;"></div></span></w:sdt></span></div><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN" style="font-family: 黑体;"><div style="font-family: &quot;Helvetica Neue&quot;;"><br></div></span></w:sdt></span></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN"><div><div style="font-family: &quot;Helvetica Neue&quot;; border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>硬件服务器介绍<br></h2></div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;"><font face="黑体">机架服务器</font></div><div style="line-height: 24.2667px;"><font face="黑体">机架服务器的主要优势表现在节省空间，机架服务器的宽度为19英寸，高度以U为单位(1U=1.75英寸=44.45毫米)，通常有1U，2U，3U，4U，5U，7U几种标准的服务器。</font></div><div style="line-height: 24.2667px;"></div><div style="line-height: 24.2667px;"></div><div style="line-height: 24.2667px;"><font face="黑体">价格方面，机架服务器一般比同等配置的塔式服务器售价高出30%左右。</font></div><div style="line-height: 24.2667px;"><font face="黑体"><br></font></div><div style="line-height: 24.2667px;"><font face="黑体">刀片服务器</font></div><div style="line-height: 24.2667px;"><span style="font-family: 黑体;">刀片服务器</span><font face="黑体">是一种高可用高密度的低成本服务器平台，其主要结构为一大型主体机箱，内部可插上许多“刀片”，其中每一块刀片类似于一个个独立的服务器，它们可以通过本地硬盘启动自己的操作系统。在集群模式下，所有的刀片可以连接起来提供高速的网络环境，共享资源，为相同的用户群服务。根据所需要承担的服务器功能，刀片服务器被分成服务器刀片、网络刀片、存储刀片、管理刀片、光纤通道SAN刀片、扩展I/O刀片等等不同功能的刀片服务器。</font></div></div></div><div style="font-family: &quot;Helvetica Neue&quot;;"></div></span></w:sdt></span></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN"><div style="font-family: &quot;Helvetica Neue&quot;;"><br></div><h3 style="font-family: &quot;Helvetica Neue&quot;;">服务规格</h3><h4 style="font-family: &quot;Helvetica Neue&quot;;">镜像仓库后端存储</h4><div><div>1. 服务特性</div><div>网络IO，CPU</div><div>单万兆网卡，纯内网</div><div>CPU: E5-2620 v3 @ 2.40GHZ</div><div>内存：64GB</div><div>2. 服务器网卡配置</div><div>万兆网卡bond 上联</div><div>3. 操作系统配置</div><div>CentOS Linux release 7.2.1511 &nbsp;（webserver）</div><div>4. raid 配置和分区设置<br></div><div>每台机器配置12块6TB的SATA盘，两两做raid0</div><div>var分区至少50GB</div><div>系统盘必须要有两块，做raid 1</div><div>5. 机架部署网络拓扑</div><div>四台机器必须位于不同的机架，做到电源隔离</div><div>四台中预留一台同型号的存储机器做备用，因为集群规模过小，一旦一台服务器故障，所有数据均降级，数据风险极大</div><div><br></div><div>1 时间需要同步</div><div>2 开通nat</div></div><h4 style="font-family: &quot;Helvetica Neue&quot;;">负载均衡nginx机器</h4><div><div>1. 服务特性</div><div>网络IO，CPU</div><div>网卡：万兆</div><div>CPU: 2620*2</div><div>2. 服务器网卡配置<br></div><div>两块万兆网卡，一个公网，一个内网，内网网卡需要配置10个内网IP。</div><div>3. 操作系统配置<br></div><div>centos 7 &nbsp;（webserver）</div><div>4. raid 配置和分区设置<br></div><div>raid1，默认分区（出去系统空间，剩余给/data）</div><div>5. 机架部署网络拓扑</div><div>集群内服务器需要放置在不同机柜，其他无要求。</div><div><br></div><div><div>1 时间需要同步</div><div>2 开通nat</div></div><h4>Leengine管理节点</h4><div><div>1. 服务特性</div><div>cpu，内存</div><div>2. 服务器网卡配置</div><div>管理端配置在万兆&nbsp;</div><div>3. 操作系统配置</div><div>centos7 &nbsp;（webserver）</div><div>4. raid 配置和分区设置</div></div><div><div><img border="0" src="All in_files/52944589.png"></div></div><div><div>5. 机架部署网络拓扑</div><div>集群内服务器需要放置在不同机柜，其他无要求。 &nbsp;</div><div><br></div><div>1 时间需要同步</div><div>2 开通nat</div></div><div><h4>数据库&nbsp;</h4><div>1. 服务特性</div><div>磁盘io、cpu</div><div>美国通用1U机器配置Intel E5-2620V3*2/16G*8/SAS 10K2.5''600G*8/RAID0,1,5,6,10 1G cache</div><div>2. 服务器网卡配置<br></div><div>千兆bond/万兆</div><div>3. 操作系统配置<br></div><div>centos6&nbsp;</div><div>4. raid 配置和分区设置<br></div><div>系统分区raid1</div><div>数据分区raid10</div><div>5. 机架部署网络拓扑<br></div><div>集群内服务器需要放置在不同机柜，上联交换机最好堆叠</div><div>keepalived+mysqlreplication</div><div>需要申请一个vip 内网</div><div><br></div><div>1 时间需要同步</div><div>2 开通nat</div></div><div><h4>镜像构建&nbsp;</h4><div>1. 服务特性</div><div>网络，磁盘，万兆，连通外网</div><div>2. 服务器网卡配置</div><div>管理端 IP &nbsp;配置在万兆， 能够连通外网</div><div>3. 操作系统配置<br></div><div>centos7 &nbsp;（webserver）</div><div>4. raid 配置和分区设置</div><div><div><img border="0" src="All in_files/53047246.png"></div></div><div>5. 机架部署网络拓扑</div><div>集群内服务器需要放置在不同机柜，其他无要求。</div><div><br></div><div>1 时间需要同步</div><div>2 开通nat</div></div><div><h4>kubernetes master 节点&nbsp;</h4><div>1. 服务特性</div><div>2. 服务器网卡配置</div><div>管理端 IP 配置在万兆网卡</div><div>3. 操作系统配置</div><div>centos 7 &nbsp;（webserver）</div><div>4. raid 配置和分区设置</div></div><div><div><img border="0" src="All in_files/53097884.png"></div></div><div><div>5. 机架部署网络拓扑</div><div><div><img border="0" src="All in_files/53149271.png"></div></div><div>管理节点放置在两个机柜，且上联同一堆叠组的不同交换机下。</div><div><br></div><div>1 时间需要同步</div><div>2 开通nat</div></div><div><h4>kubernetes node 计算节点&nbsp;</h4><div>1. 服务特性</div><div>cpu，内存，网络， 万兆，能连通外网，dns 配置问题</div><div>2. 服务器网卡配置<br></div></div><div><div class="wiz-table-container" style="position: relative; padding: 15px 0px 5px;"><div class="wiz-table-body"><table class="confluenceTable tablesorter tablesorter-default" style="color: rgb(51, 51, 51); margin-top: 0px; margin-bottom: 0px; overflow-x: auto; font-family: Arial, sans-serif; font-size: 14px;"><tbody><tr><td class="" style="border-color: rgb(221, 221, 221); padding: 7px 10px; vertical-align: top; min-width: 8px;">网卡配置</td><td style="border-color: rgb(221, 221, 221); padding: 7px 10px; vertical-align: top; min-width: 8px;" class="">交换机接口模式</td><td style="border-color: rgb(221, 221, 221); padding: 7px 10px; vertical-align: top; min-width: 8px;" class="">vlan</td><td style="border-color: rgb(221, 221, 221); padding: 7px 10px; vertical-align: top; min-width: 8px;" class="">IP段</td><td style="border-color: rgb(221, 221, 221); padding: 7px 10px; vertical-align: top; min-width: 8px;" class="">备注</td></tr><tr><td class="confluenceTd" style="border-color: rgb(221, 221, 221); padding: 7px 10px; vertical-align: top; min-width: 8px;">br0 -&gt; bond0 -&gt;千兆 (eth0+eth1)&nbsp; mode 4</td><td class="confluenceTd" style="border-color: rgb(221, 221, 221); padding: 7px 10px; vertical-align: top; min-width: 8px;">lacp+access</td><td colspan="1" class="confluenceTd" style="border-color: rgb(221, 221, 221); padding: 7px 10px; vertical-align: top; min-width: 8px;">&nbsp;</td><td class="confluenceTd" style="border-color: rgb(221, 221, 221); padding: 7px 10px; vertical-align: top; min-width: 8px;">&nbsp;</td><td colspan="1" class="confluenceTd" style="border-color: rgb(221, 221, 221); padding: 7px 10px; vertical-align: top; min-width: 8px;">宿主机管理网段</td></tr><tr><td class="confluenceTd" style="border-color: rgb(221, 221, 221); padding: 7px 10px; vertical-align: top; min-width: 8px;"><p style="padding: 0px; background-color: transparent;">&nbsp;万兆 eth2 eth3</p></td><td class="confluenceTd" style="border-color: rgb(221, 221, 221); padding: 7px 10px; vertical-align: top; min-width: 8px;">lacp+trunk</td><td colspan="1" class="confluenceTd" style="border-color: rgb(221, 221, 221); padding: 7px 10px; vertical-align: top; min-width: 8px;">&nbsp;</td><td class="confluenceTd" style="border-color: rgb(221, 221, 221); padding: 7px 10px; vertical-align: top; min-width: 8px;">&nbsp;</td><td colspan="1" class="confluenceTd" style="border-color: rgb(221, 221, 221); padding: 7px 10px; vertical-align: top; min-width: 8px;">容器网段</td></tr></tbody></table></div></div></div><div><div>ovs bond: （下面的命令不需要操作）</div><div>ovs-vsctl add-br &nbsp;leenginebr0</div><div>ovs-vsctl add-bond &nbsp;leenginebr0 &nbsp;bond1 eth2 eth3 bond_mode=balance-tcp lacp=active</div><div>检测bond状态</div><div>ovs-appctl bond/show bond1</div><div>ovs-appctl lacp/show bond1</div></div><div><div>3. 操作系统配置</div><div>CentOS Linux release 7.2.1511 &nbsp;（webserver）</div><div>4. raid 配置和分区设置<br></div></div><div><div><img border="0" src="All in_files/53368244.png"></div></div><div><div>要存在/letv &nbsp;和/data 分区</div><div>/data 分区作为数据盘， 要最大</div><div>5. 机架部署网络拓扑<br></div></div><div><div><img border="0" src="All in_files/53413642.png"></div></div><div><div>主机上联交换机必须做堆叠，主机管理网卡和虚机流量网卡都做冗余(bonding，mode4)。</div><div>为保障独立的故障域，计算节点最小上架规模为2个机柜，IP根据机柜分配。</div><div>同机柜计算节点 电源接入A/B路各一半。</div><div>计算节点bonding网卡上联同一堆叠组的不同交换机，提高故障冗余度。</div><div>服务器网卡上联，交换机接口配置统一为port channel lacp (trunk/access)模式。</div><div><br></div><div>1 时间需要同步</div><div>2 开通nat</div></div><div><br></div><br></div><div><div style="font-family: &quot;Helvetica Neue&quot;; border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>网络基础及bond技术<br></h2></div><div style="line-height: 24.2667px;"><h3 style="line-height: 24.2667px;"><font face="黑体">OSI参考模型：</font></h3><div style="line-height: 24.2667px;"><font face="黑体">1.物理层（Physical Layer）</font></div><div style="line-height: 24.2667px;"><font face="黑体">OSI模型的最低层或第一层，为上层协议提供了一个传输数据的物理媒体。</font></div><div style="line-height: 24.2667px;"><font face="黑体">在这一层，协议数据单元为 比特（bit）。</font></div><div style="line-height: 24.2667px;"><font face="黑体">在物理层的互联设备包括：集线器（Hub）、中继器（Repeater）等。</font></div><div style="line-height: 24.2667px;"><font face="黑体"><br></font></div><div style="line-height: 24.2667px;"><font face="黑体">2.数据链路层（Datalink Layer）</font></div><div style="line-height: 24.2667px;"><font face="黑体">OSI模型的第二层，它控制网络层与物理层之间的通信，其主要功能是在不可靠的物理介质上提供可靠的传输。</font></div><div style="line-height: 24.2667px;"><font face="黑体">在这一层，协议数据单元为帧（frame）。</font></div><div style="line-height: 24.2667px;"><font face="黑体">在数据链路层的互联设备包括：网桥（Bridge）、交换机（Switch）等。</font></div><div style="line-height: 24.2667px;"><font face="黑体"><br></font></div><div style="line-height: 24.2667px;"><font face="黑体">3.网络层（Network Layer）</font></div><div style="line-height: 24.2667px;"><font face="黑体">OSI模型的第三层，其主要功能是将网络地址翻译成对应的物理地址，并决定如何将数据从发送方路由到接收方。</font></div><div style="line-height: 24.2667px;"><font face="黑体">在这一层，协议数据单元为数据包（packet）。</font></div><div style="line-height: 24.2667px;"><font face="黑体">网络层协议的代表包括：互联网协议IP、地址解析协议ARP、反向地址转换协议RARP、以太网协议Ethernet等。</font></div><div style="line-height: 24.2667px;"><font face="黑体">在网络层的互联设备包括：路由器（Router）等。</font></div><div style="line-height: 24.2667px;"><font face="黑体"><br></font></div><div style="line-height: 24.2667px;"><font face="黑体">4.传输层（Transport Layer）</font></div><div style="line-height: 24.2667px;"><font face="黑体">OSI模型中最重要的一层，是第一个主机到主机的层次。其主要功能是负责将上层数据分段并提供端到端的、可靠的或不可靠的传输。</font></div><div style="line-height: 24.2667px;"><font face="黑体">在这一层，协议数据单元为数据段（segment）。</font></div><div style="line-height: 24.2667px;"><font face="黑体">传输层协议的代表包括：TCP、UDP、SPX等。</font></div><div style="line-height: 24.2667px;"><font face="黑体">5.会话层（Session Layer）</font></div><div style="line-height: 24.2667px;"><font face="黑体">OSI模型的第五层</font></div><div style="line-height: 24.2667px;"><font face="黑体"><br></font></div><div style="line-height: 24.2667px;"><font face="黑体">6.表示层（Presentation Layer）</font></div><div style="line-height: 24.2667px;"><font face="黑体">OSI模型的第六层。表示层的数据转换包括数据的解密和加密、压缩、格式转换等。</font></div><div style="line-height: 24.2667px;"><font face="黑体"><br></font></div><div style="line-height: 24.2667px;"><font face="黑体">7.应用层（Application Layer）</font></div><div style="line-height: 24.2667px;"><font face="黑体">OSI模型的第七层，应用层提供的服务包括文件传输、文件管理以及电子邮件的信息处理。</font></div><div style="line-height: 24.2667px;"><font face="黑体">应用层协议的代表包括：FTP、Telnet、SMTP、HTTP、POP3、HTTPS等。</font></div><div style="line-height: 24.2667px;"><font face="黑体">在应用层的互联设备包括：网关（Gateway）等。</font></div></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN"><h3 style="font-family: &quot;Helvetica Neue&quot;;">TCP/IP协议栈</h3><div>TCP/IP网络协议栈分为应用层（对应OSI的上面3层）、传输层、网络层和链路层（对应OSI的物理层+链路层）四层。<br></div><div>TCP/IP数据包的封包：应用层将数据通过TCP/IP协议栈逐层向下传递，其下的每层接到来自上层的数据时，根据每层的协议都要在其数据的前端添加首部信息进行封装。不同的协议层对数据包有不同的称谓，在传输层叫做段(segment)，在网络层叫做数据报(datagram),在链路层叫做帧(frame)。在经过链路层时，数据封装成帧后发给物理层的传输介质上，到达目标主机后，每层协议再逐层剥掉其首部，最后递交给目标主机应用层，进行应用程序处理，数据与源主机发送的数据一致。</div><div><div><img border="0" src="All in_files/41944974.png"></div></div><div>用户数据</div><div><ol><li>在物理层经TCP协议封装后，传到下一层，TCP为了保证不发生丢包，就在TCP头部给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。接收端实体对已成功收到的包发回一个相应的确认（ACK）。对于TCP协议，不存在分片的问题，因为TCP报头的选项字段有MSS字段，规定一个TCP包最大可传输的字节数，一般是1500-20-20=1460字节。也就是说到达IP封包的时候最大可承载数据只有1460个字节，这样就可以避免分片的问题。但是对于UDP这一类的协议，分片操作还是交给IP完成，虽然这样可以增加载荷的效率，但是稳定性会受到很大的影响。</li><li>又经IP协议封装头部，头部中有字段记录是否分片（如果上层传来的是不分片，但数据实际长度大于1500-IP协议头部，则数据包被丢弃，并将一个ICMP错误返回给源主机），IP数据包的长度为16，也就是说最大为65535个字节。但是我们知道数据链路层规定MTU最大传输单元为1500个字节。当IP数据包的大小超过了1500，IP数据包必须要进行分片处理。这还只是初始发送端的分片，在网络中如果某个路由器的MTU小于1500，那么还需要在路由器端做分片，这就给IP包的完整接收照成了很大的不确定性（我们知道数据包达到终点不一定是按照顺序的），因为万一某一个分片丢失，可能会造成真个IP重传，当然前提是高层协议支持重传。</li><li>又经以太网帧协议封装，封装源MAC地址，目的MAC地址，报文类型为IP数据包，数据最大1500传输单元。使用ifconfig可以看到MTU值为1500。在封装以太网数据包时，根据目的IP地址，查找目的MAC地址，每台主机都维护一个ARP缓存表,可以用arp -a命令查看。缓存表中的表项有过期时间(一般为20分钟),如果20分钟内没有再次使用某个表项,则该表项失效，如果查不到本地有这个IP对应的MAC地址，则会封装一个报文类型为ARP类型的以太网帧格式，数据内容为ARP请求数据，然后广播给局域网所有机器，只是一个二层的局域网内，不能跨三层路由，当所有机器收到这个报文后，解开，发现目标IP地址不是自己的，抛出去，只有目标机器才会返回一个类型为ARP的以太网帧报文，数据内容为ARP应答。现在活得目标主机的MAC地址，交换机会保存哪个端口对应的哪个MAC地址。下次要有请求获取ARP，交换机就可以直接返回。源主机获取到该以太网帧以后，在本地ARP表保存这条IP到MAC映射，同时修改装有IP数据包的以太网帧，写进去目的MAC地址，然后发送出去。</li></ol></div><div><br></div><div>RARP协议是通过目的物理MAC地址，活得对应的IP地址。<br></div><div><br></div><div>虽然IP、ARP和RARP数据报都需要以太网驱动程序来封装成帧，但是从功能上划分，ARP和RARP属于链路层，IP属于网络层。虽然ICMP、IGMP、TCP、UDP的数据都需要IP协议来封装成数据报，但是从功能上划分，ICMP、IGMP与IP同属于网络层，TCP和UDP属于传输层。<br></div><div style="font-family: &quot;Helvetica Neue&quot;;"><br></div><div style="font-family: &quot;Helvetica Neue&quot;;">TCP有6个标志位：URG、ACK、PSH、RST、SYN和FIN。</div><div>SYN表示建立连接，FIN表示关闭连接；ACK表示响应；PSH表示有 DATA数据传输；RST表示连接重置；URG表示紧急指针字段有效。</div><div><br></div><div><div style="font-family: &quot;Helvetica Neue&quot;;">三次握手可概括为：</div><div style="font-family: &quot;Helvetica Neue&quot;;">请求连接，收到应答，再次请求。 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SYN ----&gt; SYN --------&gt; &nbsp;ACK</div><div style="font-family: &quot;Helvetica Neue&quot;;">三次握手是基于请求应答模式的，防止已过期的连接再次传到被连接的主机，三次握手改成仅需要两次握手，死锁是可能发生，从而解决了丢包问题。</div><div style="font-family: &quot;Helvetica Neue&quot;;"><br></div><div style="font-family: &quot;Helvetica Neue&quot;;">四次挥手可概括为：</div><div style="font-family: &quot;Helvetica Neue&quot;;">主动请求释放，主端收到应答，对端请求释放，对端收到应答。 &nbsp; &nbsp;FIN---------&gt;ACK--------&gt;FIN---------&gt;ACK</div><div style="font-family: &quot;Helvetica Neue&quot;;">四次挥手确保，连接释放，确保数据能够完成传输。挥手需要双发都同意才能结束。</div><h3 style="font-family: &quot;Helvetica Neue&quot;;">网卡Bond模式</h3><div>前网卡绑定mode共有七种(0~6)bond0、bond1、bond2、bond3、bond4、bond5、bond6</div><div><div>常用的有三种:</div><div>mode=0：平衡负载模式，有自动备援，但需要交换机支援及设定。</div><div>mode=1：自动备援模式，其中一条线若断线，其他线路将会自动备援。</div><div>mode=6：平衡负载模式，有自动备援，不必交换机支援及设定。</div></div><div><br></div></div><div><div style="font-family: &quot;Helvetica Neue&quot;; border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>磁盘阵列RAID<br></h2></div><h3 style="line-height: 24.2667px;"><font face="黑体">常用磁盘类型</font></h3></div><div style="line-height: 24.2667px;"><font face="黑体">常见的磁盘接口类型有IDE、SATA、SCSI、SAS、FC、SSD。</font></div><div style="line-height: 24.2667px;"><ul><li>IDE是俗称的并口，SATA是俗称的串口，这两种硬盘是个人电脑和低端服务器常见的硬盘，是普通PC的标准接口。</li><li>SCSI是广泛应用于小型机上的高速数据传输技术。</li><li>SAS就是串口的SCSI接口。一般服务器硬盘采用这两类接口，其性能比上述两种硬盘要高，稳定性更强，但是价格高，容量小，噪音大。</li><li>FC是光纤通道，和SCIS接口一样，光纤通道最初也不是为硬盘设计开发的接口技术，是专门为网络系统设计的，但随着存储系统对速度的需求，才逐渐应用到硬盘系统中。</li><li>SSD也称作电子硬盘或者固态电子盘，是由控制单元和固态存储单元（DRAM或FLASH芯片）组成的硬盘。固态硬盘的接口规范和定义、功能及使用方法上与普通硬盘的相同，在产品外形和尺寸上也与普通硬盘一致。新一代的固态硬盘普遍采用SATA-2接口。但其成本较高。</li></ul></div><h3 style="line-height: 24.2667px;"><font face="黑体">RAIDx</font></h3><div style="line-height: 24.2667px;"><font face="黑体"><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">RAID称为廉价磁盘冗余阵列。RAID 的基本原理是把多个便宜的小磁盘组合到一起，成为一个磁盘组，使性能达到或超过一个容量巨大、价格昂贵的磁盘。</div><div style="line-height: 24.2667px;">目前 RAID技术大致分为两种：基于硬件的RAID技术和基于软件的RAID技术。其中在Linux下通过自带的软件就能实现RAID功能，Windows也有软件。这样就可以实现将几个物理磁盘合并成一个更大的虚拟设备，从而达到性能改进和数据冗余的目的。当然基于硬件的RAID解决方案比基于软件RAID技术在使用性能和服务性能上稍胜一筹，具体表现在检测和修复多位错误的能力、错误磁盘自动检测和阵列重建等方面。</div><div><br></div><div>RAIDx介绍：</div><div>RAID最常用的RAID0、RAID1、RAID5、RAID6、RAID10。</div><div><ul><li>RAID 0是两盘一起读写，如果一个坏了那么数据全丢失，必须要有两个以上硬盘驱动器；</li><li>RAID 1是一块写，一块用来备份，坏一块无所谓，RAID 1可以用于两个或2*N个磁盘，使用0块或更多的备用磁盘，每次写数据时会同时写入镜像盘。这种阵列可靠性很高，但其有效容量减小到总容量的一半，同时这些磁盘的大小应该相等，否则总容量只具有最小磁盘的大小。RAID 1技术支持“热替换”，即不断电的情况下对故障磁盘进行更换，更换完毕只要从镜像盘上恢复数据即可；</li><li>RAID 0+1: 也被称为RAID 10标准，实际是将RAID 0和RAID 1标准结合的产物，在连续地以位或字节为单位分割数据并且并行读/写多个磁盘的同时，为每一块磁盘作磁盘镜像进行冗余。它的优点是同时拥有RAID 0的超凡速度和RAID 1的数据高可靠性，但是CPU占用率同样也更高，而且磁盘的利用率比较低；</li><li>RAID 2很少用，将数据条块化地分布于不同的硬盘上，条块单位为位或字节，并使用称为“加重平均纠错码（海明码）”的编码技术来提供错误检查及恢复；</li><li>RAID 3也很少用，同RAID 2非常类似，都是将数据条块化分布于不同的硬盘上，区别在于RAID 3使用简单的奇偶校验，并用单块磁盘存放奇偶校验信息；<br></li><li>RAID 4也很少用，同样也将数据条块化并分布于不同的磁盘上，但条块单位为块或记录。RAID 4使用一块磁盘作为奇偶校验盘，每次写操作都需要访问奇偶盘，这时奇偶校验盘会成为写操作的瓶颈；</li><li>RAID 5不单独指定奇偶盘，而是在所有磁盘上交叉地存取数据及奇偶校验信息。在RAID 5上，读/写指针可同时对阵列设备进行操作，提供了更高的数据流量。RAID 5更适合于小数据块和随机读写的数据。可以用在三块或更多的磁盘上，并使用0块或更多的备用磁盘。允许坏一块盘，但是最少需要三块盘来做。</li><li>&nbsp;RAID 6增加了第二个独立的奇偶校验信息块。两个独立的奇偶系统使用不同的算法，数据的可靠性非常高，即使两块磁盘同时失效也不会影响数据的使用。但RAID 6需要分配给奇偶校验信息更大的磁盘空间，相对于RAID 5有更大的“写损失”，因此“写性能”非常差。较差的性能和复杂的实施方式使得RAID 6很少得到实际应用。允许坏2块盘，但最少需要四块盘。</li><li>RAID 7是一种新的RAID标准，其自身带有智能化实时操作系统和用于存储管理的软件工具，可完全独立于主机运行，不占用主机CPU资源。RAID 7可以看作是一种存储计算机（Storage Computer），它与其他RAID标准有明显区别。</li><li>可以如RAID 0+1结合多种RAID规范来构筑所需的RAID阵列，RAID 5+3（RAID 53）也是一种应用较为广泛的阵列形式。</li></ul><div><div><br></div><div>一般常用的RAID阶层，分别是RAID 0、RAID1、RAID 2、RAID 3、RAID 4以及RAID 5，再加上二合一型 RAID 0+1﹝或称RAID 10﹞。RAID级别的优、缺点：</div><div><div class="wiz-table-container" style="position: relative; padding: 15px 0px 5px;"><div class="wiz-table-body"><table style="width: 678px;"><tbody><tr><td align="left" valign="middle" style="width: 188px;" class="">RAID级别</td><td align="left" valign="middle" style="width: 213px;" class="">相对优点</td><td align="left" valign="middle" style="width: 276px;" class="">相对缺点</td></tr><tr><td align="left" valign="middle" style="width: 188px;" class=""><span style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;">RAID 0</span></td><td align="left" valign="middle" style="width: 213px;" class=""><span style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;">存取速度最快</span></td><td align="left" valign="middle" style="width: 276px;" class=""><span style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;">没有容错</span></td></tr><tr><td align="left" valign="middle" style="width: 188px;" class=""><span style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;">RAID 1</span></td><td align="left" valign="middle" style="width: 213px;" class=""><span style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;">完全容错</span></td><td align="left" valign="middle" style="width: 276px;" class=""><span style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;">成本高</span></td></tr><tr><td align="left" valign="middle" style="width: 188px;" class=""><span style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;">RAID 2</span></td><td align="left" valign="middle" style="width: 213px;" class=""><span style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;">带海明码校验</span></td><td align="left" valign="middle" style="width: 276px;" class=""><span style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;">数据冗余多，速度慢</span></td></tr><tr><td align="left" valign="middle" style="width: 188px;" class=""><span style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;">RAID 3</span></td><td align="left" valign="middle" style="width: 213px;" class=""><span style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;">写入性能最好</span></td><td align="left" valign="middle" style="width: 276px;" class=""><span style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;">没有多任务功能</span></td></tr><tr><td align="left" valign="middle" style="width: 188px;" class=""><span style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;">RAID 4</span></td><td align="left" valign="middle" style="width: 213px;" class=""><span style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;">具备多任务及容错功能</span></td><td align="left" valign="middle" style="width: 276px;" class=""><span style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;">磁盘驱动器造成性能瓶颈</span></td></tr><tr><td align="left" valign="middle" style="width: 188px;" class=""><span style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;">RAID 5</span></td><td align="left" valign="middle" style="width: 213px;" class=""><span style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;">具备多任务及容错功能</span></td><td align="left" valign="middle" style="width: 276px;" class=""><span style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;">写入时有overhead</span></td></tr><tr><td align="left" valign="middle" style="width: 188px;" class=""><span style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;">RAID 0+1/RAID 10</span></td><td align="left" valign="middle" style="width: 213px;" class=""><span style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;">速度快、完全容错</span></td><td align="left" valign="middle" style="width: 276px;" class=""><span style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;">成本高</span></td></tr></tbody></table></div></div></div></div></div><div><br></div></div></font></div><h3 style="line-height: 24.2667px;"><font face="黑体">LVM</font></h3><div style="font-family: &quot;Helvetica Neue&quot;;"></div></span></w:sdt></span></div></div><div style="font-family: &quot;Helvetica Neue&quot;;"></div></span></w:sdt></span></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN"><div style="line-height: 24.2667px;">MBR与GPT区别：</div><div style="line-height: 24.2667px;"><ul><li>MBR方式，开机管理程序纪录区与分区表通通放在磁盘的第一个扇区， 这个扇区通常是 512Bytes 的大小 。第一个扇区 512Bytes 会有这两个数据：</li><ul><li>主要开机记录区(Master Boot Record, MBR):可以安装开机管理程序的地方，有446 Bytes</li><li>分区表(partition table):记录整颗硬盘分区的状态，有64 Bytes</li></ul></ul></div><div style="line-height: 24.2667px;">&nbsp; &nbsp;&nbsp;由于分区表所在区块仅有64 Bytes容量，因此最多仅能有四组记录区，每组记录区记录了该区段的启始与结束的柱面号码。</div><div style="line-height: 24.2667px;">&nbsp; &nbsp;&nbsp;磁盘的 MBR 分区方式中，主要与扩展分区最多可以有四个，如果磁盘容量大于 2TB 以上时，系统会自动使用 GPT 分区方式来处理磁盘分区。GPT 分区已经没有延伸与逻辑分区的概念，可以想像成所有的分区都是主分区!&nbsp;</div><div style="line-height: 24.2667px;">&nbsp; &nbsp;&nbsp;硬盘默认的分区表仅能写入四组分区信息，这四组分区信息我们称为主要(Primary)或延伸(Extended)分区 ，主要分区与延伸分区最多可以有四笔(硬盘的限制) ，延伸分区最多只能有一个(操作系统的限制) ，逻辑分区是由延伸分区持续切割出来的分区，能够被格式化后，作为数据存取的分区为主要分区与逻辑分区。延伸分区无法格式化，逻辑分区的数量依操作系统而不同，在Linux系统中SATA硬盘已经可以突破63个以上的分区限制;</div></span></w:sdt></span></div><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN" style="font-family: 黑体;"><span style="font-family: &quot;Helvetica Neue&quot;;">&nbsp; &nbsp;&nbsp;</span><span style="font-family: &quot;Helvetica Neue&quot;;">一个硬盘可以有1到3个主分区和1个扩展分区,也可以只有主分区而没有扩展分区,但主分区必须至少有1个,扩展分区则最多只有1个,且主分区+扩展分区总共不能超过4个。逻辑分区可以有若干个。</span><br></span></w:sdt></span></div></div><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN" style="font-family: 黑体;"><span style="font-family: &quot;Helvetica Neue&quot;;">1. 查看当前所有的磁盘信息</span></span></w:sdt></span>&nbsp; &nbsp; fdisk -l</div><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN" style="font-family: 黑体;"><span style="font-family: &quot;Helvetica Neue&quot;;">2.查看分区挂在目录</span></span></w:sdt></span>&nbsp; &nbsp; df -lh</div><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN" style="font-family: 黑体;"><span style="font-family: &quot;Helvetica Neue&quot;;">3.选择磁盘创建分区(分区又分主分区，扩展分区、逻辑分区，扩展分区不占大小，在扩展分区上创建逻辑分区 TODO )</span></span></w:sdt></span>&nbsp; &nbsp; fdisk /dev/sdb</div><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;">4.格式化分区&nbsp; &nbsp;&nbsp;mkfs.ext4 /dev/sdb2</div><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;">5.挂载分区到目录上&nbsp; &nbsp;&nbsp;&nbsp;mount /dev/sdb1 /my_mount1</div><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;">6.制定分区格式 &nbsp; &nbsp;fdisk -l根据向导中提示修改 &nbsp; &nbsp;LVM格式为8e</div><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;">7.卸载分区&nbsp; &nbsp;&nbsp;umount /dev/sdb1</div><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;">8.删除分区 &nbsp; &nbsp;fdisk -l根据向导删除</div><div style="font-family: &quot;Helvetica Neue&quot;; line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;">LVM是逻辑卷管理的简写，它将一个或多个硬盘的分区在逻辑上集合，相当于一个大硬盘来使用，当硬盘的空间不够使用的时候，可以继续将其它的硬盘的分区加入其中，这样可以实现磁盘空间的动态管理，相对于普通的磁盘分区有很大的灵活性。<br></div><div style="line-height: 24.2667px;"><div style="line-height: 24.2667px;">LVM提供了一个抽象的盘卷，在盘卷上建立文件系统。首先我们讨论以下几个LVM术语：</div><div style="line-height: 24.2667px;">物理存储介质（The physical media）：这里指系统的存储设备：硬盘。</div><div style="line-height: 24.2667px;"><ul><li>PV：是物理的磁盘分区</li><li>VG：LVM中的物理的磁盘分区，也就是PV，必须加入VG，可以将VG理解为一个仓库或者是几个大的硬盘。</li><li>LV：也就是从VG中划分的逻辑分区</li></ul><div><br></div></div><div style="line-height: 24.2667px;">要创建一个LVM系统，一般需要经过以下步骤：</div><div style="line-height: 24.2667px;">1.创建分区 &nbsp; &nbsp;fdisk -l，一定指定分区格式为8e</div><div style="line-height: 24.2667px;">2.创建PV &nbsp; &nbsp;pvcreate 分区名 &nbsp; &nbsp;查看已经存在的PV：pvdisplay</div><div style="line-height: 24.2667px;">3.创建VG &nbsp; &nbsp;vgcreate VG名称 PV名 &nbsp; &nbsp;可利用已经存在的VG，同一个VG下的一组PV构成一个VG。查看VG：vgdisplay</div><div style="line-height: 24.2667px;">4.从VG中划分一个LV &nbsp; &nbsp;lvcreate -L 100M -n lv名称 PV名 &nbsp; &nbsp;显示所有LV信息：lvdisplay &nbsp; &nbsp;将LV主设备、此设备号写到/sys/fs/cgroup/，限制分区IOPS。</div><div style="line-height: 24.2667px;">5.LV格式化文件系统 &nbsp; &nbsp;mkfs -t ext3 /dev/PV名/LV名</div><div style="line-height: 24.2667px;">6.挂载LV到一个目录 &nbsp; &nbsp;mount /dev/PV名/LV名 /root/test目录</div><div style="line-height: 24.2667px;"><br></div><div style="line-height: 24.2667px;"><br></div></div><div style="font-family: &quot;Helvetica Neue&quot;;"></div></span></w:sdt></span></div><div></div></span></div><h1 style="line-height: 70.4px;"><span style="font-size: 36px;"><font color="#9d45b8"><span data-wiz-span="data-wiz-span" style="font-size: 3.2rem;">五 &nbsp;In Project</span></font></span></h1><p class="MsoBlockText" style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN" style="font-family: 黑体;"></span></w:sdt></span></p><div style="color: rgb(0, 0, 0); font-family: &quot;Helvetica Neue&quot;; font-size: 15px;"></div><p></p><div style="margin: 0px; color: rgb(0, 0, 0); font-family: &quot;Helvetica Neue&quot;; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><div style="margin: 0px; border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2 style="margin: 0cm 0cm 16pt; padding: 0cm; font-weight: bold; font-size: 19pt; break-after: avoid; border: none; font-family: Tahoma; color: rgb(224, 155, 59);">Matrix+Beehive+Mcluster<br></h2></div><div style="margin: 0px; line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B" id="851456089"><span lang="ZH-CN" style="font-family: 黑体;">要立即开</span></w:sdt></span></div><div style="margin: 0px; line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN" style="font-family: 黑体;"><div style="font-family: &quot;Helvetica Neue&quot;;"><span style="font-family: 黑体;">现有部署情况，现在支持最大情况</span><br class="Apple-interchange-newline"><br></div><div style="font-family: &quot;Helvetica Neue&quot;;"><div style="border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>Leengine</h2></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B" id="851456089"><span lang="ZH-CN" style="font-family: 黑体;">要立即开</span></w:sdt></span></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN" style="font-family: 黑体;">现有部署情况，现在支持最大情况</span></w:sdt></span></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN" style="font-family: 黑体;"><div style="font-family: &quot;Helvetica Neue&quot;;"><br class="Apple-interchange-newline"><br></div><div style="font-family: &quot;Helvetica Neue&quot;;"><div style="border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>Marsone</h2></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B" id="851456089"><span lang="ZH-CN" style="font-family: 黑体;">要立即开</span></w:sdt></span></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN" style="font-family: 黑体;"><div style="font-family: &quot;Helvetica Neue&quot;;"><br class="Apple-interchange-newline"><br></div><div style="font-family: &quot;Helvetica Neue&quot;;"><div style="border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>Kubernetes持久化</h2></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B" id="851456089"><span lang="ZH-CN" style="font-family: 黑体;">要立即开</span></w:sdt></span></div></div><div style="font-family: &quot;Helvetica Neue&quot;;"></div></span></w:sdt></span></div></div><div style="font-family: &quot;Helvetica Neue&quot;;"></div></span></w:sdt></span></div><div><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN" style="font-family: 黑体;"><div style="font-family: &quot;Helvetica Neue&quot;;"><br class="Apple-interchange-newline"><br></div><div style="font-family: &quot;Helvetica Neue&quot;;"><div style="border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>一片天<br></h2></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B" id="851456089"><span lang="ZH-CN" style="font-family: 黑体;">要立即开</span></w:sdt></span></div><div><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN" style="font-family: 黑体;"><div style="font-family: &quot;Helvetica Neue&quot;;"><br class="Apple-interchange-newline"><br></div><div style="font-family: &quot;Helvetica Neue&quot;;"><div style="border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 3pt solid rgb(42, 42, 42); padding: 18pt 0cm 0cm;"><h2>大型项目文章篇</h2></div><div style="line-height: 24.2667px;"><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B" id="851456089"><span lang="ZH-CN" style="font-family: 黑体;">要立即开</span></w:sdt></span></div><div><span lang="EN-GB"><w:sdt showingplchdr="t" temporary="t" docpart="7DCA4B07DE1B974EBCE25A65B455DF2B"><span lang="ZH-CN" style="font-family: 黑体;"><br></span></w:sdt></span></div></div><div style="font-family: &quot;Helvetica Neue&quot;;"></div></span></w:sdt></span></div></div><div style="font-family: &quot;Helvetica Neue&quot;;"></div></span></w:sdt></span></div></div><div style="font-family: &quot;Helvetica Neue&quot;;"></div></span></w:sdt></span></div></div><style>
<!--
 
@font-face
  {font-family:"Cambria Math";
  panose-1:2 4 5 3 5 4 6 3 2 4;
  mso-font-charset:1;
  mso-generic-font-family:roman;
  mso-font-format:other;
  mso-font-pitch:variable;
  mso-font-signature:0 0 0 0 0 0;}
@font-face
  {font-family:DengXian;
  panose-1:2 1 6 0 3 1 1 1 1 1;
  mso-font-charset:134;
  mso-generic-font-family:auto;
  mso-font-pitch:variable;
  mso-font-signature:-1610612033 953122042 22 0 262159 0;}
@font-face
  {font-family:"\@DengXian";
  mso-font-charset:134;
  mso-generic-font-family:auto;
  mso-font-pitch:variable;
  mso-font-signature:-1610612033 953122042 22 0 262159 0;}
 
p.MsoNormal, li.MsoNormal, div.MsoNormal
  {mso-style-unhide:no;
  mso-style-qformat:yes;
  mso-style-parent:"";
  margin:0cm;
  margin-bottom:.0001pt;
  text-align:justify;
  text-justify:inter-ideograph;
  mso-pagination:none;
  font-size:12.0pt;
  font-family:DengXian;
  mso-ascii-font-family:DengXian;
  mso-ascii-theme-font:minor-latin;
  mso-fareast-font-family:DengXian;
  mso-fareast-theme-font:minor-fareast;
  mso-hansi-font-family:DengXian;
  mso-hansi-theme-font:minor-latin;
  mso-bidi-font-family:"Times New Roman";
  mso-bidi-theme-font:minor-bidi;
  mso-font-kerning:1.0pt;}
h1
  {mso-style-priority:9;
  mso-style-unhide:no;
  mso-style-qformat:yes;
  mso-style-link:"标题 1字符";
  mso-style-next:正文;
  margin-top:17.0pt;
  margin-right:0cm;
  margin-bottom:16.5pt;
  margin-left:0cm;
  text-align:justify;
  text-justify:inter-ideograph;
  line-height:240%;
  mso-pagination:lines-together;
  page-break-after:avoid;
  mso-outline-level:1;
  font-size:22.0pt;
  font-family:DengXian;
  mso-ascii-font-family:DengXian;
  mso-ascii-theme-font:minor-latin;
  mso-fareast-font-family:DengXian;
  mso-fareast-theme-font:minor-fareast;
  mso-hansi-font-family:DengXian;
  mso-hansi-theme-font:minor-latin;
  mso-font-kerning:22.0pt;}
span.1
  {mso-style-name:"标题 1字符";
  mso-style-priority:9;
  mso-style-unhide:no;
  mso-style-locked:yes;
  mso-style-link:"标题 1";
  mso-ansi-font-size:22.0pt;
  mso-bidi-font-size:22.0pt;
  mso-font-kerning:22.0pt;
  font-weight:bold;}
.MsoChpDefault
  {mso-style-type:export-only;
  mso-default-props:yes;
  font-family:DengXian;
  mso-bidi-font-family:"Times New Roman";
  mso-bidi-theme-font:minor-bidi;}
 
@page
  {mso-page-border-surround-header:no;
  mso-page-border-surround-footer:no;}
@page WordSection1
  {size:595.0pt 842.0pt;
  margin:72.0pt 90.0pt 72.0pt 90.0pt;
  mso-header-margin:42.55pt;
  mso-footer-margin:49.6pt;
  mso-paper-source:0;
  layout-grid:21.15pt;}
div.WordSection1
  {page:WordSection1;}
-->
</style><style>
<!--
 
@font-face
  {font-family:"Courier New";
  panose-1:2 7 3 9 2 2 5 2 4 4;
  mso-font-charset:0;
  mso-generic-font-family:auto;
  mso-font-pitch:variable;
  mso-font-signature:-536859905 -1073711037 9 0 511 0;}
@font-face
  {font-family:Wingdings;
  panose-1:5 0 0 0 0 0 0 0 0 0;
  mso-font-charset:2;
  mso-generic-font-family:auto;
  mso-font-pitch:variable;
  mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
  {font-family:Mangal;
  panose-1:2 4 5 3 5 2 3 3 2 2;
  mso-font-charset:0;
  mso-generic-font-family:auto;
  mso-font-pitch:variable;
  mso-font-signature:32771 0 0 0 1 0;}
@font-face
  {font-family:"Cambria Math";
  panose-1:2 4 5 3 5 4 6 3 2 4;
  mso-font-charset:0;
  mso-generic-font-family:auto;
  mso-font-pitch:variable;
  mso-font-signature:-536870145 1107305727 0 0 415 0;}
@font-face
  {font-family:Tahoma;
  panose-1:2 11 6 4 3 5 4 4 2 4;
  mso-font-charset:0;
  mso-generic-font-family:auto;
  mso-font-pitch:variable;
  mso-font-signature:-520081665 -1073717157 41 0 66047 0;}
@font-face
  {font-family:黑体;
  mso-font-charset:134;
  mso-generic-font-family:auto;
  mso-font-pitch:variable;
  mso-font-signature:-2147482945 953122042 22 0 262145 0;}
@font-face
  {font-family:"\@黑体";
  mso-font-charset:134;
  mso-generic-font-family:auto;
  mso-font-pitch:variable;
  mso-font-signature:-2147482945 953122042 22 0 262145 0;}
 
p.MsoNormal, li.MsoNormal, div.MsoNormal
  {mso-style-unhide:no;
  mso-style-qformat:yes;
  mso-style-parent:"";
  margin-top:0cm;
  margin-right:0cm;
  margin-bottom:10.0pt;
  margin-left:0cm;
  line-height:130%;
  mso-pagination:widow-orphan;
  font-size:11.0pt;
  font-family:Tahoma;
  mso-ascii-font-family:Tahoma;
  mso-ascii-theme-font:minor-latin;
  mso-fareast-font-family:黑体;
  mso-fareast-theme-font:minor-fareast;
  mso-hansi-font-family:Tahoma;
  mso-hansi-theme-font:minor-latin;
  mso-bidi-font-family:Mangal;
  mso-bidi-theme-font:minor-bidi;
  color:#2A2A2A;
  mso-themecolor:text2;
  mso-ansi-language:EN-GB;}
h1
  {mso-style-priority:9;
  mso-style-unhide:no;
  mso-style-qformat:yes;
  mso-style-link:"标题 1字符";
  mso-style-next:正文;
  margin-top:0cm;
  margin-right:0cm;
  margin-bottom:180.0pt;
  margin-left:0cm;
  mso-add-space:auto;
  page-break-before:always;
  mso-pagination:widow-orphan;
  mso-outline-level:1;
  font-size:55.0pt;
  mso-bidi-font-size:16.0pt;
  font-family:Tahoma;
  mso-ascii-font-family:Tahoma;
  mso-ascii-theme-font:major-latin;
  mso-fareast-font-family:黑体;
  mso-fareast-theme-font:major-fareast;
  mso-hansi-font-family:Tahoma;
  mso-hansi-theme-font:major-latin;
  mso-bidi-font-family:Mangal;
  mso-bidi-theme-font:major-bidi;
  color:#2A2A2A;
  mso-themecolor:text2;
  mso-font-kerning:0pt;
  mso-ansi-language:EN-GB;
  mso-bidi-font-weight:normal;}
h1.CxSpFirst
  {mso-style-priority:9;
  mso-style-unhide:no;
  mso-style-qformat:yes;
  mso-style-link:"标题 1字符";
  mso-style-next:正文;
  mso-style-type:export-only;
  margin:0cm;
  margin-bottom:.0001pt;
  mso-add-space:auto;
  page-break-before:always;
  mso-pagination:widow-orphan;
  mso-outline-level:1;
  font-size:55.0pt;
  mso-bidi-font-size:16.0pt;
  font-family:Tahoma;
  mso-ascii-font-family:Tahoma;
  mso-ascii-theme-font:major-latin;
  mso-fareast-font-family:黑体;
  mso-fareast-theme-font:major-fareast;
  mso-hansi-font-family:Tahoma;
  mso-hansi-theme-font:major-latin;
  mso-bidi-font-family:Mangal;
  mso-bidi-theme-font:major-bidi;
  color:#2A2A2A;
  mso-themecolor:text2;
  mso-font-kerning:0pt;
  mso-ansi-language:EN-GB;
  mso-bidi-font-weight:normal;}
h1.CxSpMiddle
  {mso-style-priority:9;
  mso-style-unhide:no;
  mso-style-qformat:yes;
  mso-style-link:"标题 1字符";
  mso-style-next:正文;
  mso-style-type:export-only;
  margin:0cm;
  margin-bottom:.0001pt;
  mso-add-space:auto;
  page-break-before:always;
  mso-pagination:widow-orphan;
  mso-outline-level:1;
  font-size:55.0pt;
  mso-bidi-font-size:16.0pt;
  font-family:Tahoma;
  mso-ascii-font-family:Tahoma;
  mso-ascii-theme-font:major-latin;
  mso-fareast-font-family:黑体;
  mso-fareast-theme-font:major-fareast;
  mso-hansi-font-family:Tahoma;
  mso-hansi-theme-font:major-latin;
  mso-bidi-font-family:Mangal;
  mso-bidi-theme-font:major-bidi;
  color:#2A2A2A;
  mso-themecolor:text2;
  mso-font-kerning:0pt;
  mso-ansi-language:EN-GB;
  mso-bidi-font-weight:normal;}
h1.CxSpLast
  {mso-style-priority:9;
  mso-style-unhide:no;
  mso-style-qformat:yes;
  mso-style-link:"标题 1字符";
  mso-style-next:正文;
  mso-style-type:export-only;
  margin-top:0cm;
  margin-right:0cm;
  margin-bottom:180.0pt;
  margin-left:0cm;
  mso-add-space:auto;
  page-break-before:always;
  mso-pagination:widow-orphan;
  mso-outline-level:1;
  font-size:55.0pt;
  mso-bidi-font-size:16.0pt;
  font-family:Tahoma;
  mso-ascii-font-family:Tahoma;
  mso-ascii-theme-font:major-latin;
  mso-fareast-font-family:黑体;
  mso-fareast-theme-font:major-fareast;
  mso-hansi-font-family:Tahoma;
  mso-hansi-theme-font:major-latin;
  mso-bidi-font-family:Mangal;
  mso-bidi-theme-font:major-bidi;
  color:#2A2A2A;
  mso-themecolor:text2;
  mso-font-kerning:0pt;
  mso-ansi-language:EN-GB;
  mso-bidi-font-weight:normal;}
h2
  {mso-style-priority:9;
  mso-style-qformat:yes;
  mso-style-link:"标题 2字符";
  mso-style-next:正文;
  margin-top:0cm;
  margin-right:0cm;
  margin-bottom:16.0pt;
  margin-left:0cm;
  mso-add-space:auto;
  mso-pagination:widow-orphan lines-together;
  page-break-after:avoid;
  mso-outline-level:2;
  border:none;
  mso-border-top-alt:solid #2A2A2A 3.0pt;
  mso-border-top-themecolor:text2;
  padding:0cm;
  mso-padding-alt:18.0pt 0cm 0cm 0cm;
  font-size:19.0pt;
  mso-bidi-font-size:13.0pt;
  font-family:Tahoma;
  mso-ascii-font-family:Tahoma;
  mso-ascii-theme-font:major-latin;
  mso-fareast-font-family:黑体;
  mso-fareast-theme-font:major-fareast;
  mso-hansi-font-family:Tahoma;
  mso-hansi-theme-font:major-latin;
  mso-bidi-font-family:Mangal;
  mso-bidi-theme-font:major-bidi;
  color:#E09B3B;
  mso-themecolor:accent1;
  mso-ansi-language:EN-GB;
  mso-bidi-font-weight:normal;}
h2.CxSpFirst
  {mso-style-priority:9;
  mso-style-qformat:yes;
  mso-style-link:"标题 2字符";
  mso-style-next:正文;
  mso-style-type:export-only;
  margin:0cm;
  margin-bottom:.0001pt;
  mso-add-space:auto;
  mso-pagination:widow-orphan lines-together;
  page-break-after:avoid;
  mso-outline-level:2;
  border:none;
  mso-border-top-alt:solid #2A2A2A 3.0pt;
  mso-border-top-themecolor:text2;
  padding:0cm;
  mso-padding-alt:18.0pt 0cm 0cm 0cm;
  font-size:19.0pt;
  mso-bidi-font-size:13.0pt;
  font-family:Tahoma;
  mso-ascii-font-family:Tahoma;
  mso-ascii-theme-font:major-latin;
  mso-fareast-font-family:黑体;
  mso-fareast-theme-font:major-fareast;
  mso-hansi-font-family:Tahoma;
  mso-hansi-theme-font:major-latin;
  mso-bidi-font-family:Mangal;
  mso-bidi-theme-font:major-bidi;
  color:#E09B3B;
  mso-themecolor:accent1;
  mso-ansi-language:EN-GB;
  mso-bidi-font-weight:normal;}
h2.CxSpMiddle
  {mso-style-priority:9;
  mso-style-qformat:yes;
  mso-style-link:"标题 2字符";
  mso-style-next:正文;
  mso-style-type:export-only;
  margin:0cm;
  margin-bottom:.0001pt;
  mso-add-space:auto;
  mso-pagination:widow-orphan lines-together;
  page-break-after:avoid;
  mso-outline-level:2;
  border:none;
  mso-border-top-alt:solid #2A2A2A 3.0pt;
  mso-border-top-themecolor:text2;
  padding:0cm;
  mso-padding-alt:18.0pt 0cm 0cm 0cm;
  font-size:19.0pt;
  mso-bidi-font-size:13.0pt;
  font-family:Tahoma;
  mso-ascii-font-family:Tahoma;
  mso-ascii-theme-font:major-latin;
  mso-fareast-font-family:黑体;
  mso-fareast-theme-font:major-fareast;
  mso-hansi-font-family:Tahoma;
  mso-hansi-theme-font:major-latin;
  mso-bidi-font-family:Mangal;
  mso-bidi-theme-font:major-bidi;
  color:#E09B3B;
  mso-themecolor:accent1;
  mso-ansi-language:EN-GB;
  mso-bidi-font-weight:normal;}
h2.CxSpLast
  {mso-style-priority:9;
  mso-style-qformat:yes;
  mso-style-link:"标题 2字符";
  mso-style-next:正文;
  mso-style-type:export-only;
  margin-top:0cm;
  margin-right:0cm;
  margin-bottom:16.0pt;
  margin-left:0cm;
  mso-add-space:auto;
  mso-pagination:widow-orphan lines-together;
  page-break-after:avoid;
  mso-outline-level:2;
  border:none;
  mso-border-top-alt:solid #2A2A2A 3.0pt;
  mso-border-top-themecolor:text2;
  padding:0cm;
  mso-padding-alt:18.0pt 0cm 0cm 0cm;
  font-size:19.0pt;
  mso-bidi-font-size:13.0pt;
  font-family:Tahoma;
  mso-ascii-font-family:Tahoma;
  mso-ascii-theme-font:major-latin;
  mso-fareast-font-family:黑体;
  mso-fareast-theme-font:major-fareast;
  mso-hansi-font-family:Tahoma;
  mso-hansi-theme-font:major-latin;
  mso-bidi-font-family:Mangal;
  mso-bidi-theme-font:major-bidi;
  color:#E09B3B;
  mso-themecolor:accent1;
  mso-ansi-language:EN-GB;
  mso-bidi-font-weight:normal;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
  {mso-style-priority:99;
  mso-style-qformat:yes;
  mso-style-link:页脚字符;
  margin:0cm;
  margin-bottom:.0001pt;
  mso-pagination:widow-orphan;
  font-size:23.0pt;
  mso-bidi-font-size:11.0pt;
  font-family:Tahoma;
  mso-ascii-font-family:Tahoma;
  mso-ascii-theme-font:minor-latin;
  mso-fareast-font-family:黑体;
  mso-fareast-theme-font:minor-fareast;
  mso-hansi-font-family:Tahoma;
  mso-hansi-theme-font:minor-latin;
  mso-bidi-font-family:Mangal;
  mso-bidi-theme-font:minor-bidi;
  color:#2A2A2A;
  mso-themecolor:text2;
  mso-ansi-language:EN-GB;
  font-weight:bold;
  mso-bidi-font-weight:normal;}
p.MsoListBullet, li.MsoListBullet, div.MsoListBullet
  {mso-style-priority:10;
  mso-style-unhide:no;
  mso-style-qformat:yes;
  margin-top:0cm;
  margin-right:0cm;
  margin-bottom:6.0pt;
  margin-left:19.45pt;
  text-indent:-19.45pt;
  line-height:130%;
  mso-pagination:widow-orphan;
  mso-list:l0 level1 lfo1;
  tab-stops:list 19.45pt;
  font-size:11.0pt;
  font-family:Tahoma;
  mso-ascii-font-family:Tahoma;
  mso-ascii-theme-font:minor-latin;
  mso-fareast-font-family:黑体;
  mso-fareast-theme-font:minor-fareast;
  mso-hansi-font-family:Tahoma;
  mso-hansi-theme-font:minor-latin;
  mso-bidi-font-family:Mangal;
  mso-bidi-theme-font:minor-bidi;
  color:#2A2A2A;
  mso-themecolor:text2;
  mso-ansi-language:EN-GB;}
p.MsoBlockText, li.MsoBlockText, div.MsoBlockText
  {mso-style-priority:31;
  margin-top:18.0pt;
  margin-right:0cm;
  margin-bottom:18.0pt;
  margin-left:0cm;
  line-height:130%;
  mso-pagination:widow-orphan;
  font-size:14.0pt;
  mso-bidi-font-size:11.0pt;
  font-family:Tahoma;
  mso-ascii-font-family:Tahoma;
  mso-ascii-theme-font:minor-latin;
  mso-fareast-font-family:黑体;
  mso-fareast-theme-font:minor-fareast;
  mso-hansi-font-family:Tahoma;
  mso-hansi-theme-font:minor-latin;
  mso-bidi-font-family:Mangal;
  mso-bidi-theme-font:minor-bidi;
  color:#3E3E3E;
  mso-themecolor:text2;
  mso-themetint:230;
  mso-ansi-language:EN-GB;
  mso-bidi-font-style:italic;}
p.MsoQuote, li.MsoQuote, div.MsoQuote
  {mso-style-priority:29;
  mso-style-qformat:yes;
  mso-style-link:引用字符;
  mso-style-next:正文;
  margin-top:18.0pt;
  margin-right:0cm;
  margin-bottom:18.0pt;
  margin-left:0cm;
  mso-add-space:auto;
  line-height:130%;
  mso-pagination:widow-orphan;
  font-size:30.0pt;
  mso-bidi-font-size:11.0pt;
  font-family:Tahoma;
  mso-ascii-font-family:Tahoma;
  mso-ascii-theme-font:minor-latin;
  mso-fareast-font-family:黑体;
  mso-fareast-theme-font:minor-fareast;
  mso-hansi-font-family:Tahoma;
  mso-hansi-theme-font:minor-latin;
  mso-bidi-font-family:Mangal;
  mso-bidi-theme-font:minor-bidi;
  color:#2A2A2A;
  mso-themecolor:text2;
  mso-ansi-language:EN-GB;
  mso-bidi-font-style:italic;}
p.MsoQuoteCxSpFirst, li.MsoQuoteCxSpFirst, div.MsoQuoteCxSpFirst
  {mso-style-priority:29;
  mso-style-qformat:yes;
  mso-style-link:引用字符;
  mso-style-next:正文;
  mso-style-type:export-only;
  margin-top:18.0pt;
  margin-right:0cm;
  margin-bottom:0cm;
  margin-left:0cm;
  margin-bottom:.0001pt;
  mso-add-space:auto;
  line-height:130%;
  mso-pagination:widow-orphan;
  font-size:30.0pt;
  mso-bidi-font-size:11.0pt;
  font-family:Tahoma;
  mso-ascii-font-family:Tahoma;
  mso-ascii-theme-font:minor-latin;
  mso-fareast-font-family:黑体;
  mso-fareast-theme-font:minor-fareast;
  mso-hansi-font-family:Tahoma;
  mso-hansi-theme-font:minor-latin;
  mso-bidi-font-family:Mangal;
  mso-bidi-theme-font:minor-bidi;
  color:#2A2A2A;
  mso-themecolor:text2;
  mso-ansi-language:EN-GB;
  mso-bidi-font-style:italic;}
p.MsoQuoteCxSpMiddle, li.MsoQuoteCxSpMiddle, div.MsoQuoteCxSpMiddle
  {mso-style-priority:29;
  mso-style-qformat:yes;
  mso-style-link:引用字符;
  mso-style-next:正文;
  mso-style-type:export-only;
  margin:0cm;
  margin-bottom:.0001pt;
  mso-add-space:auto;
  line-height:130%;
  mso-pagination:widow-orphan;
  font-size:30.0pt;
  mso-bidi-font-size:11.0pt;
  font-family:Tahoma;
  mso-ascii-font-family:Tahoma;
  mso-ascii-theme-font:minor-latin;
  mso-fareast-font-family:黑体;
  mso-fareast-theme-font:minor-fareast;
  mso-hansi-font-family:Tahoma;
  mso-hansi-theme-font:minor-latin;
  mso-bidi-font-family:Mangal;
  mso-bidi-theme-font:minor-bidi;
  color:#2A2A2A;
  mso-themecolor:text2;
  mso-ansi-language:EN-GB;
  mso-bidi-font-style:italic;}
p.MsoQuoteCxSpLast, li.MsoQuoteCxSpLast, div.MsoQuoteCxSpLast
  {mso-style-priority:29;
  mso-style-qformat:yes;
  mso-style-link:引用字符;
  mso-style-next:正文;
  mso-style-type:export-only;
  margin-top:0cm;
  margin-right:0cm;
  margin-bottom:18.0pt;
  margin-left:0cm;
  mso-add-space:auto;
  line-height:130%;
  mso-pagination:widow-orphan;
  font-size:30.0pt;
  mso-bidi-font-size:11.0pt;
  font-family:Tahoma;
  mso-ascii-font-family:Tahoma;
  mso-ascii-theme-font:minor-latin;
  mso-fareast-font-family:黑体;
  mso-fareast-theme-font:minor-fareast;
  mso-hansi-font-family:Tahoma;
  mso-hansi-theme-font:minor-latin;
  mso-bidi-font-family:Mangal;
  mso-bidi-theme-font:minor-bidi;
  color:#2A2A2A;
  mso-themecolor:text2;
  mso-ansi-language:EN-GB;
  mso-bidi-font-style:italic;}
span.1
  {mso-style-name:"标题 1字符";
  mso-style-priority:9;
  mso-style-unhide:no;
  mso-style-locked:yes;
  mso-style-link:"标题 1";
  mso-ansi-font-size:55.0pt;
  mso-bidi-font-size:16.0pt;
  font-family:Tahoma;
  mso-ascii-font-family:Tahoma;
  mso-ascii-theme-font:major-latin;
  mso-fareast-font-family:黑体;
  mso-fareast-theme-font:major-fareast;
  mso-hansi-font-family:Tahoma;
  mso-hansi-theme-font:major-latin;
  mso-bidi-font-family:Mangal;
  mso-bidi-theme-font:major-bidi;
  mso-ansi-language:EN-GB;
  mso-fareast-language:ZH-CN;
  font-weight:bold;
  mso-bidi-font-weight:normal;}
span.2
  {mso-style-name:"标题 2字符";
  mso-style-priority:9;
  mso-style-unhide:no;
  mso-style-locked:yes;
  mso-style-link:"标题 2";
  mso-ansi-font-size:19.0pt;
  mso-bidi-font-size:13.0pt;
  font-family:Tahoma;
  mso-ascii-font-family:Tahoma;
  mso-ascii-theme-font:major-latin;
  mso-fareast-font-family:黑体;
  mso-fareast-theme-font:major-fareast;
  mso-hansi-font-family:Tahoma;
  mso-hansi-theme-font:major-latin;
  mso-bidi-font-family:Mangal;
  mso-bidi-theme-font:major-bidi;
  color:#E09B3B;
  mso-themecolor:accent1;
  mso-ansi-language:EN-GB;
  mso-fareast-language:ZH-CN;
  font-weight:bold;
  mso-bidi-font-weight:normal;}
span.a
  {mso-style-name:页脚字符;
  mso-style-priority:99;
  mso-style-unhide:no;
  mso-style-locked:yes;
  mso-style-link:页脚;
  mso-ansi-font-size:23.0pt;
  mso-ansi-language:EN-GB;
  mso-fareast-language:ZH-CN;
  font-weight:bold;
  mso-bidi-font-weight:normal;}
span.a0
  {mso-style-name:引用字符;
  mso-style-priority:29;
  mso-style-unhide:no;
  mso-style-locked:yes;
  mso-style-link:引用;
  mso-ansi-font-size:30.0pt;
  mso-ansi-language:EN-GB;
  mso-fareast-language:ZH-CN;
  mso-bidi-font-style:italic;}
.MsoChpDefault
  {mso-style-type:export-only;
  mso-default-props:yes;
  font-size:11.0pt;
  mso-ansi-font-size:11.0pt;
  mso-bidi-font-size:11.0pt;
  font-family:Tahoma;
  mso-bidi-font-family:Mangal;
  mso-bidi-theme-font:minor-bidi;
  color:#2A2A2A;
  mso-themecolor:text2;
  mso-font-kerning:0pt;
  mso-fareast-language:JA;}
.MsoPapDefault
  {mso-style-type:export-only;
  margin-bottom:10.0pt;
  line-height:130%;}
 
@page
  {mso-page-border-surround-header:no;
  mso-page-border-surround-footer:no;}
@page WordSection1
  {size:21.0cm 841.95pt;
  margin:72.0pt 54.0pt 91.45pt 54.0pt;
  mso-header-margin:36.0pt;
  mso-footer-margin:39.6pt;
  mso-paper-source:0;}
div.WordSection1
  {page:WordSection1;}
 
@list l0
  {mso-list-id:113718830;
  mso-list-type:hybrid;
  mso-list-template-ids:126521658 -251105220 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l0:level1
  {mso-level-number-format:bullet;
  mso-level-style-link:列表项目符号;
  mso-level-text:;
  mso-level-tab-stop:19.45pt;
  mso-level-number-position:left;
  margin-left:19.45pt;
  text-indent:-19.45pt;
  font-family:Symbol;}
@list l0:level2
  {mso-level-number-format:bullet;
  mso-level-text:o;
  mso-level-tab-stop:none;
  mso-level-number-position:left;
  text-indent:-18.0pt;
  font-family:"Courier New";}
@list l0:level3
  {mso-level-number-format:bullet;
  mso-level-text:;
  mso-level-tab-stop:none;
  mso-level-number-position:left;
  text-indent:-18.0pt;
  font-family:Wingdings;}
@list l0:level4
  {mso-level-number-format:bullet;
  mso-level-text:;
  mso-level-tab-stop:none;
  mso-level-number-position:left;
  text-indent:-18.0pt;
  font-family:Symbol;}
@list l0:level5
  {mso-level-number-format:bullet;
  mso-level-text:o;
  mso-level-tab-stop:none;
  mso-level-number-position:left;
  text-indent:-18.0pt;
  font-family:"Courier New";}
@list l0:level6
  {mso-level-number-format:bullet;
  mso-level-text:;
  mso-level-tab-stop:none;
  mso-level-number-position:left;
  text-indent:-18.0pt;
  font-family:Wingdings;}
@list l0:level7
  {mso-level-number-format:bullet;
  mso-level-text:;
  mso-level-tab-stop:none;
  mso-level-number-position:left;
  text-indent:-18.0pt;
  font-family:Symbol;}
@list l0:level8
  {mso-level-number-format:bullet;
  mso-level-text:o;
  mso-level-tab-stop:none;
  mso-level-number-position:left;
  text-indent:-18.0pt;
  font-family:"Courier New";}
@list l0:level9
  {mso-level-number-format:bullet;
  mso-level-text:;
  mso-level-tab-stop:none;
  mso-level-number-position:left;
  text-indent:-18.0pt;
  font-family:Wingdings;}
ol
  {margin-bottom:0cm;}
ul
  {margin-bottom:0cm;}
-->
</style></body></html>